/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PostCastReqBodyEmbeds - struct for PostCastReqBodyEmbeds
type PostCastReqBodyEmbeds struct {
	PostCastReqBodyEmbedsOneOf *PostCastReqBodyEmbedsOneOf
	PostCastReqBodyEmbedsOneOf1 *PostCastReqBodyEmbedsOneOf1
	PostCastReqBodyEmbedsOneOf2 *PostCastReqBodyEmbedsOneOf2
}

// PostCastReqBodyEmbedsOneOfAsPostCastReqBodyEmbeds is a convenience function that returns PostCastReqBodyEmbedsOneOf wrapped in PostCastReqBodyEmbeds
func PostCastReqBodyEmbedsOneOfAsPostCastReqBodyEmbeds(v *PostCastReqBodyEmbedsOneOf) PostCastReqBodyEmbeds {
	return PostCastReqBodyEmbeds{
		PostCastReqBodyEmbedsOneOf: v,
	}
}

// PostCastReqBodyEmbedsOneOf1AsPostCastReqBodyEmbeds is a convenience function that returns PostCastReqBodyEmbedsOneOf1 wrapped in PostCastReqBodyEmbeds
func PostCastReqBodyEmbedsOneOf1AsPostCastReqBodyEmbeds(v *PostCastReqBodyEmbedsOneOf1) PostCastReqBodyEmbeds {
	return PostCastReqBodyEmbeds{
		PostCastReqBodyEmbedsOneOf1: v,
	}
}

// PostCastReqBodyEmbedsOneOf2AsPostCastReqBodyEmbeds is a convenience function that returns PostCastReqBodyEmbedsOneOf2 wrapped in PostCastReqBodyEmbeds
func PostCastReqBodyEmbedsOneOf2AsPostCastReqBodyEmbeds(v *PostCastReqBodyEmbedsOneOf2) PostCastReqBodyEmbeds {
	return PostCastReqBodyEmbeds{
		PostCastReqBodyEmbedsOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PostCastReqBodyEmbeds) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PostCastReqBodyEmbedsOneOf
	err = newStrictDecoder(data).Decode(&dst.PostCastReqBodyEmbedsOneOf)
	if err == nil {
		jsonPostCastReqBodyEmbedsOneOf, _ := json.Marshal(dst.PostCastReqBodyEmbedsOneOf)
		if string(jsonPostCastReqBodyEmbedsOneOf) == "{}" { // empty struct
			dst.PostCastReqBodyEmbedsOneOf = nil
		} else {
			if err = validator.Validate(dst.PostCastReqBodyEmbedsOneOf); err != nil {
				dst.PostCastReqBodyEmbedsOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostCastReqBodyEmbedsOneOf = nil
	}

	// try to unmarshal data into PostCastReqBodyEmbedsOneOf1
	err = newStrictDecoder(data).Decode(&dst.PostCastReqBodyEmbedsOneOf1)
	if err == nil {
		jsonPostCastReqBodyEmbedsOneOf1, _ := json.Marshal(dst.PostCastReqBodyEmbedsOneOf1)
		if string(jsonPostCastReqBodyEmbedsOneOf1) == "{}" { // empty struct
			dst.PostCastReqBodyEmbedsOneOf1 = nil
		} else {
			if err = validator.Validate(dst.PostCastReqBodyEmbedsOneOf1); err != nil {
				dst.PostCastReqBodyEmbedsOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostCastReqBodyEmbedsOneOf1 = nil
	}

	// try to unmarshal data into PostCastReqBodyEmbedsOneOf2
	err = newStrictDecoder(data).Decode(&dst.PostCastReqBodyEmbedsOneOf2)
	if err == nil {
		jsonPostCastReqBodyEmbedsOneOf2, _ := json.Marshal(dst.PostCastReqBodyEmbedsOneOf2)
		if string(jsonPostCastReqBodyEmbedsOneOf2) == "{}" { // empty struct
			dst.PostCastReqBodyEmbedsOneOf2 = nil
		} else {
			if err = validator.Validate(dst.PostCastReqBodyEmbedsOneOf2); err != nil {
				dst.PostCastReqBodyEmbedsOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PostCastReqBodyEmbedsOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PostCastReqBodyEmbedsOneOf = nil
		dst.PostCastReqBodyEmbedsOneOf1 = nil
		dst.PostCastReqBodyEmbedsOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PostCastReqBodyEmbeds)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PostCastReqBodyEmbeds)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PostCastReqBodyEmbeds) MarshalJSON() ([]byte, error) {
	if src.PostCastReqBodyEmbedsOneOf != nil {
		return json.Marshal(&src.PostCastReqBodyEmbedsOneOf)
	}

	if src.PostCastReqBodyEmbedsOneOf1 != nil {
		return json.Marshal(&src.PostCastReqBodyEmbedsOneOf1)
	}

	if src.PostCastReqBodyEmbedsOneOf2 != nil {
		return json.Marshal(&src.PostCastReqBodyEmbedsOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PostCastReqBodyEmbeds) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PostCastReqBodyEmbedsOneOf != nil {
		return obj.PostCastReqBodyEmbedsOneOf
	}

	if obj.PostCastReqBodyEmbedsOneOf1 != nil {
		return obj.PostCastReqBodyEmbedsOneOf1
	}

	if obj.PostCastReqBodyEmbedsOneOf2 != nil {
		return obj.PostCastReqBodyEmbedsOneOf2
	}

	// all schemas are nil
	return nil
}

type NullablePostCastReqBodyEmbeds struct {
	value *PostCastReqBodyEmbeds
	isSet bool
}

func (v NullablePostCastReqBodyEmbeds) Get() *PostCastReqBodyEmbeds {
	return v.value
}

func (v *NullablePostCastReqBodyEmbeds) Set(val *PostCastReqBodyEmbeds) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCastReqBodyEmbeds) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCastReqBodyEmbeds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCastReqBodyEmbeds(val *PostCastReqBodyEmbeds) *NullablePostCastReqBodyEmbeds {
	return &NullablePostCastReqBodyEmbeds{value: val, isSet: true}
}

func (v NullablePostCastReqBodyEmbeds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCastReqBodyEmbeds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressBalance{}

// AddressBalance The token balances associated with a wallet address
type AddressBalance struct {
	Object string `json:"object"`
	VerifiedAddress AddressBalanceVerifiedAddress `json:"verified_address"`
	TokenBalances []TokenBalance `json:"token_balances"`
}

type _AddressBalance AddressBalance

// NewAddressBalance instantiates a new AddressBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressBalance(object string, verifiedAddress AddressBalanceVerifiedAddress, tokenBalances []TokenBalance) *AddressBalance {
	this := AddressBalance{}
	this.Object = object
	this.VerifiedAddress = verifiedAddress
	this.TokenBalances = tokenBalances
	return &this
}

// NewAddressBalanceWithDefaults instantiates a new AddressBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressBalanceWithDefaults() *AddressBalance {
	this := AddressBalance{}
	return &this
}

// GetObject returns the Object field value
func (o *AddressBalance) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *AddressBalance) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *AddressBalance) SetObject(v string) {
	o.Object = v
}

// GetVerifiedAddress returns the VerifiedAddress field value
func (o *AddressBalance) GetVerifiedAddress() AddressBalanceVerifiedAddress {
	if o == nil {
		var ret AddressBalanceVerifiedAddress
		return ret
	}

	return o.VerifiedAddress
}

// GetVerifiedAddressOk returns a tuple with the VerifiedAddress field value
// and a boolean to check if the value has been set.
func (o *AddressBalance) GetVerifiedAddressOk() (*AddressBalanceVerifiedAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VerifiedAddress, true
}

// SetVerifiedAddress sets field value
func (o *AddressBalance) SetVerifiedAddress(v AddressBalanceVerifiedAddress) {
	o.VerifiedAddress = v
}

// GetTokenBalances returns the TokenBalances field value
func (o *AddressBalance) GetTokenBalances() []TokenBalance {
	if o == nil {
		var ret []TokenBalance
		return ret
	}

	return o.TokenBalances
}

// GetTokenBalancesOk returns a tuple with the TokenBalances field value
// and a boolean to check if the value has been set.
func (o *AddressBalance) GetTokenBalancesOk() ([]TokenBalance, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenBalances, true
}

// SetTokenBalances sets field value
func (o *AddressBalance) SetTokenBalances(v []TokenBalance) {
	o.TokenBalances = v
}

func (o AddressBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["verified_address"] = o.VerifiedAddress
	toSerialize["token_balances"] = o.TokenBalances
	return toSerialize, nil
}

func (o *AddressBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"verified_address",
		"token_balances",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressBalance := _AddressBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressBalance)

	if err != nil {
		return err
	}

	*o = AddressBalance(varAddressBalance)

	return err
}

type NullableAddressBalance struct {
	value *AddressBalance
	isSet bool
}

func (v NullableAddressBalance) Get() *AddressBalance {
	return v.value
}

func (v *NullableAddressBalance) Set(val *AddressBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressBalance(val *AddressBalance) *NullableAddressBalance {
	return &NullableAddressBalance{value: val, isSet: true}
}

func (v NullableAddressBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



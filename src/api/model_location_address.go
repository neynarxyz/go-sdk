/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LocationAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationAddress{}

// LocationAddress struct for LocationAddress
type LocationAddress struct {
	City string `json:"city"`
	State *string `json:"state,omitempty"`
	StateCode *string `json:"state_code,omitempty"`
	Country string `json:"country"`
	CountryCode *string `json:"country_code,omitempty"`
}

type _LocationAddress LocationAddress

// NewLocationAddress instantiates a new LocationAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationAddress(city string, country string) *LocationAddress {
	this := LocationAddress{}
	this.City = city
	this.Country = country
	return &this
}

// NewLocationAddressWithDefaults instantiates a new LocationAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationAddressWithDefaults() *LocationAddress {
	this := LocationAddress{}
	return &this
}

// GetCity returns the City field value
func (o *LocationAddress) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *LocationAddress) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *LocationAddress) SetCity(v string) {
	o.City = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *LocationAddress) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationAddress) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *LocationAddress) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *LocationAddress) SetState(v string) {
	o.State = &v
}

// GetStateCode returns the StateCode field value if set, zero value otherwise.
func (o *LocationAddress) GetStateCode() string {
	if o == nil || IsNil(o.StateCode) {
		var ret string
		return ret
	}
	return *o.StateCode
}

// GetStateCodeOk returns a tuple with the StateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationAddress) GetStateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StateCode) {
		return nil, false
	}
	return o.StateCode, true
}

// HasStateCode returns a boolean if a field has been set.
func (o *LocationAddress) HasStateCode() bool {
	if o != nil && !IsNil(o.StateCode) {
		return true
	}

	return false
}

// SetStateCode gets a reference to the given string and assigns it to the StateCode field.
func (o *LocationAddress) SetStateCode(v string) {
	o.StateCode = &v
}

// GetCountry returns the Country field value
func (o *LocationAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *LocationAddress) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *LocationAddress) SetCountry(v string) {
	o.Country = v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *LocationAddress) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationAddress) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *LocationAddress) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *LocationAddress) SetCountryCode(v string) {
	o.CountryCode = &v
}

func (o LocationAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["city"] = o.City
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.StateCode) {
		toSerialize["state_code"] = o.StateCode
	}
	toSerialize["country"] = o.Country
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	return toSerialize, nil
}

func (o *LocationAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"city",
		"country",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocationAddress := _LocationAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLocationAddress)

	if err != nil {
		return err
	}

	*o = LocationAddress(varLocationAddress)

	return err
}

type NullableLocationAddress struct {
	value *LocationAddress
	isSet bool
}

func (v NullableLocationAddress) Get() *LocationAddress {
	return v.value
}

func (v *NullableLocationAddress) Set(val *LocationAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationAddress(val *LocationAddress) *NullableLocationAddress {
	return &NullableLocationAddress{value: val, isSet: true}
}

func (v NullableLocationAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FrameV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameV1{}

// FrameV1 Mini app v1 object
type FrameV1 struct {
	// Version of the mini app, 'next' for v2, 'vNext' for v1
	Version string `json:"version"`
	// URL of the image
	Image string `json:"image"`
	// Launch URL of the mini app
	FramesUrl string `json:"frames_url"`
	Buttons []FrameActionButton `json:"buttons,omitempty"`
	// Post URL to take an action on this mini app
	PostUrl *string `json:"post_url,omitempty"`
	Title *string `json:"title,omitempty"`
	ImageAspectRatio *string `json:"image_aspect_ratio,omitempty"`
	Input *FrameV1AllOfInput `json:"input,omitempty"`
	State *FrameV1AllOfState `json:"state,omitempty"`
}

type _FrameV1 FrameV1

// NewFrameV1 instantiates a new FrameV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameV1(version string, image string, framesUrl string) *FrameV1 {
	this := FrameV1{}
	this.Version = version
	this.Image = image
	this.FramesUrl = framesUrl
	return &this
}

// NewFrameV1WithDefaults instantiates a new FrameV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameV1WithDefaults() *FrameV1 {
	this := FrameV1{}
	return &this
}

// GetVersion returns the Version field value
func (o *FrameV1) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FrameV1) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FrameV1) SetVersion(v string) {
	o.Version = v
}

// GetImage returns the Image field value
func (o *FrameV1) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *FrameV1) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *FrameV1) SetImage(v string) {
	o.Image = v
}

// GetFramesUrl returns the FramesUrl field value
func (o *FrameV1) GetFramesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FramesUrl
}

// GetFramesUrlOk returns a tuple with the FramesUrl field value
// and a boolean to check if the value has been set.
func (o *FrameV1) GetFramesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FramesUrl, true
}

// SetFramesUrl sets field value
func (o *FrameV1) SetFramesUrl(v string) {
	o.FramesUrl = v
}

// GetButtons returns the Buttons field value if set, zero value otherwise.
func (o *FrameV1) GetButtons() []FrameActionButton {
	if o == nil || IsNil(o.Buttons) {
		var ret []FrameActionButton
		return ret
	}
	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV1) GetButtonsOk() ([]FrameActionButton, bool) {
	if o == nil || IsNil(o.Buttons) {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *FrameV1) HasButtons() bool {
	if o != nil && !IsNil(o.Buttons) {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []FrameActionButton and assigns it to the Buttons field.
func (o *FrameV1) SetButtons(v []FrameActionButton) {
	o.Buttons = v
}

// GetPostUrl returns the PostUrl field value if set, zero value otherwise.
func (o *FrameV1) GetPostUrl() string {
	if o == nil || IsNil(o.PostUrl) {
		var ret string
		return ret
	}
	return *o.PostUrl
}

// GetPostUrlOk returns a tuple with the PostUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV1) GetPostUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PostUrl) {
		return nil, false
	}
	return o.PostUrl, true
}

// HasPostUrl returns a boolean if a field has been set.
func (o *FrameV1) HasPostUrl() bool {
	if o != nil && !IsNil(o.PostUrl) {
		return true
	}

	return false
}

// SetPostUrl gets a reference to the given string and assigns it to the PostUrl field.
func (o *FrameV1) SetPostUrl(v string) {
	o.PostUrl = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *FrameV1) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV1) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *FrameV1) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *FrameV1) SetTitle(v string) {
	o.Title = &v
}

// GetImageAspectRatio returns the ImageAspectRatio field value if set, zero value otherwise.
func (o *FrameV1) GetImageAspectRatio() string {
	if o == nil || IsNil(o.ImageAspectRatio) {
		var ret string
		return ret
	}
	return *o.ImageAspectRatio
}

// GetImageAspectRatioOk returns a tuple with the ImageAspectRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV1) GetImageAspectRatioOk() (*string, bool) {
	if o == nil || IsNil(o.ImageAspectRatio) {
		return nil, false
	}
	return o.ImageAspectRatio, true
}

// HasImageAspectRatio returns a boolean if a field has been set.
func (o *FrameV1) HasImageAspectRatio() bool {
	if o != nil && !IsNil(o.ImageAspectRatio) {
		return true
	}

	return false
}

// SetImageAspectRatio gets a reference to the given string and assigns it to the ImageAspectRatio field.
func (o *FrameV1) SetImageAspectRatio(v string) {
	o.ImageAspectRatio = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *FrameV1) GetInput() FrameV1AllOfInput {
	if o == nil || IsNil(o.Input) {
		var ret FrameV1AllOfInput
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV1) GetInputOk() (*FrameV1AllOfInput, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *FrameV1) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given FrameV1AllOfInput and assigns it to the Input field.
func (o *FrameV1) SetInput(v FrameV1AllOfInput) {
	o.Input = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FrameV1) GetState() FrameV1AllOfState {
	if o == nil || IsNil(o.State) {
		var ret FrameV1AllOfState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV1) GetStateOk() (*FrameV1AllOfState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FrameV1) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given FrameV1AllOfState and assigns it to the State field.
func (o *FrameV1) SetState(v FrameV1AllOfState) {
	o.State = &v
}

func (o FrameV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["image"] = o.Image
	toSerialize["frames_url"] = o.FramesUrl
	if !IsNil(o.Buttons) {
		toSerialize["buttons"] = o.Buttons
	}
	if !IsNil(o.PostUrl) {
		toSerialize["post_url"] = o.PostUrl
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.ImageAspectRatio) {
		toSerialize["image_aspect_ratio"] = o.ImageAspectRatio
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

func (o *FrameV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"image",
		"frames_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFrameV1 := _FrameV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFrameV1)

	if err != nil {
		return err
	}

	*o = FrameV1(varFrameV1)

	return err
}

type NullableFrameV1 struct {
	value *FrameV1
	isSet bool
}

func (v NullableFrameV1) Get() *FrameV1 {
	return v.value
}

func (v *NullableFrameV1) Set(val *FrameV1) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameV1) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameV1(val *FrameV1) *NullableFrameV1 {
	return &NullableFrameV1{value: val, isSet: true}
}

func (v NullableFrameV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



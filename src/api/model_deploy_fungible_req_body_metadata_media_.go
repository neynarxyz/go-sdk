/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"os"
	"gopkg.in/validator.v2"
	"fmt"
)

// DeployFungibleReqBodyMetadataMedia - struct for DeployFungibleReqBodyMetadataMedia
type DeployFungibleReqBodyMetadataMedia struct {
	*OsFile **os.File
	String *string
}

// *os.FileAsDeployFungibleReqBodyMetadataMedia is a convenience function that returns *os.File wrapped in DeployFungibleReqBodyMetadataMedia
func *OsFileAsDeployFungibleReqBodyMetadataMedia(v **os.File) DeployFungibleReqBodyMetadataMedia {
	return DeployFungibleReqBodyMetadataMedia{
		*OsFile: v,
	}
}

// stringAsDeployFungibleReqBodyMetadataMedia is a convenience function that returns string wrapped in DeployFungibleReqBodyMetadataMedia
func StringAsDeployFungibleReqBodyMetadataMedia(v *string) DeployFungibleReqBodyMetadataMedia {
	return DeployFungibleReqBodyMetadataMedia{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeployFungibleReqBodyMetadataMedia) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into *OsFile
	err = newStrictDecoder(data).Decode(&dst.*OsFile)
	if err == nil {
		json*OsFile, _ := json.Marshal(dst.*OsFile)
		if string(json*OsFile) == "{}" { // empty struct
			dst.*OsFile = nil
		} else {
			if err = validator.Validate(dst.*OsFile); err != nil {
				dst.*OsFile = nil
			} else {
				match++
			}
		}
	} else {
		dst.*OsFile = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.*OsFile = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeployFungibleReqBodyMetadataMedia)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeployFungibleReqBodyMetadataMedia)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeployFungibleReqBodyMetadataMedia) MarshalJSON() ([]byte, error) {
	if src.*OsFile != nil {
		return json.Marshal(&src.*OsFile)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeployFungibleReqBodyMetadataMedia) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.*OsFile != nil {
		return obj.*OsFile
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDeployFungibleReqBodyMetadataMedia struct {
	value *DeployFungibleReqBodyMetadataMedia
	isSet bool
}

func (v NullableDeployFungibleReqBodyMetadataMedia) Get() *DeployFungibleReqBodyMetadataMedia {
	return v.value
}

func (v *NullableDeployFungibleReqBodyMetadataMedia) Set(val *DeployFungibleReqBodyMetadataMedia) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployFungibleReqBodyMetadataMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployFungibleReqBodyMetadataMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployFungibleReqBodyMetadataMedia(val *DeployFungibleReqBodyMetadataMedia) *NullableDeployFungibleReqBodyMetadataMedia {
	return &NullableDeployFungibleReqBodyMetadataMedia{value: val, isSet: true}
}

func (v NullableDeployFungibleReqBodyMetadataMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployFungibleReqBodyMetadataMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CastDehydrated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastDehydrated{}

// CastDehydrated struct for CastDehydrated
type CastDehydrated struct {
	Object string `json:"object"`
	Hash string `json:"hash"`
	Author *UserDehydrated `json:"author,omitempty"`
	App NullableUserDehydrated `json:"app,omitempty"`
}

type _CastDehydrated CastDehydrated

// NewCastDehydrated instantiates a new CastDehydrated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastDehydrated(object string, hash string) *CastDehydrated {
	this := CastDehydrated{}
	this.Object = object
	this.Hash = hash
	return &this
}

// NewCastDehydratedWithDefaults instantiates a new CastDehydrated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastDehydratedWithDefaults() *CastDehydrated {
	this := CastDehydrated{}
	return &this
}

// GetObject returns the Object field value
func (o *CastDehydrated) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *CastDehydrated) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *CastDehydrated) SetObject(v string) {
	o.Object = v
}

// GetHash returns the Hash field value
func (o *CastDehydrated) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *CastDehydrated) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *CastDehydrated) SetHash(v string) {
	o.Hash = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *CastDehydrated) GetAuthor() UserDehydrated {
	if o == nil || IsNil(o.Author) {
		var ret UserDehydrated
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CastDehydrated) GetAuthorOk() (*UserDehydrated, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *CastDehydrated) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given UserDehydrated and assigns it to the Author field.
func (o *CastDehydrated) SetAuthor(v UserDehydrated) {
	o.Author = &v
}

// GetApp returns the App field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CastDehydrated) GetApp() UserDehydrated {
	if o == nil || IsNil(o.App.Get()) {
		var ret UserDehydrated
		return ret
	}
	return *o.App.Get()
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CastDehydrated) GetAppOk() (*UserDehydrated, bool) {
	if o == nil {
		return nil, false
	}
	return o.App.Get(), o.App.IsSet()
}

// HasApp returns a boolean if a field has been set.
func (o *CastDehydrated) HasApp() bool {
	if o != nil && o.App.IsSet() {
		return true
	}

	return false
}

// SetApp gets a reference to the given NullableUserDehydrated and assigns it to the App field.
func (o *CastDehydrated) SetApp(v UserDehydrated) {
	o.App.Set(&v)
}
// SetAppNil sets the value for App to be an explicit nil
func (o *CastDehydrated) SetAppNil() {
	o.App.Set(nil)
}

// UnsetApp ensures that no value is present for App, not even an explicit nil
func (o *CastDehydrated) UnsetApp() {
	o.App.Unset()
}

func (o CastDehydrated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastDehydrated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["hash"] = o.Hash
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if o.App.IsSet() {
		toSerialize["app"] = o.App.Get()
	}
	return toSerialize, nil
}

func (o *CastDehydrated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCastDehydrated := _CastDehydrated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCastDehydrated)

	if err != nil {
		return err
	}

	*o = CastDehydrated(varCastDehydrated)

	return err
}

type NullableCastDehydrated struct {
	value *CastDehydrated
	isSet bool
}

func (v NullableCastDehydrated) Get() *CastDehydrated {
	return v.value
}

func (v *NullableCastDehydrated) Set(val *CastDehydrated) {
	v.value = val
	v.isSet = true
}

func (v NullableCastDehydrated) IsSet() bool {
	return v.isSet
}

func (v *NullableCastDehydrated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastDehydrated(val *CastDehydrated) *NullableCastDehydrated {
	return &NullableCastDehydrated{value: val, isSet: true}
}

func (v NullableCastDehydrated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastDehydrated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



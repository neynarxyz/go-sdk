/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.21.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type CastsAPI interface {

	/*
	FetchCastsByParent By parent cast

	Retrieve all reply casts (responses) to a specific parent cast in the Farcaster network. Parent casts can be identified using either a combination of FID and hash, or by their URL. This endpoint enables traversal of conversation threads and retrieval of all responses to a particular cast.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchCastsByParentRequest
	*/
	FetchCastsByParent(ctx context.Context) ApiFetchCastsByParentRequest

	// FetchCastsByParentExecute executes the request
	//  @return FetchCastsByParent200Response
	FetchCastsByParentExecute(r ApiFetchCastsByParentRequest) (*FetchCastsByParent200Response, *http.Response, error)

	/*
	FetchCastsMentioningUser Mentioning an FID

	Fetch casts mentioning a user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchCastsMentioningUserRequest
	*/
	FetchCastsMentioningUser(ctx context.Context) ApiFetchCastsMentioningUserRequest

	// FetchCastsMentioningUserExecute executes the request
	//  @return FetchUsersCasts200Response
	FetchCastsMentioningUserExecute(r ApiFetchCastsMentioningUserRequest) (*FetchUsersCasts200Response, *http.Response, error)

	/*
	FetchUsersCasts By FID

	Fetch user's casts.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchUsersCastsRequest
	*/
	FetchUsersCasts(ctx context.Context) ApiFetchUsersCastsRequest

	// FetchUsersCastsExecute executes the request
	//  @return FetchUsersCasts200Response
	FetchUsersCastsExecute(r ApiFetchUsersCastsRequest) (*FetchUsersCasts200Response, *http.Response, error)

	/*
	LookupCastByHashAndFid By FID and Hash

	Lookup a cast by its FID and hash.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiLookupCastByHashAndFidRequest
	*/
	LookupCastByHashAndFid(ctx context.Context) ApiLookupCastByHashAndFidRequest

	// LookupCastByHashAndFidExecute executes the request
	//  @return CastAdd
	LookupCastByHashAndFidExecute(r ApiLookupCastByHashAndFidRequest) (*CastAdd, *http.Response, error)
}

// CastsAPIService CastsAPI service
type CastsAPIService service

type ApiFetchCastsByParentRequest struct {
	ctx context.Context
	ApiService CastsAPI
	fid *int32
	hash *string
	url *string
	pageSize *int32
	reverse *bool
	pageToken *string
}

// The Farcaster ID (FID) of the parent cast&#39;s creator. This parameter must be used together with the &#39;hash&#39; parameter to uniquely identify a parent cast. Required only when using hash-based lookup instead of URL-based lookup. The FID is a unique identifier assigned to each Farcaster user.
func (r ApiFetchCastsByParentRequest) Fid(fid int32) ApiFetchCastsByParentRequest {
	r.fid = &fid
	return r
}

// The unique hash identifier of the parent cast. Must be used together with the &#39;fid&#39; parameter when doing hash-based lookup. This is a 40-character hexadecimal string prefixed with &#39;0x&#39; that uniquely identifies the cast within the creator&#39;s posts. Not required if using URL-based lookup.
func (r ApiFetchCastsByParentRequest) Hash(hash string) ApiFetchCastsByParentRequest {
	r.hash = &hash
	return r
}

// Cast URL starting with &#39;chain://&#39;
func (r ApiFetchCastsByParentRequest) Url(url string) ApiFetchCastsByParentRequest {
	r.url = &url
	return r
}

// Maximum number of messages to return in a single response
func (r ApiFetchCastsByParentRequest) PageSize(pageSize int32) ApiFetchCastsByParentRequest {
	r.pageSize = &pageSize
	return r
}

// Reverse the sort order, returning latest messages first
func (r ApiFetchCastsByParentRequest) Reverse(reverse bool) ApiFetchCastsByParentRequest {
	r.reverse = &reverse
	return r
}

// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
func (r ApiFetchCastsByParentRequest) PageToken(pageToken string) ApiFetchCastsByParentRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiFetchCastsByParentRequest) Execute() (*FetchCastsByParent200Response, *http.Response, error) {
	return r.ApiService.FetchCastsByParentExecute(r)
}

/*
FetchCastsByParent By parent cast

Retrieve all reply casts (responses) to a specific parent cast in the Farcaster network. Parent casts can be identified using either a combination of FID and hash, or by their URL. This endpoint enables traversal of conversation threads and retrieval of all responses to a particular cast.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFetchCastsByParentRequest
*/
func (a *CastsAPIService) FetchCastsByParent(ctx context.Context) ApiFetchCastsByParentRequest {
	return ApiFetchCastsByParentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchCastsByParent200Response
func (a *CastsAPIService) FetchCastsByParentExecute(r ApiFetchCastsByParentRequest) (*FetchCastsByParent200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchCastsByParent200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CastsAPIService.FetchCastsByParent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/castsByParent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	}
	if r.hash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hash", r.hash, "form", "")
	}
	if r.url != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url", r.url, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.reverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse", r.reverse, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchCastsMentioningUserRequest struct {
	ctx context.Context
	ApiService CastsAPI
	fid *int32
	pageSize *int32
	reverse *bool
	pageToken *string
}

// The FID that is mentioned in a cast
func (r ApiFetchCastsMentioningUserRequest) Fid(fid int32) ApiFetchCastsMentioningUserRequest {
	r.fid = &fid
	return r
}

// Maximum number of messages to return in a single response
func (r ApiFetchCastsMentioningUserRequest) PageSize(pageSize int32) ApiFetchCastsMentioningUserRequest {
	r.pageSize = &pageSize
	return r
}

// Reverse the sort order, returning latest messages first
func (r ApiFetchCastsMentioningUserRequest) Reverse(reverse bool) ApiFetchCastsMentioningUserRequest {
	r.reverse = &reverse
	return r
}

// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
func (r ApiFetchCastsMentioningUserRequest) PageToken(pageToken string) ApiFetchCastsMentioningUserRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiFetchCastsMentioningUserRequest) Execute() (*FetchUsersCasts200Response, *http.Response, error) {
	return r.ApiService.FetchCastsMentioningUserExecute(r)
}

/*
FetchCastsMentioningUser Mentioning an FID

Fetch casts mentioning a user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFetchCastsMentioningUserRequest
*/
func (a *CastsAPIService) FetchCastsMentioningUser(ctx context.Context) ApiFetchCastsMentioningUserRequest {
	return ApiFetchCastsMentioningUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchUsersCasts200Response
func (a *CastsAPIService) FetchCastsMentioningUserExecute(r ApiFetchCastsMentioningUserRequest) (*FetchUsersCasts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchUsersCasts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CastsAPIService.FetchCastsMentioningUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/castsByMention"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.reverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse", r.reverse, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchUsersCastsRequest struct {
	ctx context.Context
	ApiService CastsAPI
	fid *int32
	pageSize *int32
	reverse *bool
	pageToken *string
}

// The FID of the casts&#39; creator
func (r ApiFetchUsersCastsRequest) Fid(fid int32) ApiFetchUsersCastsRequest {
	r.fid = &fid
	return r
}

// Maximum number of messages to return in a single response
func (r ApiFetchUsersCastsRequest) PageSize(pageSize int32) ApiFetchUsersCastsRequest {
	r.pageSize = &pageSize
	return r
}

// Reverse the sort order, returning latest messages first
func (r ApiFetchUsersCastsRequest) Reverse(reverse bool) ApiFetchUsersCastsRequest {
	r.reverse = &reverse
	return r
}

// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
func (r ApiFetchUsersCastsRequest) PageToken(pageToken string) ApiFetchUsersCastsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiFetchUsersCastsRequest) Execute() (*FetchUsersCasts200Response, *http.Response, error) {
	return r.ApiService.FetchUsersCastsExecute(r)
}

/*
FetchUsersCasts By FID

Fetch user's casts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFetchUsersCastsRequest
*/
func (a *CastsAPIService) FetchUsersCasts(ctx context.Context) ApiFetchUsersCastsRequest {
	return ApiFetchUsersCastsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchUsersCasts200Response
func (a *CastsAPIService) FetchUsersCastsExecute(r ApiFetchUsersCastsRequest) (*FetchUsersCasts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchUsersCasts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CastsAPIService.FetchUsersCasts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/castsByFid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if *r.fid < 1 {
		return localVarReturnValue, nil, reportError("fid must be greater than 1")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.reverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse", r.reverse, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLookupCastByHashAndFidRequest struct {
	ctx context.Context
	ApiService CastsAPI
	fid *int32
	hash *string
}

// The FID of the cast&#39;s creator
func (r ApiLookupCastByHashAndFidRequest) Fid(fid int32) ApiLookupCastByHashAndFidRequest {
	r.fid = &fid
	return r
}

// The unique hash identifier of the cast. This is a 40-character hexadecimal string prefixed with &#39;0x&#39; that uniquely identifies a specific cast in the Farcaster network.
func (r ApiLookupCastByHashAndFidRequest) Hash(hash string) ApiLookupCastByHashAndFidRequest {
	r.hash = &hash
	return r
}

func (r ApiLookupCastByHashAndFidRequest) Execute() (*CastAdd, *http.Response, error) {
	return r.ApiService.LookupCastByHashAndFidExecute(r)
}

/*
LookupCastByHashAndFid By FID and Hash

Lookup a cast by its FID and hash.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLookupCastByHashAndFidRequest
*/
func (a *CastsAPIService) LookupCastByHashAndFid(ctx context.Context) ApiLookupCastByHashAndFidRequest {
	return ApiLookupCastByHashAndFidRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CastAdd
func (a *CastsAPIService) LookupCastByHashAndFidExecute(r ApiLookupCastByHashAndFidRequest) (*CastAdd, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CastAdd
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CastsAPIService.LookupCastByHashAndFid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/castById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if *r.fid < 1 {
		return localVarReturnValue, nil, reportError("fid must be greater than 1")
	}
	if r.hash == nil {
		return localVarReturnValue, nil, reportError("hash is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "hash", r.hash, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

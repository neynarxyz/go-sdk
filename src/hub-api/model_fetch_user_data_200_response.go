/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.21.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// FetchUserData200Response - struct for FetchUserData200Response
type FetchUserData200Response struct {
	FetchUserData200ResponseOneOf *FetchUserData200ResponseOneOf
	UserDataAdd *UserDataAdd
}

// FetchUserData200ResponseOneOfAsFetchUserData200Response is a convenience function that returns FetchUserData200ResponseOneOf wrapped in FetchUserData200Response
func FetchUserData200ResponseOneOfAsFetchUserData200Response(v *FetchUserData200ResponseOneOf) FetchUserData200Response {
	return FetchUserData200Response{
		FetchUserData200ResponseOneOf: v,
	}
}

// UserDataAddAsFetchUserData200Response is a convenience function that returns UserDataAdd wrapped in FetchUserData200Response
func UserDataAddAsFetchUserData200Response(v *UserDataAdd) FetchUserData200Response {
	return FetchUserData200Response{
		UserDataAdd: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FetchUserData200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FetchUserData200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.FetchUserData200ResponseOneOf)
	if err == nil {
		jsonFetchUserData200ResponseOneOf, _ := json.Marshal(dst.FetchUserData200ResponseOneOf)
		if string(jsonFetchUserData200ResponseOneOf) == "{}" { // empty struct
			dst.FetchUserData200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.FetchUserData200ResponseOneOf); err != nil {
				dst.FetchUserData200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.FetchUserData200ResponseOneOf = nil
	}

	// try to unmarshal data into UserDataAdd
	err = newStrictDecoder(data).Decode(&dst.UserDataAdd)
	if err == nil {
		jsonUserDataAdd, _ := json.Marshal(dst.UserDataAdd)
		if string(jsonUserDataAdd) == "{}" { // empty struct
			dst.UserDataAdd = nil
		} else {
			if err = validator.Validate(dst.UserDataAdd); err != nil {
				dst.UserDataAdd = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserDataAdd = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FetchUserData200ResponseOneOf = nil
		dst.UserDataAdd = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FetchUserData200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FetchUserData200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FetchUserData200Response) MarshalJSON() ([]byte, error) {
	if src.FetchUserData200ResponseOneOf != nil {
		return json.Marshal(&src.FetchUserData200ResponseOneOf)
	}

	if src.UserDataAdd != nil {
		return json.Marshal(&src.UserDataAdd)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FetchUserData200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FetchUserData200ResponseOneOf != nil {
		return obj.FetchUserData200ResponseOneOf
	}

	if obj.UserDataAdd != nil {
		return obj.UserDataAdd
	}

	// all schemas are nil
	return nil
}

type NullableFetchUserData200Response struct {
	value *FetchUserData200Response
	isSet bool
}

func (v NullableFetchUserData200Response) Get() *FetchUserData200Response {
	return v.value
}

func (v *NullableFetchUserData200Response) Set(val *FetchUserData200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchUserData200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchUserData200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchUserData200Response(val *FetchUserData200Response) *NullableFetchUserData200Response {
	return &NullableFetchUserData200Response{value: val, isSet: true}
}

func (v NullableFetchUserData200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchUserData200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



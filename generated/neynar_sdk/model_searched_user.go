/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.38.2
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// SearchedUser struct for SearchedUser
type SearchedUser struct {
	ProfileUrl *ProfileUrl
	User       *User
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SearchedUser) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ProfileUrl
	err = json.Unmarshal(data, &dst.ProfileUrl)
	if err == nil {
		jsonProfileUrl, _ := json.Marshal(dst.ProfileUrl)
		if string(jsonProfileUrl) == "{}" { // empty struct
			dst.ProfileUrl = nil
		} else {
			return nil // data stored in dst.ProfileUrl, return on the first match
		}
	} else {
		dst.ProfileUrl = nil
	}

	// try to unmarshal JSON data into User
	err = json.Unmarshal(data, &dst.User)
	if err == nil {
		jsonUser, _ := json.Marshal(dst.User)
		if string(jsonUser) == "{}" { // empty struct
			dst.User = nil
		} else {
			return nil // data stored in dst.User, return on the first match
		}
	} else {
		dst.User = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SearchedUser)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SearchedUser) MarshalJSON() ([]byte, error) {
	if src.ProfileUrl != nil {
		return json.Marshal(&src.ProfileUrl)
	}

	if src.User != nil {
		return json.Marshal(&src.User)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSearchedUser struct {
	value *SearchedUser
	isSet bool
}

func (v NullableSearchedUser) Get() *SearchedUser {
	return v.value
}

func (v *NullableSearchedUser) Set(val *SearchedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchedUser(val *SearchedUser) *NullableSearchedUser {
	return &NullableSearchedUser{value: val, isSet: true}
}

func (v NullableSearchedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

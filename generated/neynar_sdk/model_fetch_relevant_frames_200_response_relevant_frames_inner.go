/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.38.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FetchRelevantFrames200ResponseRelevantFramesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchRelevantFrames200ResponseRelevantFramesInner{}

// FetchRelevantFrames200ResponseRelevantFramesInner struct for FetchRelevantFrames200ResponseRelevantFramesInner
type FetchRelevantFrames200ResponseRelevantFramesInner struct {
	// Array of FrameV2 objects
	Frames []FrameV2WithFullAuthor `json:"frames"`
	// Array of the most relevant users
	TopRelevantUsers []User `json:"top_relevant_users"`
	// Array of remaining relevant users in dehydrated form
	RemainingRelevantUsers []UserDehydrated `json:"remaining_relevant_users"`
}

type _FetchRelevantFrames200ResponseRelevantFramesInner FetchRelevantFrames200ResponseRelevantFramesInner

// NewFetchRelevantFrames200ResponseRelevantFramesInner instantiates a new FetchRelevantFrames200ResponseRelevantFramesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchRelevantFrames200ResponseRelevantFramesInner(frames []FrameV2WithFullAuthor, topRelevantUsers []User, remainingRelevantUsers []UserDehydrated) *FetchRelevantFrames200ResponseRelevantFramesInner {
	this := FetchRelevantFrames200ResponseRelevantFramesInner{}
	this.Frames = frames
	this.TopRelevantUsers = topRelevantUsers
	this.RemainingRelevantUsers = remainingRelevantUsers
	return &this
}

// NewFetchRelevantFrames200ResponseRelevantFramesInnerWithDefaults instantiates a new FetchRelevantFrames200ResponseRelevantFramesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchRelevantFrames200ResponseRelevantFramesInnerWithDefaults() *FetchRelevantFrames200ResponseRelevantFramesInner {
	this := FetchRelevantFrames200ResponseRelevantFramesInner{}
	return &this
}

// GetFrames returns the Frames field value
func (o *FetchRelevantFrames200ResponseRelevantFramesInner) GetFrames() []FrameV2WithFullAuthor {
	if o == nil {
		var ret []FrameV2WithFullAuthor
		return ret
	}

	return o.Frames
}

// GetFramesOk returns a tuple with the Frames field value
// and a boolean to check if the value has been set.
func (o *FetchRelevantFrames200ResponseRelevantFramesInner) GetFramesOk() ([]FrameV2WithFullAuthor, bool) {
	if o == nil {
		return nil, false
	}
	return o.Frames, true
}

// SetFrames sets field value
func (o *FetchRelevantFrames200ResponseRelevantFramesInner) SetFrames(v []FrameV2WithFullAuthor) {
	o.Frames = v
}

// GetTopRelevantUsers returns the TopRelevantUsers field value
func (o *FetchRelevantFrames200ResponseRelevantFramesInner) GetTopRelevantUsers() []User {
	if o == nil {
		var ret []User
		return ret
	}

	return o.TopRelevantUsers
}

// GetTopRelevantUsersOk returns a tuple with the TopRelevantUsers field value
// and a boolean to check if the value has been set.
func (o *FetchRelevantFrames200ResponseRelevantFramesInner) GetTopRelevantUsersOk() ([]User, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopRelevantUsers, true
}

// SetTopRelevantUsers sets field value
func (o *FetchRelevantFrames200ResponseRelevantFramesInner) SetTopRelevantUsers(v []User) {
	o.TopRelevantUsers = v
}

// GetRemainingRelevantUsers returns the RemainingRelevantUsers field value
func (o *FetchRelevantFrames200ResponseRelevantFramesInner) GetRemainingRelevantUsers() []UserDehydrated {
	if o == nil {
		var ret []UserDehydrated
		return ret
	}

	return o.RemainingRelevantUsers
}

// GetRemainingRelevantUsersOk returns a tuple with the RemainingRelevantUsers field value
// and a boolean to check if the value has been set.
func (o *FetchRelevantFrames200ResponseRelevantFramesInner) GetRemainingRelevantUsersOk() ([]UserDehydrated, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemainingRelevantUsers, true
}

// SetRemainingRelevantUsers sets field value
func (o *FetchRelevantFrames200ResponseRelevantFramesInner) SetRemainingRelevantUsers(v []UserDehydrated) {
	o.RemainingRelevantUsers = v
}

func (o FetchRelevantFrames200ResponseRelevantFramesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchRelevantFrames200ResponseRelevantFramesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["frames"] = o.Frames
	toSerialize["top_relevant_users"] = o.TopRelevantUsers
	toSerialize["remaining_relevant_users"] = o.RemainingRelevantUsers
	return toSerialize, nil
}

func (o *FetchRelevantFrames200ResponseRelevantFramesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"frames",
		"top_relevant_users",
		"remaining_relevant_users",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFetchRelevantFrames200ResponseRelevantFramesInner := _FetchRelevantFrames200ResponseRelevantFramesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFetchRelevantFrames200ResponseRelevantFramesInner)

	if err != nil {
		return err
	}

	*o = FetchRelevantFrames200ResponseRelevantFramesInner(varFetchRelevantFrames200ResponseRelevantFramesInner)

	return err
}

type NullableFetchRelevantFrames200ResponseRelevantFramesInner struct {
	value *FetchRelevantFrames200ResponseRelevantFramesInner
	isSet bool
}

func (v NullableFetchRelevantFrames200ResponseRelevantFramesInner) Get() *FetchRelevantFrames200ResponseRelevantFramesInner {
	return v.value
}

func (v *NullableFetchRelevantFrames200ResponseRelevantFramesInner) Set(val *FetchRelevantFrames200ResponseRelevantFramesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchRelevantFrames200ResponseRelevantFramesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchRelevantFrames200ResponseRelevantFramesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchRelevantFrames200ResponseRelevantFramesInner(val *FetchRelevantFrames200ResponseRelevantFramesInner) *NullableFetchRelevantFrames200ResponseRelevantFramesInner {
	return &NullableFetchRelevantFrames200ResponseRelevantFramesInner{value: val, isSet: true}
}

func (v NullableFetchRelevantFrames200ResponseRelevantFramesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchRelevantFrames200ResponseRelevantFramesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

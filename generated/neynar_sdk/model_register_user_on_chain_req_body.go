/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RegisterUserOnChainReqBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterUserOnChainReqBody{}

// RegisterUserOnChainReqBody struct for RegisterUserOnChainReqBody
type RegisterUserOnChainReqBody struct {
	// An Idempotency key is a unique identifier for the request. **Note:**  1) Pre-registration calls must be idempotent when using idempotency keys. 2) This is used to prevent duplicate requests. Use the same idem key on retry attempts. 3) This should be a unique identifier for each request. 4) Recommended format is a 16-character string generated by the developer at the time of making this request.
	Idem                 *string                                               `json:"idem,omitempty"`
	PreRegistrationCalls []RegisterUserOnChainReqBodyPreRegistrationCallsInner `json:"pre_registration_calls,omitempty"`
	Registration         RegisterUserOnChainReqBodyRegistration                `json:"registration"`
	StorageUnits         *int32                                                `json:"storage_units,omitempty"`
	Signers              []RegisterUserOnChainReqBodySignersInner              `json:"signers,omitempty"`
}

type _RegisterUserOnChainReqBody RegisterUserOnChainReqBody

// NewRegisterUserOnChainReqBody instantiates a new RegisterUserOnChainReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterUserOnChainReqBody(registration RegisterUserOnChainReqBodyRegistration) *RegisterUserOnChainReqBody {
	this := RegisterUserOnChainReqBody{}
	this.Registration = registration
	return &this
}

// NewRegisterUserOnChainReqBodyWithDefaults instantiates a new RegisterUserOnChainReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterUserOnChainReqBodyWithDefaults() *RegisterUserOnChainReqBody {
	this := RegisterUserOnChainReqBody{}
	return &this
}

// GetIdem returns the Idem field value if set, zero value otherwise.
func (o *RegisterUserOnChainReqBody) GetIdem() string {
	if o == nil || IsNil(o.Idem) {
		var ret string
		return ret
	}
	return *o.Idem
}

// GetIdemOk returns a tuple with the Idem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserOnChainReqBody) GetIdemOk() (*string, bool) {
	if o == nil || IsNil(o.Idem) {
		return nil, false
	}
	return o.Idem, true
}

// HasIdem returns a boolean if a field has been set.
func (o *RegisterUserOnChainReqBody) HasIdem() bool {
	if o != nil && !IsNil(o.Idem) {
		return true
	}

	return false
}

// SetIdem gets a reference to the given string and assigns it to the Idem field.
func (o *RegisterUserOnChainReqBody) SetIdem(v string) {
	o.Idem = &v
}

// GetPreRegistrationCalls returns the PreRegistrationCalls field value if set, zero value otherwise.
func (o *RegisterUserOnChainReqBody) GetPreRegistrationCalls() []RegisterUserOnChainReqBodyPreRegistrationCallsInner {
	if o == nil || IsNil(o.PreRegistrationCalls) {
		var ret []RegisterUserOnChainReqBodyPreRegistrationCallsInner
		return ret
	}
	return o.PreRegistrationCalls
}

// GetPreRegistrationCallsOk returns a tuple with the PreRegistrationCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserOnChainReqBody) GetPreRegistrationCallsOk() ([]RegisterUserOnChainReqBodyPreRegistrationCallsInner, bool) {
	if o == nil || IsNil(o.PreRegistrationCalls) {
		return nil, false
	}
	return o.PreRegistrationCalls, true
}

// HasPreRegistrationCalls returns a boolean if a field has been set.
func (o *RegisterUserOnChainReqBody) HasPreRegistrationCalls() bool {
	if o != nil && !IsNil(o.PreRegistrationCalls) {
		return true
	}

	return false
}

// SetPreRegistrationCalls gets a reference to the given []RegisterUserOnChainReqBodyPreRegistrationCallsInner and assigns it to the PreRegistrationCalls field.
func (o *RegisterUserOnChainReqBody) SetPreRegistrationCalls(v []RegisterUserOnChainReqBodyPreRegistrationCallsInner) {
	o.PreRegistrationCalls = v
}

// GetRegistration returns the Registration field value
func (o *RegisterUserOnChainReqBody) GetRegistration() RegisterUserOnChainReqBodyRegistration {
	if o == nil {
		var ret RegisterUserOnChainReqBodyRegistration
		return ret
	}

	return o.Registration
}

// GetRegistrationOk returns a tuple with the Registration field value
// and a boolean to check if the value has been set.
func (o *RegisterUserOnChainReqBody) GetRegistrationOk() (*RegisterUserOnChainReqBodyRegistration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Registration, true
}

// SetRegistration sets field value
func (o *RegisterUserOnChainReqBody) SetRegistration(v RegisterUserOnChainReqBodyRegistration) {
	o.Registration = v
}

// GetStorageUnits returns the StorageUnits field value if set, zero value otherwise.
func (o *RegisterUserOnChainReqBody) GetStorageUnits() int32 {
	if o == nil || IsNil(o.StorageUnits) {
		var ret int32
		return ret
	}
	return *o.StorageUnits
}

// GetStorageUnitsOk returns a tuple with the StorageUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserOnChainReqBody) GetStorageUnitsOk() (*int32, bool) {
	if o == nil || IsNil(o.StorageUnits) {
		return nil, false
	}
	return o.StorageUnits, true
}

// HasStorageUnits returns a boolean if a field has been set.
func (o *RegisterUserOnChainReqBody) HasStorageUnits() bool {
	if o != nil && !IsNil(o.StorageUnits) {
		return true
	}

	return false
}

// SetStorageUnits gets a reference to the given int32 and assigns it to the StorageUnits field.
func (o *RegisterUserOnChainReqBody) SetStorageUnits(v int32) {
	o.StorageUnits = &v
}

// GetSigners returns the Signers field value if set, zero value otherwise.
func (o *RegisterUserOnChainReqBody) GetSigners() []RegisterUserOnChainReqBodySignersInner {
	if o == nil || IsNil(o.Signers) {
		var ret []RegisterUserOnChainReqBodySignersInner
		return ret
	}
	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserOnChainReqBody) GetSignersOk() ([]RegisterUserOnChainReqBodySignersInner, bool) {
	if o == nil || IsNil(o.Signers) {
		return nil, false
	}
	return o.Signers, true
}

// HasSigners returns a boolean if a field has been set.
func (o *RegisterUserOnChainReqBody) HasSigners() bool {
	if o != nil && !IsNil(o.Signers) {
		return true
	}

	return false
}

// SetSigners gets a reference to the given []RegisterUserOnChainReqBodySignersInner and assigns it to the Signers field.
func (o *RegisterUserOnChainReqBody) SetSigners(v []RegisterUserOnChainReqBodySignersInner) {
	o.Signers = v
}

func (o RegisterUserOnChainReqBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterUserOnChainReqBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Idem) {
		toSerialize["idem"] = o.Idem
	}
	if !IsNil(o.PreRegistrationCalls) {
		toSerialize["pre_registration_calls"] = o.PreRegistrationCalls
	}
	toSerialize["registration"] = o.Registration
	if !IsNil(o.StorageUnits) {
		toSerialize["storage_units"] = o.StorageUnits
	}
	if !IsNil(o.Signers) {
		toSerialize["signers"] = o.Signers
	}
	return toSerialize, nil
}

func (o *RegisterUserOnChainReqBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registration",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varRegisterUserOnChainReqBody := _RegisterUserOnChainReqBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterUserOnChainReqBody)

	if err != nil {
		return err
	}

	*o = RegisterUserOnChainReqBody(varRegisterUserOnChainReqBody)

	return err
}

type NullableRegisterUserOnChainReqBody struct {
	value *RegisterUserOnChainReqBody
	isSet bool
}

func (v NullableRegisterUserOnChainReqBody) Get() *RegisterUserOnChainReqBody {
	return v.value
}

func (v *NullableRegisterUserOnChainReqBody) Set(val *RegisterUserOnChainReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterUserOnChainReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterUserOnChainReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterUserOnChainReqBody(val *RegisterUserOnChainReqBody) *NullableRegisterUserOnChainReqBody {
	return &NullableRegisterUserOnChainReqBody{value: val, isSet: true}
}

func (v NullableRegisterUserOnChainReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterUserOnChainReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

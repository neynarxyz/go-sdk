/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FrameV2WithFullAuthorMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameV2WithFullAuthorMetadata{}

// FrameV2WithFullAuthorMetadata struct for FrameV2WithFullAuthorMetadata
type FrameV2WithFullAuthorMetadata struct {
	Html HtmlMetadata `json:"html"`
}

type _FrameV2WithFullAuthorMetadata FrameV2WithFullAuthorMetadata

// NewFrameV2WithFullAuthorMetadata instantiates a new FrameV2WithFullAuthorMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameV2WithFullAuthorMetadata(html HtmlMetadata) *FrameV2WithFullAuthorMetadata {
	this := FrameV2WithFullAuthorMetadata{}
	this.Html = html
	return &this
}

// NewFrameV2WithFullAuthorMetadataWithDefaults instantiates a new FrameV2WithFullAuthorMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameV2WithFullAuthorMetadataWithDefaults() *FrameV2WithFullAuthorMetadata {
	this := FrameV2WithFullAuthorMetadata{}
	return &this
}

// GetHtml returns the Html field value
func (o *FrameV2WithFullAuthorMetadata) GetHtml() HtmlMetadata {
	if o == nil {
		var ret HtmlMetadata
		return ret
	}

	return o.Html
}

// GetHtmlOk returns a tuple with the Html field value
// and a boolean to check if the value has been set.
func (o *FrameV2WithFullAuthorMetadata) GetHtmlOk() (*HtmlMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Html, true
}

// SetHtml sets field value
func (o *FrameV2WithFullAuthorMetadata) SetHtml(v HtmlMetadata) {
	o.Html = v
}

func (o FrameV2WithFullAuthorMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameV2WithFullAuthorMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["html"] = o.Html
	return toSerialize, nil
}

func (o *FrameV2WithFullAuthorMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"html",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFrameV2WithFullAuthorMetadata := _FrameV2WithFullAuthorMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFrameV2WithFullAuthorMetadata)

	if err != nil {
		return err
	}

	*o = FrameV2WithFullAuthorMetadata(varFrameV2WithFullAuthorMetadata)

	return err
}

type NullableFrameV2WithFullAuthorMetadata struct {
	value *FrameV2WithFullAuthorMetadata
	isSet bool
}

func (v NullableFrameV2WithFullAuthorMetadata) Get() *FrameV2WithFullAuthorMetadata {
	return v.value
}

func (v *NullableFrameV2WithFullAuthorMetadata) Set(val *FrameV2WithFullAuthorMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameV2WithFullAuthorMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameV2WithFullAuthorMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameV2WithFullAuthorMetadata(val *FrameV2WithFullAuthorMetadata) *NullableFrameV2WithFullAuthorMetadata {
	return &NullableFrameV2WithFullAuthorMetadata{value: val, isSet: true}
}

func (v NullableFrameV2WithFullAuthorMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameV2WithFullAuthorMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

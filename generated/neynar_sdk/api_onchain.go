/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.4
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)

type OnchainAPI interface {

	/*
			DeployFungible Deploy fungible

			Creates a new token.
		This is an allowlisted API, reach out if you want access.


			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return ApiDeployFungibleRequest
	*/
	DeployFungible(ctx context.Context) ApiDeployFungibleRequest

	// DeployFungibleExecute executes the request
	//  @return DeployFungibleResponse
	DeployFungibleExecute(r ApiDeployFungibleRequest) (*DeployFungibleResponse, *http.Response, error)

	/*
		FetchRelevantFungibleOwners Relevant owners

		Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as "X, Y, Z and N others you know own this asset".

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchRelevantFungibleOwnersRequest
	*/
	FetchRelevantFungibleOwners(ctx context.Context) ApiFetchRelevantFungibleOwnersRequest

	// FetchRelevantFungibleOwnersExecute executes the request
	//  @return RelevantFungibleOwnersResponse
	FetchRelevantFungibleOwnersExecute(r ApiFetchRelevantFungibleOwnersRequest) (*RelevantFungibleOwnersResponse, *http.Response, error)

	/*
		FetchUserBalance Token balance

		Fetches the token balances of a user given their FID

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchUserBalanceRequest
	*/
	FetchUserBalance(ctx context.Context) ApiFetchUserBalanceRequest

	// FetchUserBalanceExecute executes the request
	//  @return BalanceResponse
	FetchUserBalanceExecute(r ApiFetchUserBalanceRequest) (*BalanceResponse, *http.Response, error)

	/*
		RegisterAccountOnchain Register Farcaster account onchain

		Register a new farcaster account onchain. Optionally you can pass in signers along to register a new account and create multiple signers in a single transaction


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiRegisterAccountOnchainRequest
	*/
	RegisterAccountOnchain(ctx context.Context) ApiRegisterAccountOnchainRequest

	// RegisterAccountOnchainExecute executes the request
	//  @return RegisterUserOnChainResponse
	RegisterAccountOnchainExecute(r ApiRegisterAccountOnchainRequest) (*RegisterUserOnChainResponse, *http.Response, error)
}

// OnchainAPIService OnchainAPI service
type OnchainAPIService service

type ApiDeployFungibleRequest struct {
	ctx                 context.Context
	ApiService          OnchainAPI
	owner               *string
	symbol              *string
	name                *string
	metadataMedia       *os.File
	metadataDescription *string
	metadataNsfw        *string
	metadataWebsiteLink *string
	metadataTwitter     *string
	metadataDiscord     *string
	metadataTelegram    *string
	network             *string
	factory             *string
}

// Ethereum address of the one who is creating the token
func (r ApiDeployFungibleRequest) Owner(owner string) ApiDeployFungibleRequest {
	r.owner = &owner
	return r
}

// Symbol/Ticker for the token
func (r ApiDeployFungibleRequest) Symbol(symbol string) ApiDeployFungibleRequest {
	r.symbol = &symbol
	return r
}

// Name of the token
func (r ApiDeployFungibleRequest) Name(name string) ApiDeployFungibleRequest {
	r.name = &name
	return r
}

// Media file associated with the token.  Supported formats are image/jpeg, image/gif and image/png
func (r ApiDeployFungibleRequest) MetadataMedia(metadataMedia *os.File) ApiDeployFungibleRequest {
	r.metadataMedia = metadataMedia
	return r
}

// Description of the token
func (r ApiDeployFungibleRequest) MetadataDescription(metadataDescription string) ApiDeployFungibleRequest {
	r.metadataDescription = &metadataDescription
	return r
}

// Indicates if the token is NSFW (Not Safe For Work).
func (r ApiDeployFungibleRequest) MetadataNsfw(metadataNsfw string) ApiDeployFungibleRequest {
	r.metadataNsfw = &metadataNsfw
	return r
}

// Website link related to the token
func (r ApiDeployFungibleRequest) MetadataWebsiteLink(metadataWebsiteLink string) ApiDeployFungibleRequest {
	r.metadataWebsiteLink = &metadataWebsiteLink
	return r
}

// Twitter profile link
func (r ApiDeployFungibleRequest) MetadataTwitter(metadataTwitter string) ApiDeployFungibleRequest {
	r.metadataTwitter = &metadataTwitter
	return r
}

// Discord server link
func (r ApiDeployFungibleRequest) MetadataDiscord(metadataDiscord string) ApiDeployFungibleRequest {
	r.metadataDiscord = &metadataDiscord
	return r
}

// Telegram link
func (r ApiDeployFungibleRequest) MetadataTelegram(metadataTelegram string) ApiDeployFungibleRequest {
	r.metadataTelegram = &metadataTelegram
	return r
}

// Network/Chain name
func (r ApiDeployFungibleRequest) Network(network string) ApiDeployFungibleRequest {
	r.network = &network
	return r
}

// Factory name - wow -&gt; [wow.xyz](https://wow.xyz) - clanker -&gt; [clanker.world](https://www.clanker.world)
func (r ApiDeployFungibleRequest) Factory(factory string) ApiDeployFungibleRequest {
	r.factory = &factory
	return r
}

func (r ApiDeployFungibleRequest) Execute() (*DeployFungibleResponse, *http.Response, error) {
	return r.ApiService.DeployFungibleExecute(r)
}

/*
DeployFungible Deploy fungible

Creates a new token.
This is an allowlisted API, reach out if you want access.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeployFungibleRequest
*/
func (a *OnchainAPIService) DeployFungible(ctx context.Context) ApiDeployFungibleRequest {
	return ApiDeployFungibleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeployFungibleResponse
func (a *OnchainAPIService) DeployFungibleExecute(r ApiDeployFungibleRequest) (*DeployFungibleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeployFungibleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnchainAPIService.DeployFungible")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fungible"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.owner == nil {
		return localVarReturnValue, nil, reportError("owner is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "owner", r.owner, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "symbol", r.symbol, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "", "")
	var metadataMediaLocalVarFormFileName string
	var metadataMediaLocalVarFileName string
	var metadataMediaLocalVarFileBytes []byte

	metadataMediaLocalVarFormFileName = "metadata[media]"
	metadataMediaLocalVarFile := r.metadataMedia

	if metadataMediaLocalVarFile != nil {
		fbs, _ := io.ReadAll(metadataMediaLocalVarFile)

		metadataMediaLocalVarFileBytes = fbs
		metadataMediaLocalVarFileName = metadataMediaLocalVarFile.Name()
		metadataMediaLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: metadataMediaLocalVarFileBytes, fileName: metadataMediaLocalVarFileName, formFileName: metadataMediaLocalVarFormFileName})
	}
	if r.metadataDescription != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "metadata[description]", r.metadataDescription, "", "")
	}
	if r.metadataNsfw != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "metadata[nsfw]", r.metadataNsfw, "", "")
	}
	if r.metadataWebsiteLink != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "metadata[website_link]", r.metadataWebsiteLink, "", "")
	}
	if r.metadataTwitter != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "metadata[twitter]", r.metadataTwitter, "", "")
	}
	if r.metadataDiscord != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "metadata[discord]", r.metadataDiscord, "", "")
	}
	if r.metadataTelegram != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "metadata[telegram]", r.metadataTelegram, "", "")
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "network", r.network, "", "")
	}
	if r.factory != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "factory", r.factory, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchRelevantFungibleOwnersRequest struct {
	ctx             context.Context
	ApiService      OnchainAPI
	contractAddress *string
	network         *Network
	viewerFid       *int32
}

// Contract address of the fungible asset
func (r ApiFetchRelevantFungibleOwnersRequest) ContractAddress(contractAddress string) ApiFetchRelevantFungibleOwnersRequest {
	r.contractAddress = &contractAddress
	return r
}

// Network of the fungible asset.
func (r ApiFetchRelevantFungibleOwnersRequest) Network(network Network) ApiFetchRelevantFungibleOwnersRequest {
	r.network = &network
	return r
}

// If you provide a viewer_fid, the response will include token holders from the user&#39;s network, respecting their mutes and blocks and including viewer_context; if not provided, the response will show top token holders across the network—both sets can be combined to generate a longer list if desired.
func (r ApiFetchRelevantFungibleOwnersRequest) ViewerFid(viewerFid int32) ApiFetchRelevantFungibleOwnersRequest {
	r.viewerFid = &viewerFid
	return r
}

func (r ApiFetchRelevantFungibleOwnersRequest) Execute() (*RelevantFungibleOwnersResponse, *http.Response, error) {
	return r.ApiService.FetchRelevantFungibleOwnersExecute(r)
}

/*
FetchRelevantFungibleOwners Relevant owners

Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as "X, Y, Z and N others you know own this asset".

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchRelevantFungibleOwnersRequest
*/
func (a *OnchainAPIService) FetchRelevantFungibleOwners(ctx context.Context) ApiFetchRelevantFungibleOwnersRequest {
	return ApiFetchRelevantFungibleOwnersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RelevantFungibleOwnersResponse
func (a *OnchainAPIService) FetchRelevantFungibleOwnersExecute(r ApiFetchRelevantFungibleOwnersRequest) (*RelevantFungibleOwnersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RelevantFungibleOwnersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnchainAPIService.FetchRelevantFungibleOwners")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/fungible/owner/relevant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contractAddress == nil {
		return localVarReturnValue, nil, reportError("contractAddress is required and must be specified")
	}
	if r.network == nil {
		return localVarReturnValue, nil, reportError("network is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "contract_address", r.contractAddress, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "network", r.network, "form", "")
	if r.viewerFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "viewer_fid", r.viewerFid, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchUserBalanceRequest struct {
	ctx        context.Context
	ApiService OnchainAPI
	fid        *int32
	networks   *[]Network
}

// FID of the user to fetch
func (r ApiFetchUserBalanceRequest) Fid(fid int32) ApiFetchUserBalanceRequest {
	r.fid = &fid
	return r
}

// Comma separated list of networks to fetch balances for
func (r ApiFetchUserBalanceRequest) Networks(networks []Network) ApiFetchUserBalanceRequest {
	r.networks = &networks
	return r
}

func (r ApiFetchUserBalanceRequest) Execute() (*BalanceResponse, *http.Response, error) {
	return r.ApiService.FetchUserBalanceExecute(r)
}

/*
FetchUserBalance Token balance

Fetches the token balances of a user given their FID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchUserBalanceRequest
*/
func (a *OnchainAPIService) FetchUserBalance(ctx context.Context) ApiFetchUserBalanceRequest {
	return ApiFetchUserBalanceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BalanceResponse
func (a *OnchainAPIService) FetchUserBalanceExecute(r ApiFetchUserBalanceRequest) (*BalanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BalanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnchainAPIService.FetchUserBalance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/user/balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if r.networks == nil {
		return localVarReturnValue, nil, reportError("networks is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "networks", r.networks, "form", "csv")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegisterAccountOnchainRequest struct {
	ctx                        context.Context
	ApiService                 OnchainAPI
	registerUserOnChainReqBody *RegisterUserOnChainReqBody
}

func (r ApiRegisterAccountOnchainRequest) RegisterUserOnChainReqBody(registerUserOnChainReqBody RegisterUserOnChainReqBody) ApiRegisterAccountOnchainRequest {
	r.registerUserOnChainReqBody = &registerUserOnChainReqBody
	return r
}

func (r ApiRegisterAccountOnchainRequest) Execute() (*RegisterUserOnChainResponse, *http.Response, error) {
	return r.ApiService.RegisterAccountOnchainExecute(r)
}

/*
RegisterAccountOnchain Register Farcaster account onchain

Register a new farcaster account onchain. Optionally you can pass in signers along to register a new account and create multiple signers in a single transaction

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRegisterAccountOnchainRequest
*/
func (a *OnchainAPIService) RegisterAccountOnchain(ctx context.Context) ApiRegisterAccountOnchainRequest {
	return ApiRegisterAccountOnchainRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RegisterUserOnChainResponse
func (a *OnchainAPIService) RegisterAccountOnchainExecute(r ApiRegisterAccountOnchainRequest) (*RegisterUserOnChainResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RegisterUserOnChainResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnchainAPIService.RegisterAccountOnchain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/user/register"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.registerUserOnChainReqBody == nil {
		return localVarReturnValue, nil, reportError("registerUserOnChainReqBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.registerUserOnChainReqBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

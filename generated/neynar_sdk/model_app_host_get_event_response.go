/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AppHostGetEventResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppHostGetEventResponse{}

// AppHostGetEventResponse struct for AppHostGetEventResponse
type AppHostGetEventResponse struct {
	// Legacy event type corresponding to the requested event type: - frame_added: User adds a mini app to their account - frame_removed: User removes a mini app from their account - notifications_enabled: User enables notifications for a mini app - notifications_disabled: User disables notifications for a mini app
	Event               string                                      `json:"event"`
	NotificationDetails *AppHostGetEventResponseNotificationDetails `json:"notificationDetails,omitempty"`
}

type _AppHostGetEventResponse AppHostGetEventResponse

// NewAppHostGetEventResponse instantiates a new AppHostGetEventResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppHostGetEventResponse(event string) *AppHostGetEventResponse {
	this := AppHostGetEventResponse{}
	this.Event = event
	return &this
}

// NewAppHostGetEventResponseWithDefaults instantiates a new AppHostGetEventResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppHostGetEventResponseWithDefaults() *AppHostGetEventResponse {
	this := AppHostGetEventResponse{}
	return &this
}

// GetEvent returns the Event field value
func (o *AppHostGetEventResponse) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *AppHostGetEventResponse) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *AppHostGetEventResponse) SetEvent(v string) {
	o.Event = v
}

// GetNotificationDetails returns the NotificationDetails field value if set, zero value otherwise.
func (o *AppHostGetEventResponse) GetNotificationDetails() AppHostGetEventResponseNotificationDetails {
	if o == nil || IsNil(o.NotificationDetails) {
		var ret AppHostGetEventResponseNotificationDetails
		return ret
	}
	return *o.NotificationDetails
}

// GetNotificationDetailsOk returns a tuple with the NotificationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppHostGetEventResponse) GetNotificationDetailsOk() (*AppHostGetEventResponseNotificationDetails, bool) {
	if o == nil || IsNil(o.NotificationDetails) {
		return nil, false
	}
	return o.NotificationDetails, true
}

// HasNotificationDetails returns a boolean if a field has been set.
func (o *AppHostGetEventResponse) HasNotificationDetails() bool {
	if o != nil && !IsNil(o.NotificationDetails) {
		return true
	}

	return false
}

// SetNotificationDetails gets a reference to the given AppHostGetEventResponseNotificationDetails and assigns it to the NotificationDetails field.
func (o *AppHostGetEventResponse) SetNotificationDetails(v AppHostGetEventResponseNotificationDetails) {
	o.NotificationDetails = &v
}

func (o AppHostGetEventResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppHostGetEventResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	if !IsNil(o.NotificationDetails) {
		toSerialize["notificationDetails"] = o.NotificationDetails
	}
	return toSerialize, nil
}

func (o *AppHostGetEventResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varAppHostGetEventResponse := _AppHostGetEventResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppHostGetEventResponse)

	if err != nil {
		return err
	}

	*o = AppHostGetEventResponse(varAppHostGetEventResponse)

	return err
}

type NullableAppHostGetEventResponse struct {
	value *AppHostGetEventResponse
	isSet bool
}

func (v NullableAppHostGetEventResponse) Get() *AppHostGetEventResponse {
	return v.value
}

func (v *NullableAppHostGetEventResponse) Set(val *AppHostGetEventResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAppHostGetEventResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAppHostGetEventResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppHostGetEventResponse(val *AppHostGetEventResponse) *NullableAppHostGetEventResponse {
	return &NullableAppHostGetEventResponse{value: val, isSet: true}
}

func (v NullableAppHostGetEventResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppHostGetEventResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

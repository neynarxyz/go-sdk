/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.4
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// MiniAppTimeWindow Time window for mini app analytics
type MiniAppTimeWindow string

// List of MiniAppTimeWindow
const (
	MINIAPPTIMEWINDOW__1H  MiniAppTimeWindow = "1h"
	MINIAPPTIMEWINDOW__6H  MiniAppTimeWindow = "6h"
	MINIAPPTIMEWINDOW__12H MiniAppTimeWindow = "12h"
	MINIAPPTIMEWINDOW__24H MiniAppTimeWindow = "24h"
	MINIAPPTIMEWINDOW__7D  MiniAppTimeWindow = "7d"
)

// All allowed values of MiniAppTimeWindow enum
var AllowedMiniAppTimeWindowEnumValues = []MiniAppTimeWindow{
	"1h",
	"6h",
	"12h",
	"24h",
	"7d",
}

func (v *MiniAppTimeWindow) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MiniAppTimeWindow(value)
	for _, existing := range AllowedMiniAppTimeWindowEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MiniAppTimeWindow", value)
}

// NewMiniAppTimeWindowFromValue returns a pointer to a valid MiniAppTimeWindow
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMiniAppTimeWindowFromValue(v string) (*MiniAppTimeWindow, error) {
	ev := MiniAppTimeWindow(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MiniAppTimeWindow: valid values are %v", v, AllowedMiniAppTimeWindowEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MiniAppTimeWindow) IsValid() bool {
	for _, existing := range AllowedMiniAppTimeWindowEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MiniAppTimeWindow value
func (v MiniAppTimeWindow) Ptr() *MiniAppTimeWindow {
	return &v
}

type NullableMiniAppTimeWindow struct {
	value *MiniAppTimeWindow
	isSet bool
}

func (v NullableMiniAppTimeWindow) Get() *MiniAppTimeWindow {
	return v.value
}

func (v *NullableMiniAppTimeWindow) Set(val *MiniAppTimeWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableMiniAppTimeWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableMiniAppTimeWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiniAppTimeWindow(val *MiniAppTimeWindow) *NullableMiniAppTimeWindow {
	return &NullableMiniAppTimeWindow{value: val, isSet: true}
}

func (v NullableMiniAppTimeWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiniAppTimeWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// HtmlMetadataOembed - struct for HtmlMetadataOembed
type HtmlMetadataOembed struct {
	OembedLinkData  *OembedLinkData
	OembedPhotoData *OembedPhotoData
	OembedRichData  *OembedRichData
	OembedVideoData *OembedVideoData
}

// OembedLinkDataAsHtmlMetadataOembed is a convenience function that returns OembedLinkData wrapped in HtmlMetadataOembed
func OembedLinkDataAsHtmlMetadataOembed(v *OembedLinkData) HtmlMetadataOembed {
	return HtmlMetadataOembed{
		OembedLinkData: v,
	}
}

// OembedPhotoDataAsHtmlMetadataOembed is a convenience function that returns OembedPhotoData wrapped in HtmlMetadataOembed
func OembedPhotoDataAsHtmlMetadataOembed(v *OembedPhotoData) HtmlMetadataOembed {
	return HtmlMetadataOembed{
		OembedPhotoData: v,
	}
}

// OembedRichDataAsHtmlMetadataOembed is a convenience function that returns OembedRichData wrapped in HtmlMetadataOembed
func OembedRichDataAsHtmlMetadataOembed(v *OembedRichData) HtmlMetadataOembed {
	return HtmlMetadataOembed{
		OembedRichData: v,
	}
}

// OembedVideoDataAsHtmlMetadataOembed is a convenience function that returns OembedVideoData wrapped in HtmlMetadataOembed
func OembedVideoDataAsHtmlMetadataOembed(v *OembedVideoData) HtmlMetadataOembed {
	return HtmlMetadataOembed{
		OembedVideoData: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *HtmlMetadataOembed) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OembedLinkData
	err = newStrictDecoder(data).Decode(&dst.OembedLinkData)
	if err == nil {
		jsonOembedLinkData, _ := json.Marshal(dst.OembedLinkData)
		if string(jsonOembedLinkData) == "{}" { // empty struct
			dst.OembedLinkData = nil
		} else {
			if err = validator.Validate(dst.OembedLinkData); err != nil {
				dst.OembedLinkData = nil
			} else {
				match++
			}
		}
	} else {
		dst.OembedLinkData = nil
	}

	// try to unmarshal data into OembedPhotoData
	err = newStrictDecoder(data).Decode(&dst.OembedPhotoData)
	if err == nil {
		jsonOembedPhotoData, _ := json.Marshal(dst.OembedPhotoData)
		if string(jsonOembedPhotoData) == "{}" { // empty struct
			dst.OembedPhotoData = nil
		} else {
			if err = validator.Validate(dst.OembedPhotoData); err != nil {
				dst.OembedPhotoData = nil
			} else {
				match++
			}
		}
	} else {
		dst.OembedPhotoData = nil
	}

	// try to unmarshal data into OembedRichData
	err = newStrictDecoder(data).Decode(&dst.OembedRichData)
	if err == nil {
		jsonOembedRichData, _ := json.Marshal(dst.OembedRichData)
		if string(jsonOembedRichData) == "{}" { // empty struct
			dst.OembedRichData = nil
		} else {
			if err = validator.Validate(dst.OembedRichData); err != nil {
				dst.OembedRichData = nil
			} else {
				match++
			}
		}
	} else {
		dst.OembedRichData = nil
	}

	// try to unmarshal data into OembedVideoData
	err = newStrictDecoder(data).Decode(&dst.OembedVideoData)
	if err == nil {
		jsonOembedVideoData, _ := json.Marshal(dst.OembedVideoData)
		if string(jsonOembedVideoData) == "{}" { // empty struct
			dst.OembedVideoData = nil
		} else {
			if err = validator.Validate(dst.OembedVideoData); err != nil {
				dst.OembedVideoData = nil
			} else {
				match++
			}
		}
	} else {
		dst.OembedVideoData = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OembedLinkData = nil
		dst.OembedPhotoData = nil
		dst.OembedRichData = nil
		dst.OembedVideoData = nil

		return fmt.Errorf("data matches more than one schema in oneOf(HtmlMetadataOembed)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(HtmlMetadataOembed)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HtmlMetadataOembed) MarshalJSON() ([]byte, error) {
	if src.OembedLinkData != nil {
		return json.Marshal(&src.OembedLinkData)
	}

	if src.OembedPhotoData != nil {
		return json.Marshal(&src.OembedPhotoData)
	}

	if src.OembedRichData != nil {
		return json.Marshal(&src.OembedRichData)
	}

	if src.OembedVideoData != nil {
		return json.Marshal(&src.OembedVideoData)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HtmlMetadataOembed) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.OembedLinkData != nil {
		return obj.OembedLinkData
	}

	if obj.OembedPhotoData != nil {
		return obj.OembedPhotoData
	}

	if obj.OembedRichData != nil {
		return obj.OembedRichData
	}

	if obj.OembedVideoData != nil {
		return obj.OembedVideoData
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj HtmlMetadataOembed) GetActualInstanceValue() interface{} {
	if obj.OembedLinkData != nil {
		return *obj.OembedLinkData
	}

	if obj.OembedPhotoData != nil {
		return *obj.OembedPhotoData
	}

	if obj.OembedRichData != nil {
		return *obj.OembedRichData
	}

	if obj.OembedVideoData != nil {
		return *obj.OembedVideoData
	}

	// all schemas are nil
	return nil
}

type NullableHtmlMetadataOembed struct {
	value *HtmlMetadataOembed
	isSet bool
}

func (v NullableHtmlMetadataOembed) Get() *HtmlMetadataOembed {
	return v.value
}

func (v *NullableHtmlMetadataOembed) Set(val *HtmlMetadataOembed) {
	v.value = val
	v.isSet = true
}

func (v NullableHtmlMetadataOembed) IsSet() bool {
	return v.isSet
}

func (v *NullableHtmlMetadataOembed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHtmlMetadataOembed(val *HtmlMetadataOembed) *NullableHtmlMetadataOembed {
	return &NullableHtmlMetadataOembed{value: val, isSet: true}
}

func (v NullableHtmlMetadataOembed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHtmlMetadataOembed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FarcasterActionReqBodyAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarcasterActionReqBodyAction{}

// FarcasterActionReqBodyAction struct for FarcasterActionReqBodyAction
type FarcasterActionReqBodyAction struct {
	// The type of action being performed.
	Type string `json:"type"`
	// The payload of the action being performed.
	Payload map[string]interface{} `json:"payload,omitempty"`
}

type _FarcasterActionReqBodyAction FarcasterActionReqBodyAction

// NewFarcasterActionReqBodyAction instantiates a new FarcasterActionReqBodyAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarcasterActionReqBodyAction(type_ string) *FarcasterActionReqBodyAction {
	this := FarcasterActionReqBodyAction{}
	this.Type = type_
	return &this
}

// NewFarcasterActionReqBodyActionWithDefaults instantiates a new FarcasterActionReqBodyAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarcasterActionReqBodyActionWithDefaults() *FarcasterActionReqBodyAction {
	this := FarcasterActionReqBodyAction{}
	return &this
}

// GetType returns the Type field value
func (o *FarcasterActionReqBodyAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FarcasterActionReqBodyAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FarcasterActionReqBodyAction) SetType(v string) {
	o.Type = v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *FarcasterActionReqBodyAction) GetPayload() map[string]interface{} {
	if o == nil || IsNil(o.Payload) {
		var ret map[string]interface{}
		return ret
	}
	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarcasterActionReqBodyAction) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Payload) {
		return map[string]interface{}{}, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *FarcasterActionReqBodyAction) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given map[string]interface{} and assigns it to the Payload field.
func (o *FarcasterActionReqBodyAction) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

func (o FarcasterActionReqBodyAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarcasterActionReqBodyAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

func (o *FarcasterActionReqBodyAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFarcasterActionReqBodyAction := _FarcasterActionReqBodyAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarcasterActionReqBodyAction)

	if err != nil {
		return err
	}

	*o = FarcasterActionReqBodyAction(varFarcasterActionReqBodyAction)

	return err
}

type NullableFarcasterActionReqBodyAction struct {
	value *FarcasterActionReqBodyAction
	isSet bool
}

func (v NullableFarcasterActionReqBodyAction) Get() *FarcasterActionReqBodyAction {
	return v.value
}

func (v *NullableFarcasterActionReqBodyAction) Set(val *FarcasterActionReqBodyAction) {
	v.value = val
	v.isSet = true
}

func (v NullableFarcasterActionReqBodyAction) IsSet() bool {
	return v.isSet
}

func (v *NullableFarcasterActionReqBodyAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarcasterActionReqBodyAction(val *FarcasterActionReqBodyAction) *NullableFarcasterActionReqBodyAction {
	return &NullableFarcasterActionReqBodyAction{value: val, isSet: true}
}

func (v NullableFarcasterActionReqBodyAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarcasterActionReqBodyAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

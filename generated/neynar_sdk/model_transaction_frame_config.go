/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionFrameConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionFrameConfig{}

// TransactionFrameConfig struct for TransactionFrameConfig
type TransactionFrameConfig struct {
	// Optional list of FIDs that are allowed to use this transaction mini app
	AllowlistFids []int32 `json:"allowlist_fids,omitempty"`
	// List of items included in the transaction
	LineItems []TransactionFrameLineItem `json:"line_items"`
	Action    *TransactionFrameAction    `json:"action,omitempty"`
}

type _TransactionFrameConfig TransactionFrameConfig

// NewTransactionFrameConfig instantiates a new TransactionFrameConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionFrameConfig(lineItems []TransactionFrameLineItem) *TransactionFrameConfig {
	this := TransactionFrameConfig{}
	this.LineItems = lineItems
	return &this
}

// NewTransactionFrameConfigWithDefaults instantiates a new TransactionFrameConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionFrameConfigWithDefaults() *TransactionFrameConfig {
	this := TransactionFrameConfig{}
	return &this
}

// GetAllowlistFids returns the AllowlistFids field value if set, zero value otherwise.
func (o *TransactionFrameConfig) GetAllowlistFids() []int32 {
	if o == nil || IsNil(o.AllowlistFids) {
		var ret []int32
		return ret
	}
	return o.AllowlistFids
}

// GetAllowlistFidsOk returns a tuple with the AllowlistFids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFrameConfig) GetAllowlistFidsOk() ([]int32, bool) {
	if o == nil || IsNil(o.AllowlistFids) {
		return nil, false
	}
	return o.AllowlistFids, true
}

// HasAllowlistFids returns a boolean if a field has been set.
func (o *TransactionFrameConfig) HasAllowlistFids() bool {
	if o != nil && !IsNil(o.AllowlistFids) {
		return true
	}

	return false
}

// SetAllowlistFids gets a reference to the given []int32 and assigns it to the AllowlistFids field.
func (o *TransactionFrameConfig) SetAllowlistFids(v []int32) {
	o.AllowlistFids = v
}

// GetLineItems returns the LineItems field value
func (o *TransactionFrameConfig) GetLineItems() []TransactionFrameLineItem {
	if o == nil {
		var ret []TransactionFrameLineItem
		return ret
	}

	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value
// and a boolean to check if the value has been set.
func (o *TransactionFrameConfig) GetLineItemsOk() ([]TransactionFrameLineItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.LineItems, true
}

// SetLineItems sets field value
func (o *TransactionFrameConfig) SetLineItems(v []TransactionFrameLineItem) {
	o.LineItems = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *TransactionFrameConfig) GetAction() TransactionFrameAction {
	if o == nil || IsNil(o.Action) {
		var ret TransactionFrameAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFrameConfig) GetActionOk() (*TransactionFrameAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *TransactionFrameConfig) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given TransactionFrameAction and assigns it to the Action field.
func (o *TransactionFrameConfig) SetAction(v TransactionFrameAction) {
	o.Action = &v
}

func (o TransactionFrameConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionFrameConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowlistFids) {
		toSerialize["allowlist_fids"] = o.AllowlistFids
	}
	toSerialize["line_items"] = o.LineItems
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

func (o *TransactionFrameConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"line_items",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTransactionFrameConfig := _TransactionFrameConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionFrameConfig)

	if err != nil {
		return err
	}

	*o = TransactionFrameConfig(varTransactionFrameConfig)

	return err
}

type NullableTransactionFrameConfig struct {
	value *TransactionFrameConfig
	isSet bool
}

func (v NullableTransactionFrameConfig) Get() *TransactionFrameConfig {
	return v.value
}

func (v *NullableTransactionFrameConfig) Set(val *TransactionFrameConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFrameConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFrameConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFrameConfig(val *TransactionFrameConfig) *NullableTransactionFrameConfig {
	return &NullableTransactionFrameConfig{value: val, isSet: true}
}

func (v NullableTransactionFrameConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFrameConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

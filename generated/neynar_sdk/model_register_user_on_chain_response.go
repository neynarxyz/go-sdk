/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.39.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
)

// checks if the RegisterUserOnChainResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterUserOnChainResponse{}

// RegisterUserOnChainResponse struct for RegisterUserOnChainResponse
type RegisterUserOnChainResponse struct {
	Message         *string `json:"message,omitempty"`
	TransactionHash *string `json:"transaction_hash,omitempty"`
	User            *User   `json:"user,omitempty"`
}

// NewRegisterUserOnChainResponse instantiates a new RegisterUserOnChainResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterUserOnChainResponse() *RegisterUserOnChainResponse {
	this := RegisterUserOnChainResponse{}
	return &this
}

// NewRegisterUserOnChainResponseWithDefaults instantiates a new RegisterUserOnChainResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterUserOnChainResponseWithDefaults() *RegisterUserOnChainResponse {
	this := RegisterUserOnChainResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RegisterUserOnChainResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserOnChainResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RegisterUserOnChainResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *RegisterUserOnChainResponse) SetMessage(v string) {
	o.Message = &v
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise.
func (o *RegisterUserOnChainResponse) GetTransactionHash() string {
	if o == nil || IsNil(o.TransactionHash) {
		var ret string
		return ret
	}
	return *o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserOnChainResponse) GetTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionHash) {
		return nil, false
	}
	return o.TransactionHash, true
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *RegisterUserOnChainResponse) HasTransactionHash() bool {
	if o != nil && !IsNil(o.TransactionHash) {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given string and assigns it to the TransactionHash field.
func (o *RegisterUserOnChainResponse) SetTransactionHash(v string) {
	o.TransactionHash = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RegisterUserOnChainResponse) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserOnChainResponse) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RegisterUserOnChainResponse) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *RegisterUserOnChainResponse) SetUser(v User) {
	o.User = &v
}

func (o RegisterUserOnChainResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterUserOnChainResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.TransactionHash) {
		toSerialize["transaction_hash"] = o.TransactionHash
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableRegisterUserOnChainResponse struct {
	value *RegisterUserOnChainResponse
	isSet bool
}

func (v NullableRegisterUserOnChainResponse) Get() *RegisterUserOnChainResponse {
	return v.value
}

func (v *NullableRegisterUserOnChainResponse) Set(val *RegisterUserOnChainResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterUserOnChainResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterUserOnChainResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterUserOnChainResponse(val *RegisterUserOnChainResponse) *NullableRegisterUserOnChainResponse {
	return &NullableRegisterUserOnChainResponse{value: val, isSet: true}
}

func (v NullableRegisterUserOnChainResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterUserOnChainResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.41.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// Networks A blockchain network e.g. \"base\"
type Networks string

// List of Networks
const (
	NETWORKS_BASE Networks = "base"
)

// All allowed values of Networks enum
var AllowedNetworksEnumValues = []Networks{
	"base",
}

func (v *Networks) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Networks(value)
	for _, existing := range AllowedNetworksEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Networks", value)
}

// NewNetworksFromValue returns a pointer to a valid Networks
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworksFromValue(v string) (*Networks, error) {
	ev := Networks(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Networks: valid values are %v", v, AllowedNetworksEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Networks) IsValid() bool {
	for _, existing := range AllowedNetworksEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Networks value
func (v Networks) Ptr() *Networks {
	return &v
}

type NullableNetworks struct {
	value *Networks
	isSet bool
}

func (v NullableNetworks) Get() *Networks {
	return v.value
}

func (v *NullableNetworks) Set(val *Networks) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworks) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworks(val *Networks) *NullableNetworks {
	return &NullableNetworks{value: val, isSet: true}
}

func (v NullableNetworks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.39.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// ValidateFrameAggregateWindow the model 'ValidateFrameAggregateWindow'
type ValidateFrameAggregateWindow string

// List of ValidateFrameAggregateWindow
const (
	VALIDATEFRAMEAGGREGATEWINDOW__10S ValidateFrameAggregateWindow = "10s"
	VALIDATEFRAMEAGGREGATEWINDOW__1M  ValidateFrameAggregateWindow = "1m"
	VALIDATEFRAMEAGGREGATEWINDOW__2M  ValidateFrameAggregateWindow = "2m"
	VALIDATEFRAMEAGGREGATEWINDOW__5M  ValidateFrameAggregateWindow = "5m"
	VALIDATEFRAMEAGGREGATEWINDOW__10M ValidateFrameAggregateWindow = "10m"
	VALIDATEFRAMEAGGREGATEWINDOW__20M ValidateFrameAggregateWindow = "20m"
	VALIDATEFRAMEAGGREGATEWINDOW__30M ValidateFrameAggregateWindow = "30m"
	VALIDATEFRAMEAGGREGATEWINDOW__2H  ValidateFrameAggregateWindow = "2h"
	VALIDATEFRAMEAGGREGATEWINDOW__12H ValidateFrameAggregateWindow = "12h"
	VALIDATEFRAMEAGGREGATEWINDOW__1D  ValidateFrameAggregateWindow = "1d"
	VALIDATEFRAMEAGGREGATEWINDOW__7D  ValidateFrameAggregateWindow = "7d"
)

// All allowed values of ValidateFrameAggregateWindow enum
var AllowedValidateFrameAggregateWindowEnumValues = []ValidateFrameAggregateWindow{
	"10s",
	"1m",
	"2m",
	"5m",
	"10m",
	"20m",
	"30m",
	"2h",
	"12h",
	"1d",
	"7d",
}

func (v *ValidateFrameAggregateWindow) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValidateFrameAggregateWindow(value)
	for _, existing := range AllowedValidateFrameAggregateWindowEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValidateFrameAggregateWindow", value)
}

// NewValidateFrameAggregateWindowFromValue returns a pointer to a valid ValidateFrameAggregateWindow
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValidateFrameAggregateWindowFromValue(v string) (*ValidateFrameAggregateWindow, error) {
	ev := ValidateFrameAggregateWindow(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValidateFrameAggregateWindow: valid values are %v", v, AllowedValidateFrameAggregateWindowEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValidateFrameAggregateWindow) IsValid() bool {
	for _, existing := range AllowedValidateFrameAggregateWindowEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValidateFrameAggregateWindow value
func (v ValidateFrameAggregateWindow) Ptr() *ValidateFrameAggregateWindow {
	return &v
}

type NullableValidateFrameAggregateWindow struct {
	value *ValidateFrameAggregateWindow
	isSet bool
}

func (v NullableValidateFrameAggregateWindow) Get() *ValidateFrameAggregateWindow {
	return v.value
}

func (v *NullableValidateFrameAggregateWindow) Set(val *ValidateFrameAggregateWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateFrameAggregateWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateFrameAggregateWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateFrameAggregateWindow(val *ValidateFrameAggregateWindow) *NullableValidateFrameAggregateWindow {
	return &NullableValidateFrameAggregateWindow{value: val, isSet: true}
}

func (v NullableValidateFrameAggregateWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateFrameAggregateWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

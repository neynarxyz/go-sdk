/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type FollowsAPI interface {

	/*
		FetchFollowSuggestions Suggest Follows

		Fetch a list of suggested users to follow. Used to help users discover new users to follow

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchFollowSuggestionsRequest
	*/
	FetchFollowSuggestions(ctx context.Context) ApiFetchFollowSuggestionsRequest

	// FetchFollowSuggestionsExecute executes the request
	//  @return UsersResponse
	FetchFollowSuggestionsExecute(r ApiFetchFollowSuggestionsRequest) (*UsersResponse, *http.Response, error)

	/*
		FetchRelevantFollowers Relevant followers

		Returns a list of relevant followers for a specific FID. This usually shows on a profile as "X, Y and Z follow this user".

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchRelevantFollowersRequest
	*/
	FetchRelevantFollowers(ctx context.Context) ApiFetchRelevantFollowersRequest

	// FetchRelevantFollowersExecute executes the request
	//  @return RelevantFollowersResponse
	FetchRelevantFollowersExecute(r ApiFetchRelevantFollowersRequest) (*RelevantFollowersResponse, *http.Response, error)

	/*
		FetchUserFollowers Followers

		Returns a list of followers for a specific FID.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchUserFollowersRequest
	*/
	FetchUserFollowers(ctx context.Context) ApiFetchUserFollowersRequest

	// FetchUserFollowersExecute executes the request
	//  @return FollowersResponse
	FetchUserFollowersExecute(r ApiFetchUserFollowersRequest) (*FollowersResponse, *http.Response, error)

	/*
		FetchUserFollowing Following

		Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchUserFollowingRequest
	*/
	FetchUserFollowing(ctx context.Context) ApiFetchUserFollowingRequest

	// FetchUserFollowingExecute executes the request
	//  @return FollowersResponse
	FetchUserFollowingExecute(r ApiFetchUserFollowingRequest) (*FollowersResponse, *http.Response, error)
}

// FollowsAPIService FollowsAPI service
type FollowsAPIService service

type ApiFetchFollowSuggestionsRequest struct {
	ctx                 context.Context
	ApiService          FollowsAPI
	fid                 *int32
	viewerFid           *int32
	limit               *int32
	xNeynarExperimental *bool
}

// FID of the user whose following you want to fetch.
func (r ApiFetchFollowSuggestionsRequest) Fid(fid int32) ApiFetchFollowSuggestionsRequest {
	r.fid = &fid
	return r
}

// Providing this will return a list of users that respects this user&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
func (r ApiFetchFollowSuggestionsRequest) ViewerFid(viewerFid int32) ApiFetchFollowSuggestionsRequest {
	r.viewerFid = &viewerFid
	return r
}

// Number of results to fetch
func (r ApiFetchFollowSuggestionsRequest) Limit(limit int32) ApiFetchFollowSuggestionsRequest {
	r.limit = &limit
	return r
}

// Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
func (r ApiFetchFollowSuggestionsRequest) XNeynarExperimental(xNeynarExperimental bool) ApiFetchFollowSuggestionsRequest {
	r.xNeynarExperimental = &xNeynarExperimental
	return r
}

func (r ApiFetchFollowSuggestionsRequest) Execute() (*UsersResponse, *http.Response, error) {
	return r.ApiService.FetchFollowSuggestionsExecute(r)
}

/*
FetchFollowSuggestions Suggest Follows

Fetch a list of suggested users to follow. Used to help users discover new users to follow

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchFollowSuggestionsRequest
*/
func (a *FollowsAPIService) FetchFollowSuggestions(ctx context.Context) ApiFetchFollowSuggestionsRequest {
	return ApiFetchFollowSuggestionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return UsersResponse
func (a *FollowsAPIService) FetchFollowSuggestionsExecute(r ApiFetchFollowSuggestionsRequest) (*UsersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UsersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FollowsAPIService.FetchFollowSuggestions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/following/suggested"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	if r.viewerFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "viewer_fid", r.viewerFid, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 25
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeynarExperimental != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-neynar-experimental", r.xNeynarExperimental, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchRelevantFollowersRequest struct {
	ctx                 context.Context
	ApiService          FollowsAPI
	targetFid           *int32
	viewerFid           *int32
	xNeynarExperimental *bool
}

// User who&#39;s profile you are looking at
func (r ApiFetchRelevantFollowersRequest) TargetFid(targetFid int32) ApiFetchRelevantFollowersRequest {
	r.targetFid = &targetFid
	return r
}

// The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
func (r ApiFetchRelevantFollowersRequest) ViewerFid(viewerFid int32) ApiFetchRelevantFollowersRequest {
	r.viewerFid = &viewerFid
	return r
}

// Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
func (r ApiFetchRelevantFollowersRequest) XNeynarExperimental(xNeynarExperimental bool) ApiFetchRelevantFollowersRequest {
	r.xNeynarExperimental = &xNeynarExperimental
	return r
}

func (r ApiFetchRelevantFollowersRequest) Execute() (*RelevantFollowersResponse, *http.Response, error) {
	return r.ApiService.FetchRelevantFollowersExecute(r)
}

/*
FetchRelevantFollowers Relevant followers

Returns a list of relevant followers for a specific FID. This usually shows on a profile as "X, Y and Z follow this user".

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchRelevantFollowersRequest
*/
func (a *FollowsAPIService) FetchRelevantFollowers(ctx context.Context) ApiFetchRelevantFollowersRequest {
	return ApiFetchRelevantFollowersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RelevantFollowersResponse
func (a *FollowsAPIService) FetchRelevantFollowersExecute(r ApiFetchRelevantFollowersRequest) (*RelevantFollowersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RelevantFollowersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FollowsAPIService.FetchRelevantFollowers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/followers/relevant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.targetFid == nil {
		return localVarReturnValue, nil, reportError("targetFid is required and must be specified")
	}
	if r.viewerFid == nil {
		return localVarReturnValue, nil, reportError("viewerFid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "target_fid", r.targetFid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "viewer_fid", r.viewerFid, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeynarExperimental != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-neynar-experimental", r.xNeynarExperimental, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchUserFollowersRequest struct {
	ctx                 context.Context
	ApiService          FollowsAPI
	fid                 *int32
	viewerFid           *int32
	sortType            *FollowSortType
	limit               *int32
	cursor              *string
	xNeynarExperimental *bool
}

// User who&#39;s profile you are looking at
func (r ApiFetchUserFollowersRequest) Fid(fid int32) ApiFetchUserFollowersRequest {
	r.fid = &fid
	return r
}

// Providing this will return a list of followers that respects this user&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
func (r ApiFetchUserFollowersRequest) ViewerFid(viewerFid int32) ApiFetchUserFollowersRequest {
	r.viewerFid = &viewerFid
	return r
}

// Sort type for fetch followers. Default is &#x60;desc_chron&#x60;
func (r ApiFetchUserFollowersRequest) SortType(sortType FollowSortType) ApiFetchUserFollowersRequest {
	r.sortType = &sortType
	return r
}

// Number of results to fetch
func (r ApiFetchUserFollowersRequest) Limit(limit int32) ApiFetchUserFollowersRequest {
	r.limit = &limit
	return r
}

// Pagination cursor.
func (r ApiFetchUserFollowersRequest) Cursor(cursor string) ApiFetchUserFollowersRequest {
	r.cursor = &cursor
	return r
}

// Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
func (r ApiFetchUserFollowersRequest) XNeynarExperimental(xNeynarExperimental bool) ApiFetchUserFollowersRequest {
	r.xNeynarExperimental = &xNeynarExperimental
	return r
}

func (r ApiFetchUserFollowersRequest) Execute() (*FollowersResponse, *http.Response, error) {
	return r.ApiService.FetchUserFollowersExecute(r)
}

/*
FetchUserFollowers Followers

Returns a list of followers for a specific FID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchUserFollowersRequest
*/
func (a *FollowsAPIService) FetchUserFollowers(ctx context.Context) ApiFetchUserFollowersRequest {
	return ApiFetchUserFollowersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FollowersResponse
func (a *FollowsAPIService) FetchUserFollowersExecute(r ApiFetchUserFollowersRequest) (*FollowersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FollowersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FollowsAPIService.FetchUserFollowers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/followers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	if r.viewerFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "viewer_fid", r.viewerFid, "form", "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_type", r.sortType, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeynarExperimental != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-neynar-experimental", r.xNeynarExperimental, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchUserFollowingRequest struct {
	ctx                 context.Context
	ApiService          FollowsAPI
	fid                 *int32
	viewerFid           *int32
	sortType            *FollowSortType
	limit               *int32
	cursor              *string
	xNeynarExperimental *bool
}

// FID of the user whose following you want to fetch.
func (r ApiFetchUserFollowingRequest) Fid(fid int32) ApiFetchUserFollowingRequest {
	r.fid = &fid
	return r
}

// Providing this will return a list of users that respects this user&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
func (r ApiFetchUserFollowingRequest) ViewerFid(viewerFid int32) ApiFetchUserFollowingRequest {
	r.viewerFid = &viewerFid
	return r
}

// Optional parameter to sort the users based on different criteria.
func (r ApiFetchUserFollowingRequest) SortType(sortType FollowSortType) ApiFetchUserFollowingRequest {
	r.sortType = &sortType
	return r
}

// Number of results to fetch
func (r ApiFetchUserFollowingRequest) Limit(limit int32) ApiFetchUserFollowingRequest {
	r.limit = &limit
	return r
}

// Pagination cursor.
func (r ApiFetchUserFollowingRequest) Cursor(cursor string) ApiFetchUserFollowingRequest {
	r.cursor = &cursor
	return r
}

// Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
func (r ApiFetchUserFollowingRequest) XNeynarExperimental(xNeynarExperimental bool) ApiFetchUserFollowingRequest {
	r.xNeynarExperimental = &xNeynarExperimental
	return r
}

func (r ApiFetchUserFollowingRequest) Execute() (*FollowersResponse, *http.Response, error) {
	return r.ApiService.FetchUserFollowingExecute(r)
}

/*
FetchUserFollowing Following

Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchUserFollowingRequest
*/
func (a *FollowsAPIService) FetchUserFollowing(ctx context.Context) ApiFetchUserFollowingRequest {
	return ApiFetchUserFollowingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FollowersResponse
func (a *FollowsAPIService) FetchUserFollowingExecute(r ApiFetchUserFollowingRequest) (*FollowersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FollowersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FollowsAPIService.FetchUserFollowing")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/following"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	if r.viewerFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "viewer_fid", r.viewerFid, "form", "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_type", r.sortType, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 25
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeynarExperimental != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-neynar-experimental", r.xNeynarExperimental, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SubscribedToPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscribedToPrice{}

// SubscribedToPrice struct for SubscribedToPrice
type SubscribedToPrice struct {
	PeriodDurationSeconds int32  `json:"period_duration_seconds"`
	TokensPerPeriod       string `json:"tokens_per_period"`
	InitialMintPrice      string `json:"initial_mint_price"`
}

type _SubscribedToPrice SubscribedToPrice

// NewSubscribedToPrice instantiates a new SubscribedToPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribedToPrice(periodDurationSeconds int32, tokensPerPeriod string, initialMintPrice string) *SubscribedToPrice {
	this := SubscribedToPrice{}
	this.PeriodDurationSeconds = periodDurationSeconds
	this.TokensPerPeriod = tokensPerPeriod
	this.InitialMintPrice = initialMintPrice
	return &this
}

// NewSubscribedToPriceWithDefaults instantiates a new SubscribedToPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribedToPriceWithDefaults() *SubscribedToPrice {
	this := SubscribedToPrice{}
	return &this
}

// GetPeriodDurationSeconds returns the PeriodDurationSeconds field value
func (o *SubscribedToPrice) GetPeriodDurationSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PeriodDurationSeconds
}

// GetPeriodDurationSecondsOk returns a tuple with the PeriodDurationSeconds field value
// and a boolean to check if the value has been set.
func (o *SubscribedToPrice) GetPeriodDurationSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeriodDurationSeconds, true
}

// SetPeriodDurationSeconds sets field value
func (o *SubscribedToPrice) SetPeriodDurationSeconds(v int32) {
	o.PeriodDurationSeconds = v
}

// GetTokensPerPeriod returns the TokensPerPeriod field value
func (o *SubscribedToPrice) GetTokensPerPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokensPerPeriod
}

// GetTokensPerPeriodOk returns a tuple with the TokensPerPeriod field value
// and a boolean to check if the value has been set.
func (o *SubscribedToPrice) GetTokensPerPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokensPerPeriod, true
}

// SetTokensPerPeriod sets field value
func (o *SubscribedToPrice) SetTokensPerPeriod(v string) {
	o.TokensPerPeriod = v
}

// GetInitialMintPrice returns the InitialMintPrice field value
func (o *SubscribedToPrice) GetInitialMintPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitialMintPrice
}

// GetInitialMintPriceOk returns a tuple with the InitialMintPrice field value
// and a boolean to check if the value has been set.
func (o *SubscribedToPrice) GetInitialMintPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitialMintPrice, true
}

// SetInitialMintPrice sets field value
func (o *SubscribedToPrice) SetInitialMintPrice(v string) {
	o.InitialMintPrice = v
}

func (o SubscribedToPrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscribedToPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["period_duration_seconds"] = o.PeriodDurationSeconds
	toSerialize["tokens_per_period"] = o.TokensPerPeriod
	toSerialize["initial_mint_price"] = o.InitialMintPrice
	return toSerialize, nil
}

func (o *SubscribedToPrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"period_duration_seconds",
		"tokens_per_period",
		"initial_mint_price",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varSubscribedToPrice := _SubscribedToPrice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscribedToPrice)

	if err != nil {
		return err
	}

	*o = SubscribedToPrice(varSubscribedToPrice)

	return err
}

type NullableSubscribedToPrice struct {
	value *SubscribedToPrice
	isSet bool
}

func (v NullableSubscribedToPrice) Get() *SubscribedToPrice {
	return v.value
}

func (v *NullableSubscribedToPrice) Set(val *SubscribedToPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribedToPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribedToPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribedToPrice(val *SubscribedToPrice) *NullableSubscribedToPrice {
	return &NullableSubscribedToPrice{value: val, isSet: true}
}

func (v NullableSubscribedToPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribedToPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

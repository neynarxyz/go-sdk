/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.4
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// ChannelMemberRole The role of a channel member
type ChannelMemberRole string

// List of ChannelMemberRole
const (
	CHANNELMEMBERROLE_MEMBER    ChannelMemberRole = "member"
	CHANNELMEMBERROLE_MODERATOR ChannelMemberRole = "moderator"
)

// All allowed values of ChannelMemberRole enum
var AllowedChannelMemberRoleEnumValues = []ChannelMemberRole{
	"member",
	"moderator",
}

func (v *ChannelMemberRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChannelMemberRole(value)
	for _, existing := range AllowedChannelMemberRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChannelMemberRole", value)
}

// NewChannelMemberRoleFromValue returns a pointer to a valid ChannelMemberRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChannelMemberRoleFromValue(v string) (*ChannelMemberRole, error) {
	ev := ChannelMemberRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChannelMemberRole: valid values are %v", v, AllowedChannelMemberRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChannelMemberRole) IsValid() bool {
	for _, existing := range AllowedChannelMemberRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChannelMemberRole value
func (v ChannelMemberRole) Ptr() *ChannelMemberRole {
	return &v
}

type NullableChannelMemberRole struct {
	value *ChannelMemberRole
	isSet bool
}

func (v NullableChannelMemberRole) Get() *ChannelMemberRole {
	return v.value
}

func (v *NullableChannelMemberRole) Set(val *ChannelMemberRole) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelMemberRole) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelMemberRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelMemberRole(val *ChannelMemberRole) *NullableChannelMemberRole {
	return &NullableChannelMemberRole{value: val, isSet: true}
}

func (v NullableChannelMemberRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelMemberRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SendFrameNotificationsReqBodyFiltersNearLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendFrameNotificationsReqBodyFiltersNearLocation{}

// SendFrameNotificationsReqBodyFiltersNearLocation Only send notifications to users near a given location.
type SendFrameNotificationsReqBodyFiltersNearLocation struct {
	Latitude  float64          `json:"latitude"`
	Longitude float64          `json:"longitude"`
	Address   *LocationAddress `json:"address,omitempty"`
	// The radius in meters for the location search. Any location within this radius will be returned.
	Radius *float32 `json:"radius,omitempty"`
}

type _SendFrameNotificationsReqBodyFiltersNearLocation SendFrameNotificationsReqBodyFiltersNearLocation

// NewSendFrameNotificationsReqBodyFiltersNearLocation instantiates a new SendFrameNotificationsReqBodyFiltersNearLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendFrameNotificationsReqBodyFiltersNearLocation(latitude float64, longitude float64) *SendFrameNotificationsReqBodyFiltersNearLocation {
	this := SendFrameNotificationsReqBodyFiltersNearLocation{}
	this.Latitude = latitude
	this.Longitude = longitude
	return &this
}

// NewSendFrameNotificationsReqBodyFiltersNearLocationWithDefaults instantiates a new SendFrameNotificationsReqBodyFiltersNearLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendFrameNotificationsReqBodyFiltersNearLocationWithDefaults() *SendFrameNotificationsReqBodyFiltersNearLocation {
	this := SendFrameNotificationsReqBodyFiltersNearLocation{}
	return &this
}

// GetLatitude returns the Latitude field value
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) GetLatitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) SetLatitude(v float64) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) GetLongitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) SetLongitude(v float64) {
	o.Longitude = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) GetAddress() LocationAddress {
	if o == nil || IsNil(o.Address) {
		var ret LocationAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) GetAddressOk() (*LocationAddress, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given LocationAddress and assigns it to the Address field.
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) SetAddress(v LocationAddress) {
	o.Address = &v
}

// GetRadius returns the Radius field value if set, zero value otherwise.
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) GetRadius() float32 {
	if o == nil || IsNil(o.Radius) {
		var ret float32
		return ret
	}
	return *o.Radius
}

// GetRadiusOk returns a tuple with the Radius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) GetRadiusOk() (*float32, bool) {
	if o == nil || IsNil(o.Radius) {
		return nil, false
	}
	return o.Radius, true
}

// HasRadius returns a boolean if a field has been set.
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) HasRadius() bool {
	if o != nil && !IsNil(o.Radius) {
		return true
	}

	return false
}

// SetRadius gets a reference to the given float32 and assigns it to the Radius field.
func (o *SendFrameNotificationsReqBodyFiltersNearLocation) SetRadius(v float32) {
	o.Radius = &v
}

func (o SendFrameNotificationsReqBodyFiltersNearLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendFrameNotificationsReqBodyFiltersNearLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Radius) {
		toSerialize["radius"] = o.Radius
	}
	return toSerialize, nil
}

func (o *SendFrameNotificationsReqBodyFiltersNearLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latitude",
		"longitude",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varSendFrameNotificationsReqBodyFiltersNearLocation := _SendFrameNotificationsReqBodyFiltersNearLocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendFrameNotificationsReqBodyFiltersNearLocation)

	if err != nil {
		return err
	}

	*o = SendFrameNotificationsReqBodyFiltersNearLocation(varSendFrameNotificationsReqBodyFiltersNearLocation)

	return err
}

type NullableSendFrameNotificationsReqBodyFiltersNearLocation struct {
	value *SendFrameNotificationsReqBodyFiltersNearLocation
	isSet bool
}

func (v NullableSendFrameNotificationsReqBodyFiltersNearLocation) Get() *SendFrameNotificationsReqBodyFiltersNearLocation {
	return v.value
}

func (v *NullableSendFrameNotificationsReqBodyFiltersNearLocation) Set(val *SendFrameNotificationsReqBodyFiltersNearLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableSendFrameNotificationsReqBodyFiltersNearLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableSendFrameNotificationsReqBodyFiltersNearLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendFrameNotificationsReqBodyFiltersNearLocation(val *SendFrameNotificationsReqBodyFiltersNearLocation) *NullableSendFrameNotificationsReqBodyFiltersNearLocation {
	return &NullableSendFrameNotificationsReqBodyFiltersNearLocation{value: val, isSet: true}
}

func (v NullableSendFrameNotificationsReqBodyFiltersNearLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendFrameNotificationsReqBodyFiltersNearLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

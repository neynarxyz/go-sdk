/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TransactionFrame - struct for TransactionFrame
type TransactionFrame struct {
	TransactionFramePay *TransactionFramePay
}

// TransactionFramePayAsTransactionFrame is a convenience function that returns TransactionFramePay wrapped in TransactionFrame
func TransactionFramePayAsTransactionFrame(v *TransactionFramePay) TransactionFrame {
	return TransactionFrame{
		TransactionFramePay: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransactionFrame) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TransactionFramePay
	err = newStrictDecoder(data).Decode(&dst.TransactionFramePay)
	if err == nil {
		jsonTransactionFramePay, _ := json.Marshal(dst.TransactionFramePay)
		if string(jsonTransactionFramePay) == "{}" { // empty struct
			dst.TransactionFramePay = nil
		} else {
			if err = validator.Validate(dst.TransactionFramePay); err != nil {
				dst.TransactionFramePay = nil
			} else {
				match++
			}
		}
	} else {
		dst.TransactionFramePay = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TransactionFramePay = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TransactionFrame)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TransactionFrame)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionFrame) MarshalJSON() ([]byte, error) {
	if src.TransactionFramePay != nil {
		return json.Marshal(&src.TransactionFramePay)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransactionFrame) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TransactionFramePay != nil {
		return obj.TransactionFramePay
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TransactionFrame) GetActualInstanceValue() interface{} {
	if obj.TransactionFramePay != nil {
		return *obj.TransactionFramePay
	}

	// all schemas are nil
	return nil
}

type NullableTransactionFrame struct {
	value *TransactionFrame
	isSet bool
}

func (v NullableTransactionFrame) Get() *TransactionFrame {
	return v.value
}

func (v *NullableTransactionFrame) Set(val *TransactionFrame) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFrame) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFrame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFrame(val *TransactionFrame) *NullableTransactionFrame {
	return &NullableTransactionFrame{value: val, isSet: true}
}

func (v NullableTransactionFrame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFrame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.38.2
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
)

// checks if the DeployFungibleResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeployFungibleResponse{}

// DeployFungibleResponse struct for DeployFungibleResponse
type DeployFungibleResponse struct {
	Contract *DeployFungibleResponseContract `json:"contract,omitempty"`
}

// NewDeployFungibleResponse instantiates a new DeployFungibleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployFungibleResponse() *DeployFungibleResponse {
	this := DeployFungibleResponse{}
	return &this
}

// NewDeployFungibleResponseWithDefaults instantiates a new DeployFungibleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployFungibleResponseWithDefaults() *DeployFungibleResponse {
	this := DeployFungibleResponse{}
	return &this
}

// GetContract returns the Contract field value if set, zero value otherwise.
func (o *DeployFungibleResponse) GetContract() DeployFungibleResponseContract {
	if o == nil || IsNil(o.Contract) {
		var ret DeployFungibleResponseContract
		return ret
	}
	return *o.Contract
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployFungibleResponse) GetContractOk() (*DeployFungibleResponseContract, bool) {
	if o == nil || IsNil(o.Contract) {
		return nil, false
	}
	return o.Contract, true
}

// HasContract returns a boolean if a field has been set.
func (o *DeployFungibleResponse) HasContract() bool {
	if o != nil && !IsNil(o.Contract) {
		return true
	}

	return false
}

// SetContract gets a reference to the given DeployFungibleResponseContract and assigns it to the Contract field.
func (o *DeployFungibleResponse) SetContract(v DeployFungibleResponseContract) {
	o.Contract = &v
}

func (o DeployFungibleResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeployFungibleResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contract) {
		toSerialize["contract"] = o.Contract
	}
	return toSerialize, nil
}

type NullableDeployFungibleResponse struct {
	value *DeployFungibleResponse
	isSet bool
}

func (v NullableDeployFungibleResponse) Get() *DeployFungibleResponse {
	return v.value
}

func (v *NullableDeployFungibleResponse) Set(val *DeployFungibleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployFungibleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployFungibleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployFungibleResponse(val *DeployFungibleResponse) *NullableDeployFungibleResponse {
	return &NullableDeployFungibleResponse{value: val, isSet: true}
}

func (v NullableDeployFungibleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployFungibleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SubscribedToMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscribedToMetadata{}

// SubscribedToMetadata struct for SubscribedToMetadata
type SubscribedToMetadata struct {
	Title  string `json:"title"`
	Symbol string `json:"symbol"`
	ArtUrl string `json:"art_url"`
}

type _SubscribedToMetadata SubscribedToMetadata

// NewSubscribedToMetadata instantiates a new SubscribedToMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribedToMetadata(title string, symbol string, artUrl string) *SubscribedToMetadata {
	this := SubscribedToMetadata{}
	this.Title = title
	this.Symbol = symbol
	this.ArtUrl = artUrl
	return &this
}

// NewSubscribedToMetadataWithDefaults instantiates a new SubscribedToMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribedToMetadataWithDefaults() *SubscribedToMetadata {
	this := SubscribedToMetadata{}
	return &this
}

// GetTitle returns the Title field value
func (o *SubscribedToMetadata) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SubscribedToMetadata) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SubscribedToMetadata) SetTitle(v string) {
	o.Title = v
}

// GetSymbol returns the Symbol field value
func (o *SubscribedToMetadata) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *SubscribedToMetadata) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *SubscribedToMetadata) SetSymbol(v string) {
	o.Symbol = v
}

// GetArtUrl returns the ArtUrl field value
func (o *SubscribedToMetadata) GetArtUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArtUrl
}

// GetArtUrlOk returns a tuple with the ArtUrl field value
// and a boolean to check if the value has been set.
func (o *SubscribedToMetadata) GetArtUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtUrl, true
}

// SetArtUrl sets field value
func (o *SubscribedToMetadata) SetArtUrl(v string) {
	o.ArtUrl = v
}

func (o SubscribedToMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscribedToMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["symbol"] = o.Symbol
	toSerialize["art_url"] = o.ArtUrl
	return toSerialize, nil
}

func (o *SubscribedToMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"symbol",
		"art_url",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varSubscribedToMetadata := _SubscribedToMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscribedToMetadata)

	if err != nil {
		return err
	}

	*o = SubscribedToMetadata(varSubscribedToMetadata)

	return err
}

type NullableSubscribedToMetadata struct {
	value *SubscribedToMetadata
	isSet bool
}

func (v NullableSubscribedToMetadata) Get() *SubscribedToMetadata {
	return v.value
}

func (v *NullableSubscribedToMetadata) Set(val *SubscribedToMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribedToMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribedToMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribedToMetadata(val *SubscribedToMetadata) *NullableSubscribedToMetadata {
	return &NullableSubscribedToMetadata{value: val, isSet: true}
}

func (v NullableSubscribedToMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribedToMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

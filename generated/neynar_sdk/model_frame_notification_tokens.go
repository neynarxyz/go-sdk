/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.41.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FrameNotificationTokens type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameNotificationTokens{}

// FrameNotificationTokens struct for FrameNotificationTokens
type FrameNotificationTokens struct {
	NotificationTokens []FrameNotificationTokensNotificationTokensInner `json:"notification_tokens"`
	Next               NextCursor                                       `json:"next"`
}

type _FrameNotificationTokens FrameNotificationTokens

// NewFrameNotificationTokens instantiates a new FrameNotificationTokens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameNotificationTokens(notificationTokens []FrameNotificationTokensNotificationTokensInner, next NextCursor) *FrameNotificationTokens {
	this := FrameNotificationTokens{}
	this.NotificationTokens = notificationTokens
	this.Next = next
	return &this
}

// NewFrameNotificationTokensWithDefaults instantiates a new FrameNotificationTokens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameNotificationTokensWithDefaults() *FrameNotificationTokens {
	this := FrameNotificationTokens{}
	return &this
}

// GetNotificationTokens returns the NotificationTokens field value
func (o *FrameNotificationTokens) GetNotificationTokens() []FrameNotificationTokensNotificationTokensInner {
	if o == nil {
		var ret []FrameNotificationTokensNotificationTokensInner
		return ret
	}

	return o.NotificationTokens
}

// GetNotificationTokensOk returns a tuple with the NotificationTokens field value
// and a boolean to check if the value has been set.
func (o *FrameNotificationTokens) GetNotificationTokensOk() ([]FrameNotificationTokensNotificationTokensInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationTokens, true
}

// SetNotificationTokens sets field value
func (o *FrameNotificationTokens) SetNotificationTokens(v []FrameNotificationTokensNotificationTokensInner) {
	o.NotificationTokens = v
}

// GetNext returns the Next field value
func (o *FrameNotificationTokens) GetNext() NextCursor {
	if o == nil {
		var ret NextCursor
		return ret
	}

	return o.Next
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
func (o *FrameNotificationTokens) GetNextOk() (*NextCursor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Next, true
}

// SetNext sets field value
func (o *FrameNotificationTokens) SetNext(v NextCursor) {
	o.Next = v
}

func (o FrameNotificationTokens) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameNotificationTokens) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notification_tokens"] = o.NotificationTokens
	toSerialize["next"] = o.Next
	return toSerialize, nil
}

func (o *FrameNotificationTokens) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notification_tokens",
		"next",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFrameNotificationTokens := _FrameNotificationTokens{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFrameNotificationTokens)

	if err != nil {
		return err
	}

	*o = FrameNotificationTokens(varFrameNotificationTokens)

	return err
}

type NullableFrameNotificationTokens struct {
	value *FrameNotificationTokens
	isSet bool
}

func (v NullableFrameNotificationTokens) Get() *FrameNotificationTokens {
	return v.value
}

func (v *NullableFrameNotificationTokens) Set(val *FrameNotificationTokens) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameNotificationTokens) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameNotificationTokens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameNotificationTokens(val *FrameNotificationTokens) *NullableFrameNotificationTokens {
	return &NullableFrameNotificationTokens{value: val, isSet: true}
}

func (v NullableFrameNotificationTokens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameNotificationTokens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

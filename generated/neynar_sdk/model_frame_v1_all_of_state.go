/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.3
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
)

// checks if the FrameV1AllOfState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameV1AllOfState{}

// FrameV1AllOfState struct for FrameV1AllOfState
type FrameV1AllOfState struct {
	// State for the mini app in a serialized format
	Serialized *string `json:"serialized,omitempty"`
}

// NewFrameV1AllOfState instantiates a new FrameV1AllOfState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameV1AllOfState() *FrameV1AllOfState {
	this := FrameV1AllOfState{}
	return &this
}

// NewFrameV1AllOfStateWithDefaults instantiates a new FrameV1AllOfState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameV1AllOfStateWithDefaults() *FrameV1AllOfState {
	this := FrameV1AllOfState{}
	return &this
}

// GetSerialized returns the Serialized field value if set, zero value otherwise.
func (o *FrameV1AllOfState) GetSerialized() string {
	if o == nil || IsNil(o.Serialized) {
		var ret string
		return ret
	}
	return *o.Serialized
}

// GetSerializedOk returns a tuple with the Serialized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV1AllOfState) GetSerializedOk() (*string, bool) {
	if o == nil || IsNil(o.Serialized) {
		return nil, false
	}
	return o.Serialized, true
}

// HasSerialized returns a boolean if a field has been set.
func (o *FrameV1AllOfState) HasSerialized() bool {
	if o != nil && !IsNil(o.Serialized) {
		return true
	}

	return false
}

// SetSerialized gets a reference to the given string and assigns it to the Serialized field.
func (o *FrameV1AllOfState) SetSerialized(v string) {
	o.Serialized = &v
}

func (o FrameV1AllOfState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameV1AllOfState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Serialized) {
		toSerialize["serialized"] = o.Serialized
	}
	return toSerialize, nil
}

type NullableFrameV1AllOfState struct {
	value *FrameV1AllOfState
	isSet bool
}

func (v NullableFrameV1AllOfState) Get() *FrameV1AllOfState {
	return v.value
}

func (v *NullableFrameV1AllOfState) Set(val *FrameV1AllOfState) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameV1AllOfState) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameV1AllOfState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameV1AllOfState(val *FrameV1AllOfState) *NullableFrameV1AllOfState {
	return &NullableFrameV1AllOfState{value: val, isSet: true}
}

func (v NullableFrameV1AllOfState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameV1AllOfState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.41.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BlockReqBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockReqBody{}

// BlockReqBody struct for BlockReqBody
type BlockReqBody struct {
	// UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
	SignerUuid string `json:"signer_uuid"`
	// The unique identifier of a farcaster user (unsigned integer)
	BlockedFid int32 `json:"blocked_fid"`
}

type _BlockReqBody BlockReqBody

// NewBlockReqBody instantiates a new BlockReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockReqBody(signerUuid string, blockedFid int32) *BlockReqBody {
	this := BlockReqBody{}
	this.SignerUuid = signerUuid
	this.BlockedFid = blockedFid
	return &this
}

// NewBlockReqBodyWithDefaults instantiates a new BlockReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockReqBodyWithDefaults() *BlockReqBody {
	this := BlockReqBody{}
	return &this
}

// GetSignerUuid returns the SignerUuid field value
func (o *BlockReqBody) GetSignerUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignerUuid
}

// GetSignerUuidOk returns a tuple with the SignerUuid field value
// and a boolean to check if the value has been set.
func (o *BlockReqBody) GetSignerUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignerUuid, true
}

// SetSignerUuid sets field value
func (o *BlockReqBody) SetSignerUuid(v string) {
	o.SignerUuid = v
}

// GetBlockedFid returns the BlockedFid field value
func (o *BlockReqBody) GetBlockedFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockedFid
}

// GetBlockedFidOk returns a tuple with the BlockedFid field value
// and a boolean to check if the value has been set.
func (o *BlockReqBody) GetBlockedFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockedFid, true
}

// SetBlockedFid sets field value
func (o *BlockReqBody) SetBlockedFid(v int32) {
	o.BlockedFid = v
}

func (o BlockReqBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockReqBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["signer_uuid"] = o.SignerUuid
	toSerialize["blocked_fid"] = o.BlockedFid
	return toSerialize, nil
}

func (o *BlockReqBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"signer_uuid",
		"blocked_fid",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varBlockReqBody := _BlockReqBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockReqBody)

	if err != nil {
		return err
	}

	*o = BlockReqBody(varBlockReqBody)

	return err
}

type NullableBlockReqBody struct {
	value *BlockReqBody
	isSet bool
}

func (v NullableBlockReqBody) Get() *BlockReqBody {
	return v.value
}

func (v *NullableBlockReqBody) Set(val *BlockReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockReqBody(val *BlockReqBody) *NullableBlockReqBody {
	return &NullableBlockReqBody{value: val, isSet: true}
}

func (v NullableBlockReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.3
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FetchFrameMetaTagsFromUrl200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchFrameMetaTagsFromUrl200Response{}

// FetchFrameMetaTagsFromUrl200Response The mini app object containing the meta tags
type FetchFrameMetaTagsFromUrl200Response struct {
	Frame Frame `json:"frame"`
}

type _FetchFrameMetaTagsFromUrl200Response FetchFrameMetaTagsFromUrl200Response

// NewFetchFrameMetaTagsFromUrl200Response instantiates a new FetchFrameMetaTagsFromUrl200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchFrameMetaTagsFromUrl200Response(frame Frame) *FetchFrameMetaTagsFromUrl200Response {
	this := FetchFrameMetaTagsFromUrl200Response{}
	this.Frame = frame
	return &this
}

// NewFetchFrameMetaTagsFromUrl200ResponseWithDefaults instantiates a new FetchFrameMetaTagsFromUrl200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchFrameMetaTagsFromUrl200ResponseWithDefaults() *FetchFrameMetaTagsFromUrl200Response {
	this := FetchFrameMetaTagsFromUrl200Response{}
	return &this
}

// GetFrame returns the Frame field value
func (o *FetchFrameMetaTagsFromUrl200Response) GetFrame() Frame {
	if o == nil {
		var ret Frame
		return ret
	}

	return o.Frame
}

// GetFrameOk returns a tuple with the Frame field value
// and a boolean to check if the value has been set.
func (o *FetchFrameMetaTagsFromUrl200Response) GetFrameOk() (*Frame, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frame, true
}

// SetFrame sets field value
func (o *FetchFrameMetaTagsFromUrl200Response) SetFrame(v Frame) {
	o.Frame = v
}

func (o FetchFrameMetaTagsFromUrl200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchFrameMetaTagsFromUrl200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["frame"] = o.Frame
	return toSerialize, nil
}

func (o *FetchFrameMetaTagsFromUrl200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"frame",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFetchFrameMetaTagsFromUrl200Response := _FetchFrameMetaTagsFromUrl200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFetchFrameMetaTagsFromUrl200Response)

	if err != nil {
		return err
	}

	*o = FetchFrameMetaTagsFromUrl200Response(varFetchFrameMetaTagsFromUrl200Response)

	return err
}

type NullableFetchFrameMetaTagsFromUrl200Response struct {
	value *FetchFrameMetaTagsFromUrl200Response
	isSet bool
}

func (v NullableFetchFrameMetaTagsFromUrl200Response) Get() *FetchFrameMetaTagsFromUrl200Response {
	return v.value
}

func (v *NullableFetchFrameMetaTagsFromUrl200Response) Set(val *FetchFrameMetaTagsFromUrl200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchFrameMetaTagsFromUrl200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchFrameMetaTagsFromUrl200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchFrameMetaTagsFromUrl200Response(val *FetchFrameMetaTagsFromUrl200Response) *NullableFetchFrameMetaTagsFromUrl200Response {
	return &NullableFetchFrameMetaTagsFromUrl200Response{value: val, isSet: true}
}

func (v NullableFetchFrameMetaTagsFromUrl200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchFrameMetaTagsFromUrl200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NotificationDelivery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationDelivery{}

// NotificationDelivery struct for NotificationDelivery
type NotificationDelivery struct {
	Object string `json:"object"`
	// The unique identifier of a farcaster user or app (unsigned integer)
	Fid    int32  `json:"fid"`
	Status string `json:"status"`
	// The unique identifier of a farcaster user or app (unsigned integer)
	AppFid *int32 `json:"app_fid,omitempty"`
}

type _NotificationDelivery NotificationDelivery

// NewNotificationDelivery instantiates a new NotificationDelivery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationDelivery(object string, fid int32, status string) *NotificationDelivery {
	this := NotificationDelivery{}
	this.Object = object
	this.Fid = fid
	this.Status = status
	return &this
}

// NewNotificationDeliveryWithDefaults instantiates a new NotificationDelivery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationDeliveryWithDefaults() *NotificationDelivery {
	this := NotificationDelivery{}
	return &this
}

// GetObject returns the Object field value
func (o *NotificationDelivery) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *NotificationDelivery) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *NotificationDelivery) SetObject(v string) {
	o.Object = v
}

// GetFid returns the Fid field value
func (o *NotificationDelivery) GetFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Fid
}

// GetFidOk returns a tuple with the Fid field value
// and a boolean to check if the value has been set.
func (o *NotificationDelivery) GetFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fid, true
}

// SetFid sets field value
func (o *NotificationDelivery) SetFid(v int32) {
	o.Fid = v
}

// GetStatus returns the Status field value
func (o *NotificationDelivery) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NotificationDelivery) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NotificationDelivery) SetStatus(v string) {
	o.Status = v
}

// GetAppFid returns the AppFid field value if set, zero value otherwise.
func (o *NotificationDelivery) GetAppFid() int32 {
	if o == nil || IsNil(o.AppFid) {
		var ret int32
		return ret
	}
	return *o.AppFid
}

// GetAppFidOk returns a tuple with the AppFid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDelivery) GetAppFidOk() (*int32, bool) {
	if o == nil || IsNil(o.AppFid) {
		return nil, false
	}
	return o.AppFid, true
}

// HasAppFid returns a boolean if a field has been set.
func (o *NotificationDelivery) HasAppFid() bool {
	if o != nil && !IsNil(o.AppFid) {
		return true
	}

	return false
}

// SetAppFid gets a reference to the given int32 and assigns it to the AppFid field.
func (o *NotificationDelivery) SetAppFid(v int32) {
	o.AppFid = &v
}

func (o NotificationDelivery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationDelivery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["fid"] = o.Fid
	toSerialize["status"] = o.Status
	if !IsNil(o.AppFid) {
		toSerialize["app_fid"] = o.AppFid
	}
	return toSerialize, nil
}

func (o *NotificationDelivery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"fid",
		"status",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varNotificationDelivery := _NotificationDelivery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationDelivery)

	if err != nil {
		return err
	}

	*o = NotificationDelivery(varNotificationDelivery)

	return err
}

type NullableNotificationDelivery struct {
	value *NotificationDelivery
	isSet bool
}

func (v NullableNotificationDelivery) Get() *NotificationDelivery {
	return v.value
}

func (v *NullableNotificationDelivery) Set(val *NotificationDelivery) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationDelivery) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationDelivery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationDelivery(val *NotificationDelivery) *NullableNotificationDelivery {
	return &NullableNotificationDelivery{value: val, isSet: true}
}

func (v NullableNotificationDelivery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationDelivery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

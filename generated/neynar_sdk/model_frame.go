/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.3
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Frame - struct for Frame
type Frame struct {
	FrameV1 *FrameV1
	FrameV2 *FrameV2
}

// FrameV1AsFrame is a convenience function that returns FrameV1 wrapped in Frame
func FrameV1AsFrame(v *FrameV1) Frame {
	return Frame{
		FrameV1: v,
	}
}

// FrameV2AsFrame is a convenience function that returns FrameV2 wrapped in Frame
func FrameV2AsFrame(v *FrameV2) Frame {
	return Frame{
		FrameV2: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Frame) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FrameV1
	err = newStrictDecoder(data).Decode(&dst.FrameV1)
	if err == nil {
		jsonFrameV1, _ := json.Marshal(dst.FrameV1)
		if string(jsonFrameV1) == "{}" { // empty struct
			dst.FrameV1 = nil
		} else {
			if err = validator.Validate(dst.FrameV1); err != nil {
				dst.FrameV1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.FrameV1 = nil
	}

	// try to unmarshal data into FrameV2
	err = newStrictDecoder(data).Decode(&dst.FrameV2)
	if err == nil {
		jsonFrameV2, _ := json.Marshal(dst.FrameV2)
		if string(jsonFrameV2) == "{}" { // empty struct
			dst.FrameV2 = nil
		} else {
			if err = validator.Validate(dst.FrameV2); err != nil {
				dst.FrameV2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.FrameV2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FrameV1 = nil
		dst.FrameV2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Frame)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Frame)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Frame) MarshalJSON() ([]byte, error) {
	if src.FrameV1 != nil {
		return json.Marshal(&src.FrameV1)
	}

	if src.FrameV2 != nil {
		return json.Marshal(&src.FrameV2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Frame) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FrameV1 != nil {
		return obj.FrameV1
	}

	if obj.FrameV2 != nil {
		return obj.FrameV2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Frame) GetActualInstanceValue() interface{} {
	if obj.FrameV1 != nil {
		return *obj.FrameV1
	}

	if obj.FrameV2 != nil {
		return *obj.FrameV2
	}

	// all schemas are nil
	return nil
}

type NullableFrame struct {
	value *Frame
	isSet bool
}

func (v NullableFrame) Get() *Frame {
	return v.value
}

func (v *NullableFrame) Set(val *Frame) {
	v.value = val
	v.isSet = true
}

func (v NullableFrame) IsSet() bool {
	return v.isSet
}

func (v *NullableFrame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrame(val *Frame) *NullableFrame {
	return &NullableFrame{value: val, isSet: true}
}

func (v NullableFrame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

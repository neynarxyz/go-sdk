/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AppHostPostEventBody - Request body for app host events. Can either provide a signed_message or a signer_uuid with event details.
type AppHostPostEventBody struct {
	AppHostPostEventBodyOneOf  *AppHostPostEventBodyOneOf
	AppHostPostEventBodyOneOf1 *AppHostPostEventBodyOneOf1
}

// AppHostPostEventBodyOneOfAsAppHostPostEventBody is a convenience function that returns AppHostPostEventBodyOneOf wrapped in AppHostPostEventBody
func AppHostPostEventBodyOneOfAsAppHostPostEventBody(v *AppHostPostEventBodyOneOf) AppHostPostEventBody {
	return AppHostPostEventBody{
		AppHostPostEventBodyOneOf: v,
	}
}

// AppHostPostEventBodyOneOf1AsAppHostPostEventBody is a convenience function that returns AppHostPostEventBodyOneOf1 wrapped in AppHostPostEventBody
func AppHostPostEventBodyOneOf1AsAppHostPostEventBody(v *AppHostPostEventBodyOneOf1) AppHostPostEventBody {
	return AppHostPostEventBody{
		AppHostPostEventBodyOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AppHostPostEventBody) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppHostPostEventBodyOneOf
	err = newStrictDecoder(data).Decode(&dst.AppHostPostEventBodyOneOf)
	if err == nil {
		jsonAppHostPostEventBodyOneOf, _ := json.Marshal(dst.AppHostPostEventBodyOneOf)
		if string(jsonAppHostPostEventBodyOneOf) == "{}" { // empty struct
			dst.AppHostPostEventBodyOneOf = nil
		} else {
			if err = validator.Validate(dst.AppHostPostEventBodyOneOf); err != nil {
				dst.AppHostPostEventBodyOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppHostPostEventBodyOneOf = nil
	}

	// try to unmarshal data into AppHostPostEventBodyOneOf1
	err = newStrictDecoder(data).Decode(&dst.AppHostPostEventBodyOneOf1)
	if err == nil {
		jsonAppHostPostEventBodyOneOf1, _ := json.Marshal(dst.AppHostPostEventBodyOneOf1)
		if string(jsonAppHostPostEventBodyOneOf1) == "{}" { // empty struct
			dst.AppHostPostEventBodyOneOf1 = nil
		} else {
			if err = validator.Validate(dst.AppHostPostEventBodyOneOf1); err != nil {
				dst.AppHostPostEventBodyOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppHostPostEventBodyOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AppHostPostEventBodyOneOf = nil
		dst.AppHostPostEventBodyOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AppHostPostEventBody)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AppHostPostEventBody)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AppHostPostEventBody) MarshalJSON() ([]byte, error) {
	if src.AppHostPostEventBodyOneOf != nil {
		return json.Marshal(&src.AppHostPostEventBodyOneOf)
	}

	if src.AppHostPostEventBodyOneOf1 != nil {
		return json.Marshal(&src.AppHostPostEventBodyOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AppHostPostEventBody) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AppHostPostEventBodyOneOf != nil {
		return obj.AppHostPostEventBodyOneOf
	}

	if obj.AppHostPostEventBodyOneOf1 != nil {
		return obj.AppHostPostEventBodyOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AppHostPostEventBody) GetActualInstanceValue() interface{} {
	if obj.AppHostPostEventBodyOneOf != nil {
		return *obj.AppHostPostEventBodyOneOf
	}

	if obj.AppHostPostEventBodyOneOf1 != nil {
		return *obj.AppHostPostEventBodyOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableAppHostPostEventBody struct {
	value *AppHostPostEventBody
	isSet bool
}

func (v NullableAppHostPostEventBody) Get() *AppHostPostEventBody {
	return v.value
}

func (v *NullableAppHostPostEventBody) Set(val *AppHostPostEventBody) {
	v.value = val
	v.isSet = true
}

func (v NullableAppHostPostEventBody) IsSet() bool {
	return v.isSet
}

func (v *NullableAppHostPostEventBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppHostPostEventBody(val *AppHostPostEventBody) *NullableAppHostPostEventBody {
	return &NullableAppHostPostEventBody{value: val, isSet: true}
}

func (v NullableAppHostPostEventBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppHostPostEventBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

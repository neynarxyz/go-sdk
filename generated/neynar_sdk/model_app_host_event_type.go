/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// AppHostEventType Types of events that can occur between a user and an app host: - frame_added: User adds a mini app to their account - frame_removed: User removes a mini app from their account - notifications_enabled: User enables notifications for a mini app - notifications_disabled: User disables notifications for a mini app
type AppHostEventType string

// List of AppHostEventType
const (
	APPHOSTEVENTTYPE_FRAME_ADDED            AppHostEventType = "frame_added"
	APPHOSTEVENTTYPE_FRAME_REMOVED          AppHostEventType = "frame_removed"
	APPHOSTEVENTTYPE_NOTIFICATIONS_ENABLED  AppHostEventType = "notifications_enabled"
	APPHOSTEVENTTYPE_NOTIFICATIONS_DISABLED AppHostEventType = "notifications_disabled"
)

// All allowed values of AppHostEventType enum
var AllowedAppHostEventTypeEnumValues = []AppHostEventType{
	"frame_added",
	"frame_removed",
	"notifications_enabled",
	"notifications_disabled",
}

func (v *AppHostEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppHostEventType(value)
	for _, existing := range AllowedAppHostEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppHostEventType", value)
}

// NewAppHostEventTypeFromValue returns a pointer to a valid AppHostEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppHostEventTypeFromValue(v string) (*AppHostEventType, error) {
	ev := AppHostEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppHostEventType: valid values are %v", v, AllowedAppHostEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppHostEventType) IsValid() bool {
	for _, existing := range AllowedAppHostEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppHostEventType value
func (v AppHostEventType) Ptr() *AppHostEventType {
	return &v
}

type NullableAppHostEventType struct {
	value *AppHostEventType
	isSet bool
}

func (v NullableAppHostEventType) Get() *AppHostEventType {
	return v.value
}

func (v *NullableAppHostEventType) Set(val *AppHostEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableAppHostEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableAppHostEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppHostEventType(val *AppHostEventType) *NullableAppHostEventType {
	return &NullableAppHostEventType{value: val, isSet: true}
}

func (v NullableAppHostEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppHostEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

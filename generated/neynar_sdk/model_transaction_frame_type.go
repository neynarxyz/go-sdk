/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.41.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// TransactionFrameType Type of transaction mini app
type TransactionFrameType string

// List of TransactionFrameType
const (
	TRANSACTIONFRAMETYPE_PAY TransactionFrameType = "pay"
)

// All allowed values of TransactionFrameType enum
var AllowedTransactionFrameTypeEnumValues = []TransactionFrameType{
	"pay",
}

func (v *TransactionFrameType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionFrameType(value)
	for _, existing := range AllowedTransactionFrameTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionFrameType", value)
}

// NewTransactionFrameTypeFromValue returns a pointer to a valid TransactionFrameType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionFrameTypeFromValue(v string) (*TransactionFrameType, error) {
	ev := TransactionFrameType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionFrameType: valid values are %v", v, AllowedTransactionFrameTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionFrameType) IsValid() bool {
	for _, existing := range AllowedTransactionFrameTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionFrameType value
func (v TransactionFrameType) Ptr() *TransactionFrameType {
	return &v
}

type NullableTransactionFrameType struct {
	value *TransactionFrameType
	isSet bool
}

func (v NullableTransactionFrameType) Get() *TransactionFrameType {
	return v.value
}

func (v *NullableTransactionFrameType) Set(val *TransactionFrameType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFrameType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFrameType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFrameType(val *TransactionFrameType) *NullableTransactionFrameType {
	return &NullableTransactionFrameType{value: val, isSet: true}
}

func (v NullableTransactionFrameType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFrameType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

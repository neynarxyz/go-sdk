/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.2
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the BlockRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockRecord{}

// BlockRecord struct for BlockRecord
type BlockRecord struct {
	Object    string    `json:"object"`
	Blocked   *User     `json:"blocked,omitempty"`
	Blocker   *User     `json:"blocker,omitempty"`
	BlockedAt time.Time `json:"blocked_at"`
}

type _BlockRecord BlockRecord

// NewBlockRecord instantiates a new BlockRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockRecord(object string, blockedAt time.Time) *BlockRecord {
	this := BlockRecord{}
	this.Object = object
	this.BlockedAt = blockedAt
	return &this
}

// NewBlockRecordWithDefaults instantiates a new BlockRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockRecordWithDefaults() *BlockRecord {
	this := BlockRecord{}
	return &this
}

// GetObject returns the Object field value
func (o *BlockRecord) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *BlockRecord) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *BlockRecord) SetObject(v string) {
	o.Object = v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *BlockRecord) GetBlocked() User {
	if o == nil || IsNil(o.Blocked) {
		var ret User
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRecord) GetBlockedOk() (*User, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *BlockRecord) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given User and assigns it to the Blocked field.
func (o *BlockRecord) SetBlocked(v User) {
	o.Blocked = &v
}

// GetBlocker returns the Blocker field value if set, zero value otherwise.
func (o *BlockRecord) GetBlocker() User {
	if o == nil || IsNil(o.Blocker) {
		var ret User
		return ret
	}
	return *o.Blocker
}

// GetBlockerOk returns a tuple with the Blocker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRecord) GetBlockerOk() (*User, bool) {
	if o == nil || IsNil(o.Blocker) {
		return nil, false
	}
	return o.Blocker, true
}

// HasBlocker returns a boolean if a field has been set.
func (o *BlockRecord) HasBlocker() bool {
	if o != nil && !IsNil(o.Blocker) {
		return true
	}

	return false
}

// SetBlocker gets a reference to the given User and assigns it to the Blocker field.
func (o *BlockRecord) SetBlocker(v User) {
	o.Blocker = &v
}

// GetBlockedAt returns the BlockedAt field value
func (o *BlockRecord) GetBlockedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.BlockedAt
}

// GetBlockedAtOk returns a tuple with the BlockedAt field value
// and a boolean to check if the value has been set.
func (o *BlockRecord) GetBlockedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockedAt, true
}

// SetBlockedAt sets field value
func (o *BlockRecord) SetBlockedAt(v time.Time) {
	o.BlockedAt = v
}

func (o BlockRecord) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	if !IsNil(o.Blocker) {
		toSerialize["blocker"] = o.Blocker
	}
	toSerialize["blocked_at"] = o.BlockedAt
	return toSerialize, nil
}

func (o *BlockRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"blocked_at",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varBlockRecord := _BlockRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockRecord)

	if err != nil {
		return err
	}

	*o = BlockRecord(varBlockRecord)

	return err
}

type NullableBlockRecord struct {
	value *BlockRecord
	isSet bool
}

func (v NullableBlockRecord) Get() *BlockRecord {
	return v.value
}

func (v *NullableBlockRecord) Set(val *BlockRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockRecord(val *BlockRecord) *NullableBlockRecord {
	return &NullableBlockRecord{value: val, isSet: true}
}

func (v NullableBlockRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

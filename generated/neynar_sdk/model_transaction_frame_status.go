/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.38.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// TransactionFrameStatus the model 'TransactionFrameStatus'
type TransactionFrameStatus string

// List of TransactionFrameStatus
const (
	TRANSACTIONFRAMESTATUS_CREATED   TransactionFrameStatus = "created"
	TRANSACTIONFRAMESTATUS_COMPLETED TransactionFrameStatus = "completed"
)

// All allowed values of TransactionFrameStatus enum
var AllowedTransactionFrameStatusEnumValues = []TransactionFrameStatus{
	"created",
	"completed",
}

func (v *TransactionFrameStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionFrameStatus(value)
	for _, existing := range AllowedTransactionFrameStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionFrameStatus", value)
}

// NewTransactionFrameStatusFromValue returns a pointer to a valid TransactionFrameStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionFrameStatusFromValue(v string) (*TransactionFrameStatus, error) {
	ev := TransactionFrameStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionFrameStatus: valid values are %v", v, AllowedTransactionFrameStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionFrameStatus) IsValid() bool {
	for _, existing := range AllowedTransactionFrameStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionFrameStatus value
func (v TransactionFrameStatus) Ptr() *TransactionFrameStatus {
	return &v
}

type NullableTransactionFrameStatus struct {
	value *TransactionFrameStatus
	isSet bool
}

func (v NullableTransactionFrameStatus) Get() *TransactionFrameStatus {
	return v.value
}

func (v *NullableTransactionFrameStatus) Set(val *TransactionFrameStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFrameStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFrameStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFrameStatus(val *TransactionFrameStatus) *NullableTransactionFrameStatus {
	return &NullableTransactionFrameStatus{value: val, isSet: true}
}

func (v NullableTransactionFrameStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFrameStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

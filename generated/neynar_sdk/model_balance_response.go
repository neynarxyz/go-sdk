/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.4
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
)

// checks if the BalanceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalanceResponse{}

// BalanceResponse struct for BalanceResponse
type BalanceResponse struct {
	UserBalance *BalanceResponseUserBalance `json:"user_balance,omitempty"`
}

// NewBalanceResponse instantiates a new BalanceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalanceResponse() *BalanceResponse {
	this := BalanceResponse{}
	return &this
}

// NewBalanceResponseWithDefaults instantiates a new BalanceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceResponseWithDefaults() *BalanceResponse {
	this := BalanceResponse{}
	return &this
}

// GetUserBalance returns the UserBalance field value if set, zero value otherwise.
func (o *BalanceResponse) GetUserBalance() BalanceResponseUserBalance {
	if o == nil || IsNil(o.UserBalance) {
		var ret BalanceResponseUserBalance
		return ret
	}
	return *o.UserBalance
}

// GetUserBalanceOk returns a tuple with the UserBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalanceResponse) GetUserBalanceOk() (*BalanceResponseUserBalance, bool) {
	if o == nil || IsNil(o.UserBalance) {
		return nil, false
	}
	return o.UserBalance, true
}

// HasUserBalance returns a boolean if a field has been set.
func (o *BalanceResponse) HasUserBalance() bool {
	if o != nil && !IsNil(o.UserBalance) {
		return true
	}

	return false
}

// SetUserBalance gets a reference to the given BalanceResponseUserBalance and assigns it to the UserBalance field.
func (o *BalanceResponse) SetUserBalance(v BalanceResponseUserBalance) {
	o.UserBalance = &v
}

func (o BalanceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalanceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserBalance) {
		toSerialize["user_balance"] = o.UserBalance
	}
	return toSerialize, nil
}

type NullableBalanceResponse struct {
	value *BalanceResponse
	isSet bool
}

func (v NullableBalanceResponse) Get() *BalanceResponse {
	return v.value
}

func (v *NullableBalanceResponse) Set(val *BalanceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceResponse(val *BalanceResponse) *NullableBalanceResponse {
	return &NullableBalanceResponse{value: val, isSet: true}
}

func (v NullableBalanceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

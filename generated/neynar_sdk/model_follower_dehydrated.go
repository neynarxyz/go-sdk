/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.2
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FollowerDehydrated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FollowerDehydrated{}

// FollowerDehydrated struct for FollowerDehydrated
type FollowerDehydrated struct {
	Object string         `json:"object"`
	User   UserDehydrated `json:"user"`
}

type _FollowerDehydrated FollowerDehydrated

// NewFollowerDehydrated instantiates a new FollowerDehydrated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFollowerDehydrated(object string, user UserDehydrated) *FollowerDehydrated {
	this := FollowerDehydrated{}
	this.Object = object
	this.User = user
	return &this
}

// NewFollowerDehydratedWithDefaults instantiates a new FollowerDehydrated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFollowerDehydratedWithDefaults() *FollowerDehydrated {
	this := FollowerDehydrated{}
	return &this
}

// GetObject returns the Object field value
func (o *FollowerDehydrated) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *FollowerDehydrated) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *FollowerDehydrated) SetObject(v string) {
	o.Object = v
}

// GetUser returns the User field value
func (o *FollowerDehydrated) GetUser() UserDehydrated {
	if o == nil {
		var ret UserDehydrated
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *FollowerDehydrated) GetUserOk() (*UserDehydrated, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *FollowerDehydrated) SetUser(v UserDehydrated) {
	o.User = v
}

func (o FollowerDehydrated) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FollowerDehydrated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["user"] = o.User
	return toSerialize, nil
}

func (o *FollowerDehydrated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"user",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFollowerDehydrated := _FollowerDehydrated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFollowerDehydrated)

	if err != nil {
		return err
	}

	*o = FollowerDehydrated(varFollowerDehydrated)

	return err
}

type NullableFollowerDehydrated struct {
	value *FollowerDehydrated
	isSet bool
}

func (v NullableFollowerDehydrated) Get() *FollowerDehydrated {
	return v.value
}

func (v *NullableFollowerDehydrated) Set(val *FollowerDehydrated) {
	v.value = val
	v.isSet = true
}

func (v NullableFollowerDehydrated) IsSet() bool {
	return v.isSet
}

func (v *NullableFollowerDehydrated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFollowerDehydrated(val *FollowerDehydrated) *NullableFollowerDehydrated {
	return &NullableFollowerDehydrated{value: val, isSet: true}
}

func (v NullableFollowerDehydrated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFollowerDehydrated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

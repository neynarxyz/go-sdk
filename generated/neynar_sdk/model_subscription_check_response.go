/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// SubscriptionCheckResponse struct for SubscriptionCheckResponse
type SubscriptionCheckResponse struct {
	MapmapOfStringSubscriptionCheckResponseAnyOfValue *map[string]SubscriptionCheckResponseAnyOfValue
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SubscriptionCheckResponse) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into MapmapOfStringSubscriptionCheckResponseAnyOfValue
	err = json.Unmarshal(data, &dst.MapmapOfStringSubscriptionCheckResponseAnyOfValue)
	if err == nil {
		jsonMapmapOfStringSubscriptionCheckResponseAnyOfValue, _ := json.Marshal(dst.MapmapOfStringSubscriptionCheckResponseAnyOfValue)
		if string(jsonMapmapOfStringSubscriptionCheckResponseAnyOfValue) == "{}" { // empty struct
			dst.MapmapOfStringSubscriptionCheckResponseAnyOfValue = nil
		} else {
			return nil // data stored in dst.MapmapOfStringSubscriptionCheckResponseAnyOfValue, return on the first match
		}
	} else {
		dst.MapmapOfStringSubscriptionCheckResponseAnyOfValue = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SubscriptionCheckResponse)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubscriptionCheckResponse) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringSubscriptionCheckResponseAnyOfValue != nil {
		return json.Marshal(&src.MapmapOfStringSubscriptionCheckResponseAnyOfValue)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSubscriptionCheckResponse struct {
	value *SubscriptionCheckResponse
	isSet bool
}

func (v NullableSubscriptionCheckResponse) Get() *SubscriptionCheckResponse {
	return v.value
}

func (v *NullableSubscriptionCheckResponse) Set(val *SubscriptionCheckResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCheckResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCheckResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCheckResponse(val *SubscriptionCheckResponse) *NullableSubscriptionCheckResponse {
	return &NullableSubscriptionCheckResponse{value: val, isSet: true}
}

func (v NullableSubscriptionCheckResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCheckResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

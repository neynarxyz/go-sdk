/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.39.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the MuteRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MuteRecord{}

// MuteRecord struct for MuteRecord
type MuteRecord struct {
	Object  string    `json:"object"`
	Muted   User      `json:"muted"`
	MutedAt time.Time `json:"muted_at"`
}

type _MuteRecord MuteRecord

// NewMuteRecord instantiates a new MuteRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMuteRecord(object string, muted User, mutedAt time.Time) *MuteRecord {
	this := MuteRecord{}
	this.Object = object
	this.Muted = muted
	this.MutedAt = mutedAt
	return &this
}

// NewMuteRecordWithDefaults instantiates a new MuteRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMuteRecordWithDefaults() *MuteRecord {
	this := MuteRecord{}
	return &this
}

// GetObject returns the Object field value
func (o *MuteRecord) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *MuteRecord) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *MuteRecord) SetObject(v string) {
	o.Object = v
}

// GetMuted returns the Muted field value
func (o *MuteRecord) GetMuted() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.Muted
}

// GetMutedOk returns a tuple with the Muted field value
// and a boolean to check if the value has been set.
func (o *MuteRecord) GetMutedOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Muted, true
}

// SetMuted sets field value
func (o *MuteRecord) SetMuted(v User) {
	o.Muted = v
}

// GetMutedAt returns the MutedAt field value
func (o *MuteRecord) GetMutedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.MutedAt
}

// GetMutedAtOk returns a tuple with the MutedAt field value
// and a boolean to check if the value has been set.
func (o *MuteRecord) GetMutedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MutedAt, true
}

// SetMutedAt sets field value
func (o *MuteRecord) SetMutedAt(v time.Time) {
	o.MutedAt = v
}

func (o MuteRecord) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MuteRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["muted"] = o.Muted
	toSerialize["muted_at"] = o.MutedAt
	return toSerialize, nil
}

func (o *MuteRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"muted",
		"muted_at",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varMuteRecord := _MuteRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMuteRecord)

	if err != nil {
		return err
	}

	*o = MuteRecord(varMuteRecord)

	return err
}

type NullableMuteRecord struct {
	value *MuteRecord
	isSet bool
}

func (v NullableMuteRecord) Get() *MuteRecord {
	return v.value
}

func (v *NullableMuteRecord) Set(val *MuteRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableMuteRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableMuteRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMuteRecord(val *MuteRecord) *NullableMuteRecord {
	return &NullableMuteRecord{value: val, isSet: true}
}

func (v NullableMuteRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMuteRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RespondChannelInviteReqBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RespondChannelInviteReqBody{}

// RespondChannelInviteReqBody struct for RespondChannelInviteReqBody
type RespondChannelInviteReqBody struct {
	// UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
	SignerUuid string `json:"signer_uuid"`
	// The unique identifier of a farcaster channel
	ChannelId string            `json:"channel_id"`
	Role      ChannelMemberRole `json:"role"`
	// Accept or reject the invite
	Accept bool `json:"accept"`
}

type _RespondChannelInviteReqBody RespondChannelInviteReqBody

// NewRespondChannelInviteReqBody instantiates a new RespondChannelInviteReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRespondChannelInviteReqBody(signerUuid string, channelId string, role ChannelMemberRole, accept bool) *RespondChannelInviteReqBody {
	this := RespondChannelInviteReqBody{}
	this.SignerUuid = signerUuid
	this.ChannelId = channelId
	this.Role = role
	this.Accept = accept
	return &this
}

// NewRespondChannelInviteReqBodyWithDefaults instantiates a new RespondChannelInviteReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRespondChannelInviteReqBodyWithDefaults() *RespondChannelInviteReqBody {
	this := RespondChannelInviteReqBody{}
	return &this
}

// GetSignerUuid returns the SignerUuid field value
func (o *RespondChannelInviteReqBody) GetSignerUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignerUuid
}

// GetSignerUuidOk returns a tuple with the SignerUuid field value
// and a boolean to check if the value has been set.
func (o *RespondChannelInviteReqBody) GetSignerUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignerUuid, true
}

// SetSignerUuid sets field value
func (o *RespondChannelInviteReqBody) SetSignerUuid(v string) {
	o.SignerUuid = v
}

// GetChannelId returns the ChannelId field value
func (o *RespondChannelInviteReqBody) GetChannelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value
// and a boolean to check if the value has been set.
func (o *RespondChannelInviteReqBody) GetChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChannelId, true
}

// SetChannelId sets field value
func (o *RespondChannelInviteReqBody) SetChannelId(v string) {
	o.ChannelId = v
}

// GetRole returns the Role field value
func (o *RespondChannelInviteReqBody) GetRole() ChannelMemberRole {
	if o == nil {
		var ret ChannelMemberRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *RespondChannelInviteReqBody) GetRoleOk() (*ChannelMemberRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *RespondChannelInviteReqBody) SetRole(v ChannelMemberRole) {
	o.Role = v
}

// GetAccept returns the Accept field value
func (o *RespondChannelInviteReqBody) GetAccept() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Accept
}

// GetAcceptOk returns a tuple with the Accept field value
// and a boolean to check if the value has been set.
func (o *RespondChannelInviteReqBody) GetAcceptOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Accept, true
}

// SetAccept sets field value
func (o *RespondChannelInviteReqBody) SetAccept(v bool) {
	o.Accept = v
}

func (o RespondChannelInviteReqBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RespondChannelInviteReqBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["signer_uuid"] = o.SignerUuid
	toSerialize["channel_id"] = o.ChannelId
	toSerialize["role"] = o.Role
	toSerialize["accept"] = o.Accept
	return toSerialize, nil
}

func (o *RespondChannelInviteReqBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"signer_uuid",
		"channel_id",
		"role",
		"accept",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varRespondChannelInviteReqBody := _RespondChannelInviteReqBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRespondChannelInviteReqBody)

	if err != nil {
		return err
	}

	*o = RespondChannelInviteReqBody(varRespondChannelInviteReqBody)

	return err
}

type NullableRespondChannelInviteReqBody struct {
	value *RespondChannelInviteReqBody
	isSet bool
}

func (v NullableRespondChannelInviteReqBody) Get() *RespondChannelInviteReqBody {
	return v.value
}

func (v *NullableRespondChannelInviteReqBody) Set(val *RespondChannelInviteReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRespondChannelInviteReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRespondChannelInviteReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRespondChannelInviteReqBody(val *RespondChannelInviteReqBody) *NullableRespondChannelInviteReqBody {
	return &NullableRespondChannelInviteReqBody{value: val, isSet: true}
}

func (v NullableRespondChannelInviteReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRespondChannelInviteReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

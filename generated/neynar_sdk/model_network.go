/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.2
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// Network A blockchain network e.g. \"ethereum\", \"optimism\", \"base\", \"arbitrum\"
type Network string

// List of Network
const (
	NETWORK_ETHEREUM Network = "ethereum"
	NETWORK_OPTIMISM Network = "optimism"
	NETWORK_BASE     Network = "base"
	NETWORK_ARBITRUM Network = "arbitrum"
)

// All allowed values of Network enum
var AllowedNetworkEnumValues = []Network{
	"ethereum",
	"optimism",
	"base",
	"arbitrum",
}

func (v *Network) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Network(value)
	for _, existing := range AllowedNetworkEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Network", value)
}

// NewNetworkFromValue returns a pointer to a valid Network
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkFromValue(v string) (*Network, error) {
	ev := Network(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Network: valid values are %v", v, AllowedNetworkEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Network) IsValid() bool {
	for _, existing := range AllowedNetworkEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Network value
func (v Network) Ptr() *Network {
	return &v
}

type NullableNetwork struct {
	value *Network
	isSet bool
}

func (v NullableNetwork) Get() *Network {
	return v.value
}

func (v *NullableNetwork) Set(val *Network) {
	v.value = val
	v.isSet = true
}

func (v NullableNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetwork(val *Network) *NullableNetwork {
	return &NullableNetwork{value: val, isSet: true}
}

func (v NullableNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

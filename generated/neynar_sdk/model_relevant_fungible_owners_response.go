/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.41.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
)

// checks if the RelevantFungibleOwnersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelevantFungibleOwnersResponse{}

// RelevantFungibleOwnersResponse struct for RelevantFungibleOwnersResponse
type RelevantFungibleOwnersResponse struct {
	TopRelevantOwnersHydrated   []User `json:"top_relevant_owners_hydrated,omitempty"`
	AllRelevantOwnersDehydrated []User `json:"all_relevant_owners_dehydrated,omitempty"`
}

// NewRelevantFungibleOwnersResponse instantiates a new RelevantFungibleOwnersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelevantFungibleOwnersResponse() *RelevantFungibleOwnersResponse {
	this := RelevantFungibleOwnersResponse{}
	return &this
}

// NewRelevantFungibleOwnersResponseWithDefaults instantiates a new RelevantFungibleOwnersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelevantFungibleOwnersResponseWithDefaults() *RelevantFungibleOwnersResponse {
	this := RelevantFungibleOwnersResponse{}
	return &this
}

// GetTopRelevantOwnersHydrated returns the TopRelevantOwnersHydrated field value if set, zero value otherwise.
func (o *RelevantFungibleOwnersResponse) GetTopRelevantOwnersHydrated() []User {
	if o == nil || IsNil(o.TopRelevantOwnersHydrated) {
		var ret []User
		return ret
	}
	return o.TopRelevantOwnersHydrated
}

// GetTopRelevantOwnersHydratedOk returns a tuple with the TopRelevantOwnersHydrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelevantFungibleOwnersResponse) GetTopRelevantOwnersHydratedOk() ([]User, bool) {
	if o == nil || IsNil(o.TopRelevantOwnersHydrated) {
		return nil, false
	}
	return o.TopRelevantOwnersHydrated, true
}

// HasTopRelevantOwnersHydrated returns a boolean if a field has been set.
func (o *RelevantFungibleOwnersResponse) HasTopRelevantOwnersHydrated() bool {
	if o != nil && !IsNil(o.TopRelevantOwnersHydrated) {
		return true
	}

	return false
}

// SetTopRelevantOwnersHydrated gets a reference to the given []User and assigns it to the TopRelevantOwnersHydrated field.
func (o *RelevantFungibleOwnersResponse) SetTopRelevantOwnersHydrated(v []User) {
	o.TopRelevantOwnersHydrated = v
}

// GetAllRelevantOwnersDehydrated returns the AllRelevantOwnersDehydrated field value if set, zero value otherwise.
func (o *RelevantFungibleOwnersResponse) GetAllRelevantOwnersDehydrated() []User {
	if o == nil || IsNil(o.AllRelevantOwnersDehydrated) {
		var ret []User
		return ret
	}
	return o.AllRelevantOwnersDehydrated
}

// GetAllRelevantOwnersDehydratedOk returns a tuple with the AllRelevantOwnersDehydrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelevantFungibleOwnersResponse) GetAllRelevantOwnersDehydratedOk() ([]User, bool) {
	if o == nil || IsNil(o.AllRelevantOwnersDehydrated) {
		return nil, false
	}
	return o.AllRelevantOwnersDehydrated, true
}

// HasAllRelevantOwnersDehydrated returns a boolean if a field has been set.
func (o *RelevantFungibleOwnersResponse) HasAllRelevantOwnersDehydrated() bool {
	if o != nil && !IsNil(o.AllRelevantOwnersDehydrated) {
		return true
	}

	return false
}

// SetAllRelevantOwnersDehydrated gets a reference to the given []User and assigns it to the AllRelevantOwnersDehydrated field.
func (o *RelevantFungibleOwnersResponse) SetAllRelevantOwnersDehydrated(v []User) {
	o.AllRelevantOwnersDehydrated = v
}

func (o RelevantFungibleOwnersResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelevantFungibleOwnersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TopRelevantOwnersHydrated) {
		toSerialize["top_relevant_owners_hydrated"] = o.TopRelevantOwnersHydrated
	}
	if !IsNil(o.AllRelevantOwnersDehydrated) {
		toSerialize["all_relevant_owners_dehydrated"] = o.AllRelevantOwnersDehydrated
	}
	return toSerialize, nil
}

type NullableRelevantFungibleOwnersResponse struct {
	value *RelevantFungibleOwnersResponse
	isSet bool
}

func (v NullableRelevantFungibleOwnersResponse) Get() *RelevantFungibleOwnersResponse {
	return v.value
}

func (v *NullableRelevantFungibleOwnersResponse) Set(val *RelevantFungibleOwnersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRelevantFungibleOwnersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRelevantFungibleOwnersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelevantFungibleOwnersResponse(val *RelevantFungibleOwnersResponse) *NullableRelevantFungibleOwnersResponse {
	return &NullableRelevantFungibleOwnersResponse{value: val, isSet: true}
}

func (v NullableRelevantFungibleOwnersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelevantFungibleOwnersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

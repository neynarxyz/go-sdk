/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
)

// checks if the TransactionFrameAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionFrameAction{}

// TransactionFrameAction Action button for primary CTA on the transaction mini app
type TransactionFrameAction struct {
	// Custom text for action button
	Text *string `json:"text,omitempty"`
	// Custom text color for action button
	TextColor *string `json:"text_color,omitempty"`
	// Custom button color for action button
	ButtonColor *string `json:"button_color,omitempty"`
}

// NewTransactionFrameAction instantiates a new TransactionFrameAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionFrameAction() *TransactionFrameAction {
	this := TransactionFrameAction{}
	return &this
}

// NewTransactionFrameActionWithDefaults instantiates a new TransactionFrameAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionFrameActionWithDefaults() *TransactionFrameAction {
	this := TransactionFrameAction{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *TransactionFrameAction) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFrameAction) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *TransactionFrameAction) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *TransactionFrameAction) SetText(v string) {
	o.Text = &v
}

// GetTextColor returns the TextColor field value if set, zero value otherwise.
func (o *TransactionFrameAction) GetTextColor() string {
	if o == nil || IsNil(o.TextColor) {
		var ret string
		return ret
	}
	return *o.TextColor
}

// GetTextColorOk returns a tuple with the TextColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFrameAction) GetTextColorOk() (*string, bool) {
	if o == nil || IsNil(o.TextColor) {
		return nil, false
	}
	return o.TextColor, true
}

// HasTextColor returns a boolean if a field has been set.
func (o *TransactionFrameAction) HasTextColor() bool {
	if o != nil && !IsNil(o.TextColor) {
		return true
	}

	return false
}

// SetTextColor gets a reference to the given string and assigns it to the TextColor field.
func (o *TransactionFrameAction) SetTextColor(v string) {
	o.TextColor = &v
}

// GetButtonColor returns the ButtonColor field value if set, zero value otherwise.
func (o *TransactionFrameAction) GetButtonColor() string {
	if o == nil || IsNil(o.ButtonColor) {
		var ret string
		return ret
	}
	return *o.ButtonColor
}

// GetButtonColorOk returns a tuple with the ButtonColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFrameAction) GetButtonColorOk() (*string, bool) {
	if o == nil || IsNil(o.ButtonColor) {
		return nil, false
	}
	return o.ButtonColor, true
}

// HasButtonColor returns a boolean if a field has been set.
func (o *TransactionFrameAction) HasButtonColor() bool {
	if o != nil && !IsNil(o.ButtonColor) {
		return true
	}

	return false
}

// SetButtonColor gets a reference to the given string and assigns it to the ButtonColor field.
func (o *TransactionFrameAction) SetButtonColor(v string) {
	o.ButtonColor = &v
}

func (o TransactionFrameAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionFrameAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.TextColor) {
		toSerialize["text_color"] = o.TextColor
	}
	if !IsNil(o.ButtonColor) {
		toSerialize["button_color"] = o.ButtonColor
	}
	return toSerialize, nil
}

type NullableTransactionFrameAction struct {
	value *TransactionFrameAction
	isSet bool
}

func (v NullableTransactionFrameAction) Get() *TransactionFrameAction {
	return v.value
}

func (v *NullableTransactionFrameAction) Set(val *TransactionFrameAction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFrameAction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFrameAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFrameAction(val *TransactionFrameAction) *NullableTransactionFrameAction {
	return &NullableTransactionFrameAction{value: val, isSet: true}
}

func (v NullableTransactionFrameAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFrameAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

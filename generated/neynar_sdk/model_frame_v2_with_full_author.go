/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.3
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FrameV2WithFullAuthor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameV2WithFullAuthor{}

// FrameV2WithFullAuthor Mini app v2 object with full user object
type FrameV2WithFullAuthor struct {
	// Version of the mini app, 'next' for v2, 'vNext' for v1
	Version string `json:"version"`
	// URL of the image
	Image string `json:"image"`
	// Launch URL of the mini app
	FramesUrl string `json:"frames_url"`
	// Button title of a mini app
	Title    *string                             `json:"title,omitempty"`
	Manifest *FarcasterManifest                  `json:"manifest,omitempty"`
	Author   *User                               `json:"author,omitempty"`
	Metadata *FrameV2WithFullAuthorAllOfMetadata `json:"metadata,omitempty"`
}

type _FrameV2WithFullAuthor FrameV2WithFullAuthor

// NewFrameV2WithFullAuthor instantiates a new FrameV2WithFullAuthor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameV2WithFullAuthor(version string, image string, framesUrl string) *FrameV2WithFullAuthor {
	this := FrameV2WithFullAuthor{}
	this.Version = version
	this.Image = image
	this.FramesUrl = framesUrl
	return &this
}

// NewFrameV2WithFullAuthorWithDefaults instantiates a new FrameV2WithFullAuthor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameV2WithFullAuthorWithDefaults() *FrameV2WithFullAuthor {
	this := FrameV2WithFullAuthor{}
	return &this
}

// GetVersion returns the Version field value
func (o *FrameV2WithFullAuthor) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FrameV2WithFullAuthor) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FrameV2WithFullAuthor) SetVersion(v string) {
	o.Version = v
}

// GetImage returns the Image field value
func (o *FrameV2WithFullAuthor) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *FrameV2WithFullAuthor) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *FrameV2WithFullAuthor) SetImage(v string) {
	o.Image = v
}

// GetFramesUrl returns the FramesUrl field value
func (o *FrameV2WithFullAuthor) GetFramesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FramesUrl
}

// GetFramesUrlOk returns a tuple with the FramesUrl field value
// and a boolean to check if the value has been set.
func (o *FrameV2WithFullAuthor) GetFramesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FramesUrl, true
}

// SetFramesUrl sets field value
func (o *FrameV2WithFullAuthor) SetFramesUrl(v string) {
	o.FramesUrl = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *FrameV2WithFullAuthor) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV2WithFullAuthor) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *FrameV2WithFullAuthor) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *FrameV2WithFullAuthor) SetTitle(v string) {
	o.Title = &v
}

// GetManifest returns the Manifest field value if set, zero value otherwise.
func (o *FrameV2WithFullAuthor) GetManifest() FarcasterManifest {
	if o == nil || IsNil(o.Manifest) {
		var ret FarcasterManifest
		return ret
	}
	return *o.Manifest
}

// GetManifestOk returns a tuple with the Manifest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV2WithFullAuthor) GetManifestOk() (*FarcasterManifest, bool) {
	if o == nil || IsNil(o.Manifest) {
		return nil, false
	}
	return o.Manifest, true
}

// HasManifest returns a boolean if a field has been set.
func (o *FrameV2WithFullAuthor) HasManifest() bool {
	if o != nil && !IsNil(o.Manifest) {
		return true
	}

	return false
}

// SetManifest gets a reference to the given FarcasterManifest and assigns it to the Manifest field.
func (o *FrameV2WithFullAuthor) SetManifest(v FarcasterManifest) {
	o.Manifest = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *FrameV2WithFullAuthor) GetAuthor() User {
	if o == nil || IsNil(o.Author) {
		var ret User
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV2WithFullAuthor) GetAuthorOk() (*User, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *FrameV2WithFullAuthor) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given User and assigns it to the Author field.
func (o *FrameV2WithFullAuthor) SetAuthor(v User) {
	o.Author = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *FrameV2WithFullAuthor) GetMetadata() FrameV2WithFullAuthorAllOfMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret FrameV2WithFullAuthorAllOfMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV2WithFullAuthor) GetMetadataOk() (*FrameV2WithFullAuthorAllOfMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *FrameV2WithFullAuthor) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given FrameV2WithFullAuthorAllOfMetadata and assigns it to the Metadata field.
func (o *FrameV2WithFullAuthor) SetMetadata(v FrameV2WithFullAuthorAllOfMetadata) {
	o.Metadata = &v
}

func (o FrameV2WithFullAuthor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameV2WithFullAuthor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["image"] = o.Image
	toSerialize["frames_url"] = o.FramesUrl
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Manifest) {
		toSerialize["manifest"] = o.Manifest
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *FrameV2WithFullAuthor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"image",
		"frames_url",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFrameV2WithFullAuthor := _FrameV2WithFullAuthor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFrameV2WithFullAuthor)

	if err != nil {
		return err
	}

	*o = FrameV2WithFullAuthor(varFrameV2WithFullAuthor)

	return err
}

type NullableFrameV2WithFullAuthor struct {
	value *FrameV2WithFullAuthor
	isSet bool
}

func (v NullableFrameV2WithFullAuthor) Get() *FrameV2WithFullAuthor {
	return v.value
}

func (v *NullableFrameV2WithFullAuthor) Set(val *FrameV2WithFullAuthor) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameV2WithFullAuthor) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameV2WithFullAuthor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameV2WithFullAuthor(val *FrameV2WithFullAuthor) *NullableFrameV2WithFullAuthor {
	return &NullableFrameV2WithFullAuthor{value: val, isSet: true}
}

func (v NullableFrameV2WithFullAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameV2WithFullAuthor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

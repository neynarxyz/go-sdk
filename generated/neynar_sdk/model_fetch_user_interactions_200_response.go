/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FetchUserInteractions200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchUserInteractions200Response{}

// FetchUserInteractions200Response struct for FetchUserInteractions200Response
type FetchUserInteractions200Response struct {
	Interactions []Notification `json:"interactions"`
}

type _FetchUserInteractions200Response FetchUserInteractions200Response

// NewFetchUserInteractions200Response instantiates a new FetchUserInteractions200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchUserInteractions200Response(interactions []Notification) *FetchUserInteractions200Response {
	this := FetchUserInteractions200Response{}
	this.Interactions = interactions
	return &this
}

// NewFetchUserInteractions200ResponseWithDefaults instantiates a new FetchUserInteractions200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchUserInteractions200ResponseWithDefaults() *FetchUserInteractions200Response {
	this := FetchUserInteractions200Response{}
	return &this
}

// GetInteractions returns the Interactions field value
func (o *FetchUserInteractions200Response) GetInteractions() []Notification {
	if o == nil {
		var ret []Notification
		return ret
	}

	return o.Interactions
}

// GetInteractionsOk returns a tuple with the Interactions field value
// and a boolean to check if the value has been set.
func (o *FetchUserInteractions200Response) GetInteractionsOk() ([]Notification, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interactions, true
}

// SetInteractions sets field value
func (o *FetchUserInteractions200Response) SetInteractions(v []Notification) {
	o.Interactions = v
}

func (o FetchUserInteractions200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchUserInteractions200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["interactions"] = o.Interactions
	return toSerialize, nil
}

func (o *FetchUserInteractions200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interactions",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFetchUserInteractions200Response := _FetchUserInteractions200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFetchUserInteractions200Response)

	if err != nil {
		return err
	}

	*o = FetchUserInteractions200Response(varFetchUserInteractions200Response)

	return err
}

type NullableFetchUserInteractions200Response struct {
	value *FetchUserInteractions200Response
	isSet bool
}

func (v NullableFetchUserInteractions200Response) Get() *FetchUserInteractions200Response {
	return v.value
}

func (v *NullableFetchUserInteractions200Response) Set(val *FetchUserInteractions200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchUserInteractions200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchUserInteractions200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchUserInteractions200Response(val *FetchUserInteractions200Response) *NullableFetchUserInteractions200Response {
	return &NullableFetchUserInteractions200Response{value: val, isSet: true}
}

func (v NullableFetchUserInteractions200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchUserInteractions200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

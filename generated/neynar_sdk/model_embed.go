/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.4
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Embed - struct for Embed
type Embed struct {
	EmbedCast *EmbedCast
	EmbedUrl  *EmbedUrl
}

// EmbedCastAsEmbed is a convenience function that returns EmbedCast wrapped in Embed
func EmbedCastAsEmbed(v *EmbedCast) Embed {
	return Embed{
		EmbedCast: v,
	}
}

// EmbedUrlAsEmbed is a convenience function that returns EmbedUrl wrapped in Embed
func EmbedUrlAsEmbed(v *EmbedUrl) Embed {
	return Embed{
		EmbedUrl: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Embed) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EmbedCast
	err = newStrictDecoder(data).Decode(&dst.EmbedCast)
	if err == nil {
		jsonEmbedCast, _ := json.Marshal(dst.EmbedCast)
		if string(jsonEmbedCast) == "{}" { // empty struct
			dst.EmbedCast = nil
		} else {
			if err = validator.Validate(dst.EmbedCast); err != nil {
				dst.EmbedCast = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmbedCast = nil
	}

	// try to unmarshal data into EmbedUrl
	err = newStrictDecoder(data).Decode(&dst.EmbedUrl)
	if err == nil {
		jsonEmbedUrl, _ := json.Marshal(dst.EmbedUrl)
		if string(jsonEmbedUrl) == "{}" { // empty struct
			dst.EmbedUrl = nil
		} else {
			if err = validator.Validate(dst.EmbedUrl); err != nil {
				dst.EmbedUrl = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmbedUrl = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EmbedCast = nil
		dst.EmbedUrl = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Embed)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Embed)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Embed) MarshalJSON() ([]byte, error) {
	if src.EmbedCast != nil {
		return json.Marshal(&src.EmbedCast)
	}

	if src.EmbedUrl != nil {
		return json.Marshal(&src.EmbedUrl)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Embed) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.EmbedCast != nil {
		return obj.EmbedCast
	}

	if obj.EmbedUrl != nil {
		return obj.EmbedUrl
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Embed) GetActualInstanceValue() interface{} {
	if obj.EmbedCast != nil {
		return *obj.EmbedCast
	}

	if obj.EmbedUrl != nil {
		return *obj.EmbedUrl
	}

	// all schemas are nil
	return nil
}

type NullableEmbed struct {
	value *Embed
	isSet bool
}

func (v NullableEmbed) Get() *Embed {
	return v.value
}

func (v *NullableEmbed) Set(val *Embed) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbed) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbed(val *Embed) *NullableEmbed {
	return &NullableEmbed{value: val, isSet: true}
}

func (v NullableEmbed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

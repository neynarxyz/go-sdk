/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.43.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionSendFungiblesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSendFungiblesRequest{}

// TransactionSendFungiblesRequest struct for TransactionSendFungiblesRequest
type TransactionSendFungiblesRequest struct {
	Network string `json:"network"`
	// Contract address of the fungible token to send. If not provided, the default is the native token of the network.
	FungibleContractAddress *string                             `json:"fungible_contract_address,omitempty" validate:"regexp=^0x[a-fA-F0-9]{40}$"`
	Recipients              []TransactionSendFungiblesRecipient `json:"recipients"`
}

type _TransactionSendFungiblesRequest TransactionSendFungiblesRequest

// NewTransactionSendFungiblesRequest instantiates a new TransactionSendFungiblesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSendFungiblesRequest(network string, recipients []TransactionSendFungiblesRecipient) *TransactionSendFungiblesRequest {
	this := TransactionSendFungiblesRequest{}
	this.Network = network
	this.Recipients = recipients
	return &this
}

// NewTransactionSendFungiblesRequestWithDefaults instantiates a new TransactionSendFungiblesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSendFungiblesRequestWithDefaults() *TransactionSendFungiblesRequest {
	this := TransactionSendFungiblesRequest{}
	return &this
}

// GetNetwork returns the Network field value
func (o *TransactionSendFungiblesRequest) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *TransactionSendFungiblesRequest) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *TransactionSendFungiblesRequest) SetNetwork(v string) {
	o.Network = v
}

// GetFungibleContractAddress returns the FungibleContractAddress field value if set, zero value otherwise.
func (o *TransactionSendFungiblesRequest) GetFungibleContractAddress() string {
	if o == nil || IsNil(o.FungibleContractAddress) {
		var ret string
		return ret
	}
	return *o.FungibleContractAddress
}

// GetFungibleContractAddressOk returns a tuple with the FungibleContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSendFungiblesRequest) GetFungibleContractAddressOk() (*string, bool) {
	if o == nil || IsNil(o.FungibleContractAddress) {
		return nil, false
	}
	return o.FungibleContractAddress, true
}

// HasFungibleContractAddress returns a boolean if a field has been set.
func (o *TransactionSendFungiblesRequest) HasFungibleContractAddress() bool {
	if o != nil && !IsNil(o.FungibleContractAddress) {
		return true
	}

	return false
}

// SetFungibleContractAddress gets a reference to the given string and assigns it to the FungibleContractAddress field.
func (o *TransactionSendFungiblesRequest) SetFungibleContractAddress(v string) {
	o.FungibleContractAddress = &v
}

// GetRecipients returns the Recipients field value
func (o *TransactionSendFungiblesRequest) GetRecipients() []TransactionSendFungiblesRecipient {
	if o == nil {
		var ret []TransactionSendFungiblesRecipient
		return ret
	}

	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value
// and a boolean to check if the value has been set.
func (o *TransactionSendFungiblesRequest) GetRecipientsOk() ([]TransactionSendFungiblesRecipient, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recipients, true
}

// SetRecipients sets field value
func (o *TransactionSendFungiblesRequest) SetRecipients(v []TransactionSendFungiblesRecipient) {
	o.Recipients = v
}

func (o TransactionSendFungiblesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSendFungiblesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network"] = o.Network
	if !IsNil(o.FungibleContractAddress) {
		toSerialize["fungible_contract_address"] = o.FungibleContractAddress
	}
	toSerialize["recipients"] = o.Recipients
	return toSerialize, nil
}

func (o *TransactionSendFungiblesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network",
		"recipients",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTransactionSendFungiblesRequest := _TransactionSendFungiblesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionSendFungiblesRequest)

	if err != nil {
		return err
	}

	*o = TransactionSendFungiblesRequest(varTransactionSendFungiblesRequest)

	return err
}

type NullableTransactionSendFungiblesRequest struct {
	value *TransactionSendFungiblesRequest
	isSet bool
}

func (v NullableTransactionSendFungiblesRequest) Get() *TransactionSendFungiblesRequest {
	return v.value
}

func (v *NullableTransactionSendFungiblesRequest) Set(val *TransactionSendFungiblesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSendFungiblesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSendFungiblesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSendFungiblesRequest(val *TransactionSendFungiblesRequest) *NullableTransactionSendFungiblesRequest {
	return &NullableTransactionSendFungiblesRequest{value: val, isSet: true}
}

func (v NullableTransactionSendFungiblesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSendFungiblesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

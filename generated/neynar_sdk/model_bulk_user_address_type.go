/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.2
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// BulkUserAddressType the model 'BulkUserAddressType'
type BulkUserAddressType string

// List of BulkUserAddressType
const (
	BULKUSERADDRESSTYPE_CUSTODY_ADDRESS  BulkUserAddressType = "custody_address"
	BULKUSERADDRESSTYPE_VERIFIED_ADDRESS BulkUserAddressType = "verified_address"
)

// All allowed values of BulkUserAddressType enum
var AllowedBulkUserAddressTypeEnumValues = []BulkUserAddressType{
	"custody_address",
	"verified_address",
}

func (v *BulkUserAddressType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BulkUserAddressType(value)
	for _, existing := range AllowedBulkUserAddressTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BulkUserAddressType", value)
}

// NewBulkUserAddressTypeFromValue returns a pointer to a valid BulkUserAddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBulkUserAddressTypeFromValue(v string) (*BulkUserAddressType, error) {
	ev := BulkUserAddressType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BulkUserAddressType: valid values are %v", v, AllowedBulkUserAddressTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BulkUserAddressType) IsValid() bool {
	for _, existing := range AllowedBulkUserAddressTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BulkUserAddressType value
func (v BulkUserAddressType) Ptr() *BulkUserAddressType {
	return &v
}

type NullableBulkUserAddressType struct {
	value *BulkUserAddressType
	isSet bool
}

func (v NullableBulkUserAddressType) Get() *BulkUserAddressType {
	return v.value
}

func (v *NullableBulkUserAddressType) Set(val *BulkUserAddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkUserAddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkUserAddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkUserAddressType(val *BulkUserAddressType) *NullableBulkUserAddressType {
	return &NullableBulkUserAddressType{value: val, isSet: true}
}

func (v NullableBulkUserAddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkUserAddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

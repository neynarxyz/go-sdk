/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.38.2
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionFrameLineItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionFrameLineItem{}

// TransactionFrameLineItem struct for TransactionFrameLineItem
type TransactionFrameLineItem struct {
	// Name of the line item in transaction
	Name string `json:"name"`
	// Description of the line item in transaction
	Description string `json:"description"`
	// Optional image URL for the line item in transaction
	Image *string `json:"image,omitempty"`
}

type _TransactionFrameLineItem TransactionFrameLineItem

// NewTransactionFrameLineItem instantiates a new TransactionFrameLineItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionFrameLineItem(name string, description string) *TransactionFrameLineItem {
	this := TransactionFrameLineItem{}
	this.Name = name
	this.Description = description
	return &this
}

// NewTransactionFrameLineItemWithDefaults instantiates a new TransactionFrameLineItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionFrameLineItemWithDefaults() *TransactionFrameLineItem {
	this := TransactionFrameLineItem{}
	return &this
}

// GetName returns the Name field value
func (o *TransactionFrameLineItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TransactionFrameLineItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TransactionFrameLineItem) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *TransactionFrameLineItem) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TransactionFrameLineItem) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TransactionFrameLineItem) SetDescription(v string) {
	o.Description = v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *TransactionFrameLineItem) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFrameLineItem) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *TransactionFrameLineItem) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *TransactionFrameLineItem) SetImage(v string) {
	o.Image = &v
}

func (o TransactionFrameLineItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionFrameLineItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	return toSerialize, nil
}

func (o *TransactionFrameLineItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTransactionFrameLineItem := _TransactionFrameLineItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionFrameLineItem)

	if err != nil {
		return err
	}

	*o = TransactionFrameLineItem(varTransactionFrameLineItem)

	return err
}

type NullableTransactionFrameLineItem struct {
	value *TransactionFrameLineItem
	isSet bool
}

func (v NullableTransactionFrameLineItem) Get() *TransactionFrameLineItem {
	return v.value
}

func (v *NullableTransactionFrameLineItem) Set(val *TransactionFrameLineItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFrameLineItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFrameLineItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFrameLineItem(val *TransactionFrameLineItem) *NullableTransactionFrameLineItem {
	return &NullableTransactionFrameLineItem{value: val, isSet: true}
}

func (v NullableTransactionFrameLineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFrameLineItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

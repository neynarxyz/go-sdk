/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
)

// checks if the FrameV1Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameV1Input{}

// FrameV1Input struct for FrameV1Input
type FrameV1Input struct {
	// Input text for the mini app
	Text *string `json:"text,omitempty"`
}

// NewFrameV1Input instantiates a new FrameV1Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameV1Input() *FrameV1Input {
	this := FrameV1Input{}
	return &this
}

// NewFrameV1InputWithDefaults instantiates a new FrameV1Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameV1InputWithDefaults() *FrameV1Input {
	this := FrameV1Input{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *FrameV1Input) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameV1Input) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *FrameV1Input) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *FrameV1Input) SetText(v string) {
	o.Text = &v
}

func (o FrameV1Input) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameV1Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableFrameV1Input struct {
	value *FrameV1Input
	isSet bool
}

func (v NullableFrameV1Input) Get() *FrameV1Input {
	return v.value
}

func (v *NullableFrameV1Input) Set(val *FrameV1Input) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameV1Input) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameV1Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameV1Input(val *FrameV1Input) *NullableFrameV1Input {
	return &NullableFrameV1Input{value: val, isSet: true}
}

func (v NullableFrameV1Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameV1Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

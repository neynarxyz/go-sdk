/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.40.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NeynarFrameUpdateReqBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NeynarFrameUpdateReqBody{}

// NeynarFrameUpdateReqBody struct for NeynarFrameUpdateReqBody
type NeynarFrameUpdateReqBody struct {
	// The UUID of the mini app to update.
	Uuid string `json:"uuid"`
	// The name of the mini app.
	Name  *string           `json:"name,omitempty"`
	Pages []NeynarFramePage `json:"pages"`
}

type _NeynarFrameUpdateReqBody NeynarFrameUpdateReqBody

// NewNeynarFrameUpdateReqBody instantiates a new NeynarFrameUpdateReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeynarFrameUpdateReqBody(uuid string, pages []NeynarFramePage) *NeynarFrameUpdateReqBody {
	this := NeynarFrameUpdateReqBody{}
	this.Uuid = uuid
	this.Pages = pages
	return &this
}

// NewNeynarFrameUpdateReqBodyWithDefaults instantiates a new NeynarFrameUpdateReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeynarFrameUpdateReqBodyWithDefaults() *NeynarFrameUpdateReqBody {
	this := NeynarFrameUpdateReqBody{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *NeynarFrameUpdateReqBody) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *NeynarFrameUpdateReqBody) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *NeynarFrameUpdateReqBody) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NeynarFrameUpdateReqBody) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeynarFrameUpdateReqBody) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NeynarFrameUpdateReqBody) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NeynarFrameUpdateReqBody) SetName(v string) {
	o.Name = &v
}

// GetPages returns the Pages field value
func (o *NeynarFrameUpdateReqBody) GetPages() []NeynarFramePage {
	if o == nil {
		var ret []NeynarFramePage
		return ret
	}

	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value
// and a boolean to check if the value has been set.
func (o *NeynarFrameUpdateReqBody) GetPagesOk() ([]NeynarFramePage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pages, true
}

// SetPages sets field value
func (o *NeynarFrameUpdateReqBody) SetPages(v []NeynarFramePage) {
	o.Pages = v
}

func (o NeynarFrameUpdateReqBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NeynarFrameUpdateReqBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["pages"] = o.Pages
	return toSerialize, nil
}

func (o *NeynarFrameUpdateReqBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"pages",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varNeynarFrameUpdateReqBody := _NeynarFrameUpdateReqBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNeynarFrameUpdateReqBody)

	if err != nil {
		return err
	}

	*o = NeynarFrameUpdateReqBody(varNeynarFrameUpdateReqBody)

	return err
}

type NullableNeynarFrameUpdateReqBody struct {
	value *NeynarFrameUpdateReqBody
	isSet bool
}

func (v NullableNeynarFrameUpdateReqBody) Get() *NeynarFrameUpdateReqBody {
	return v.value
}

func (v *NullableNeynarFrameUpdateReqBody) Set(val *NeynarFrameUpdateReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableNeynarFrameUpdateReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableNeynarFrameUpdateReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeynarFrameUpdateReqBody(val *NeynarFrameUpdateReqBody) *NullableNeynarFrameUpdateReqBody {
	return &NullableNeynarFrameUpdateReqBody{value: val, isSet: true}
}

func (v NullableNeynarFrameUpdateReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeynarFrameUpdateReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

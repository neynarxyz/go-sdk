/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.41.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type SubscribersAPI interface {

	/*
		FetchSubscribedToForFid Subscribed to

		Fetch what FIDs and contracts a FID is subscribed to.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchSubscribedToForFidRequest
	*/
	FetchSubscribedToForFid(ctx context.Context) ApiFetchSubscribedToForFidRequest

	// FetchSubscribedToForFidExecute executes the request
	//  @return SubscribedToResponse
	FetchSubscribedToForFidExecute(r ApiFetchSubscribedToForFidRequest) (*SubscribedToResponse, *http.Response, error)

	/*
		FetchSubscribersForFid Subscribers of a user

		Fetch subscribers for a given FID's contracts. Doesn't return addresses that don't have an FID.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchSubscribersForFidRequest
	*/
	FetchSubscribersForFid(ctx context.Context) ApiFetchSubscribersForFidRequest

	// FetchSubscribersForFidExecute executes the request
	//  @return SubscribersResponse
	FetchSubscribersForFidExecute(r ApiFetchSubscribersForFidRequest) (*SubscribersResponse, *http.Response, error)

	/*
		FetchSubscriptionCheck Hypersub subscription check

		Check if a wallet address is subscribed to a given STP (Hypersub) contract.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchSubscriptionCheckRequest
	*/
	FetchSubscriptionCheck(ctx context.Context) ApiFetchSubscriptionCheckRequest

	// FetchSubscriptionCheckExecute executes the request
	//  @return SubscriptionCheckResponse
	FetchSubscriptionCheckExecute(r ApiFetchSubscriptionCheckRequest) (*SubscriptionCheckResponse, *http.Response, error)

	/*
		FetchSubscriptionsForFid Subscriptions created by FID

		Fetch created subscriptions for a given FID's.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchSubscriptionsForFidRequest
	*/
	FetchSubscriptionsForFid(ctx context.Context) ApiFetchSubscriptionsForFidRequest

	// FetchSubscriptionsForFidExecute executes the request
	//  @return SubscriptionsResponse
	FetchSubscriptionsForFidExecute(r ApiFetchSubscriptionsForFidRequest) (*SubscriptionsResponse, *http.Response, error)
}

// SubscribersAPIService SubscribersAPI service
type SubscribersAPIService service

type ApiFetchSubscribedToForFidRequest struct {
	ctx                  context.Context
	ApiService           SubscribersAPI
	fid                  *int32
	subscriptionProvider *SubscriptionProvider
	viewerFid            *int32
}

func (r ApiFetchSubscribedToForFidRequest) Fid(fid int32) ApiFetchSubscribedToForFidRequest {
	r.fid = &fid
	return r
}

func (r ApiFetchSubscribedToForFidRequest) SubscriptionProvider(subscriptionProvider SubscriptionProvider) ApiFetchSubscribedToForFidRequest {
	r.subscriptionProvider = &subscriptionProvider
	return r
}

func (r ApiFetchSubscribedToForFidRequest) ViewerFid(viewerFid int32) ApiFetchSubscribedToForFidRequest {
	r.viewerFid = &viewerFid
	return r
}

func (r ApiFetchSubscribedToForFidRequest) Execute() (*SubscribedToResponse, *http.Response, error) {
	return r.ApiService.FetchSubscribedToForFidExecute(r)
}

/*
FetchSubscribedToForFid Subscribed to

Fetch what FIDs and contracts a FID is subscribed to.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchSubscribedToForFidRequest
*/
func (a *SubscribersAPIService) FetchSubscribedToForFid(ctx context.Context) ApiFetchSubscribedToForFidRequest {
	return ApiFetchSubscribedToForFidRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SubscribedToResponse
func (a *SubscribersAPIService) FetchSubscribedToForFidExecute(r ApiFetchSubscribedToForFidRequest) (*SubscribedToResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscribedToResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscribersAPIService.FetchSubscribedToForFid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/user/subscribed_to"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if r.subscriptionProvider == nil {
		return localVarReturnValue, nil, reportError("subscriptionProvider is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	if r.viewerFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "viewer_fid", r.viewerFid, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "subscription_provider", r.subscriptionProvider, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchSubscribersForFidRequest struct {
	ctx                  context.Context
	ApiService           SubscribersAPI
	fid                  *int32
	subscriptionProvider *SubscriptionProviders
	viewerFid            *int32
}

func (r ApiFetchSubscribersForFidRequest) Fid(fid int32) ApiFetchSubscribersForFidRequest {
	r.fid = &fid
	return r
}

func (r ApiFetchSubscribersForFidRequest) SubscriptionProvider(subscriptionProvider SubscriptionProviders) ApiFetchSubscribersForFidRequest {
	r.subscriptionProvider = &subscriptionProvider
	return r
}

func (r ApiFetchSubscribersForFidRequest) ViewerFid(viewerFid int32) ApiFetchSubscribersForFidRequest {
	r.viewerFid = &viewerFid
	return r
}

func (r ApiFetchSubscribersForFidRequest) Execute() (*SubscribersResponse, *http.Response, error) {
	return r.ApiService.FetchSubscribersForFidExecute(r)
}

/*
FetchSubscribersForFid Subscribers of a user

Fetch subscribers for a given FID's contracts. Doesn't return addresses that don't have an FID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchSubscribersForFidRequest
*/
func (a *SubscribersAPIService) FetchSubscribersForFid(ctx context.Context) ApiFetchSubscribersForFidRequest {
	return ApiFetchSubscribersForFidRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SubscribersResponse
func (a *SubscribersAPIService) FetchSubscribersForFidExecute(r ApiFetchSubscribersForFidRequest) (*SubscribersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscribersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscribersAPIService.FetchSubscribersForFid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/user/subscribers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if r.subscriptionProvider == nil {
		return localVarReturnValue, nil, reportError("subscriptionProvider is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	if r.viewerFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "viewer_fid", r.viewerFid, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "subscription_provider", r.subscriptionProvider, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchSubscriptionCheckRequest struct {
	ctx             context.Context
	ApiService      SubscribersAPI
	addresses       *string
	contractAddress *string
	chainId         *string
}

// Comma separated list of Ethereum addresses, up to 350 at a time
func (r ApiFetchSubscriptionCheckRequest) Addresses(addresses string) ApiFetchSubscriptionCheckRequest {
	r.addresses = &addresses
	return r
}

// Ethereum address of the STP contract
func (r ApiFetchSubscriptionCheckRequest) ContractAddress(contractAddress string) ApiFetchSubscriptionCheckRequest {
	r.contractAddress = &contractAddress
	return r
}

// Chain ID of the STP contract
func (r ApiFetchSubscriptionCheckRequest) ChainId(chainId string) ApiFetchSubscriptionCheckRequest {
	r.chainId = &chainId
	return r
}

func (r ApiFetchSubscriptionCheckRequest) Execute() (*SubscriptionCheckResponse, *http.Response, error) {
	return r.ApiService.FetchSubscriptionCheckExecute(r)
}

/*
FetchSubscriptionCheck Hypersub subscription check

Check if a wallet address is subscribed to a given STP (Hypersub) contract.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchSubscriptionCheckRequest
*/
func (a *SubscribersAPIService) FetchSubscriptionCheck(ctx context.Context) ApiFetchSubscriptionCheckRequest {
	return ApiFetchSubscriptionCheckRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SubscriptionCheckResponse
func (a *SubscribersAPIService) FetchSubscriptionCheckExecute(r ApiFetchSubscriptionCheckRequest) (*SubscriptionCheckResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionCheckResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscribersAPIService.FetchSubscriptionCheck")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stp/subscription_check"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addresses == nil {
		return localVarReturnValue, nil, reportError("addresses is required and must be specified")
	}
	if r.contractAddress == nil {
		return localVarReturnValue, nil, reportError("contractAddress is required and must be specified")
	}
	if r.chainId == nil {
		return localVarReturnValue, nil, reportError("chainId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "addresses", r.addresses, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "contract_address", r.contractAddress, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "chain_id", r.chainId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchSubscriptionsForFidRequest struct {
	ctx                  context.Context
	ApiService           SubscribersAPI
	fid                  *int32
	subscriptionProvider *SubscriptionProvider
}

func (r ApiFetchSubscriptionsForFidRequest) Fid(fid int32) ApiFetchSubscriptionsForFidRequest {
	r.fid = &fid
	return r
}

func (r ApiFetchSubscriptionsForFidRequest) SubscriptionProvider(subscriptionProvider SubscriptionProvider) ApiFetchSubscriptionsForFidRequest {
	r.subscriptionProvider = &subscriptionProvider
	return r
}

func (r ApiFetchSubscriptionsForFidRequest) Execute() (*SubscriptionsResponse, *http.Response, error) {
	return r.ApiService.FetchSubscriptionsForFidExecute(r)
}

/*
FetchSubscriptionsForFid Subscriptions created by FID

Fetch created subscriptions for a given FID's.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchSubscriptionsForFidRequest
*/
func (a *SubscribersAPIService) FetchSubscriptionsForFid(ctx context.Context) ApiFetchSubscriptionsForFidRequest {
	return ApiFetchSubscriptionsForFidRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SubscriptionsResponse
func (a *SubscribersAPIService) FetchSubscriptionsForFidExecute(r ApiFetchSubscriptionsForFidRequest) (*SubscriptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscribersAPIService.FetchSubscriptionsForFid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/user/subscriptions_created"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if r.subscriptionProvider == nil {
		return localVarReturnValue, nil, reportError("subscriptionProvider is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "subscription_provider", r.subscriptionProvider, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

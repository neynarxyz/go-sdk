/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.40.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type AgentsAPI interface {

	/*
		CreateTransactionPayFrame Create transaction pay mini app

		Creates a new transaction pay mini app that can be used to collect payments through a mini app

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateTransactionPayFrameRequest
	*/
	CreateTransactionPayFrame(ctx context.Context) ApiCreateTransactionPayFrameRequest

	// CreateTransactionPayFrameExecute executes the request
	//  @return TransactionFrameResponse
	CreateTransactionPayFrameExecute(r ApiCreateTransactionPayFrameRequest) (*TransactionFrameResponse, *http.Response, error)

	/*
		FetchUserInteractions User interactions

		Returns a list of interactions between two users

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchUserInteractionsRequest
	*/
	FetchUserInteractions(ctx context.Context) ApiFetchUserInteractionsRequest

	// FetchUserInteractionsExecute executes the request
	//  @return FetchUserInteractions200Response
	FetchUserInteractionsExecute(r ApiFetchUserInteractionsRequest) (*FetchUserInteractions200Response, *http.Response, error)

	/*
		LookupCastConversationSummary Cast conversation summary

		Generates a summary of all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL.  Summary is generated by an LLM and is intended to be passed as a context to AI agents.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiLookupCastConversationSummaryRequest
	*/
	LookupCastConversationSummary(ctx context.Context) ApiLookupCastConversationSummaryRequest

	// LookupCastConversationSummaryExecute executes the request
	//  @return ConversationSummary
	LookupCastConversationSummaryExecute(r ApiLookupCastConversationSummaryRequest) (*ConversationSummary, *http.Response, error)
}

// AgentsAPIService AgentsAPI service
type AgentsAPIService service

type ApiCreateTransactionPayFrameRequest struct {
	ctx                            context.Context
	ApiService                     AgentsAPI
	framePayTransactionRequestBody *FramePayTransactionRequestBody
}

func (r ApiCreateTransactionPayFrameRequest) FramePayTransactionRequestBody(framePayTransactionRequestBody FramePayTransactionRequestBody) ApiCreateTransactionPayFrameRequest {
	r.framePayTransactionRequestBody = &framePayTransactionRequestBody
	return r
}

func (r ApiCreateTransactionPayFrameRequest) Execute() (*TransactionFrameResponse, *http.Response, error) {
	return r.ApiService.CreateTransactionPayFrameExecute(r)
}

/*
CreateTransactionPayFrame Create transaction pay mini app

Creates a new transaction pay mini app that can be used to collect payments through a mini app

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTransactionPayFrameRequest
*/
func (a *AgentsAPIService) CreateTransactionPayFrame(ctx context.Context) ApiCreateTransactionPayFrameRequest {
	return ApiCreateTransactionPayFrameRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TransactionFrameResponse
func (a *AgentsAPIService) CreateTransactionPayFrameExecute(r ApiCreateTransactionPayFrameRequest) (*TransactionFrameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransactionFrameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.CreateTransactionPayFrame")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/frame/transaction/pay"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.framePayTransactionRequestBody == nil {
		return localVarReturnValue, nil, reportError("framePayTransactionRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.framePayTransactionRequestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchUserInteractionsRequest struct {
	ctx        context.Context
	ApiService AgentsAPI
	fids       *string
	type_      *[]NotificationType
}

// Comma separated list of two FIDs
func (r ApiFetchUserInteractionsRequest) Fids(fids string) ApiFetchUserInteractionsRequest {
	r.fids = &fids
	return r
}

// Comma seperated list of Interaction type to fetch
func (r ApiFetchUserInteractionsRequest) Type_(type_ []NotificationType) ApiFetchUserInteractionsRequest {
	r.type_ = &type_
	return r
}

func (r ApiFetchUserInteractionsRequest) Execute() (*FetchUserInteractions200Response, *http.Response, error) {
	return r.ApiService.FetchUserInteractionsExecute(r)
}

/*
FetchUserInteractions User interactions

Returns a list of interactions between two users

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchUserInteractionsRequest
*/
func (a *AgentsAPIService) FetchUserInteractions(ctx context.Context) ApiFetchUserInteractionsRequest {
	return ApiFetchUserInteractionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FetchUserInteractions200Response
func (a *AgentsAPIService) FetchUserInteractionsExecute(r ApiFetchUserInteractionsRequest) (*FetchUserInteractions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FetchUserInteractions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.FetchUserInteractions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/user/interactions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fids == nil {
		return localVarReturnValue, nil, reportError("fids is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fids", r.fids, "form", "")
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLookupCastConversationSummaryRequest struct {
	ctx        context.Context
	ApiService AgentsAPI
	identifier *string
	limit      *int32
	prompt     *string
}

// Cast identifier (Its either a url or a hash)
func (r ApiLookupCastConversationSummaryRequest) Identifier(identifier string) ApiLookupCastConversationSummaryRequest {
	r.identifier = &identifier
	return r
}

// Number of casts to consider in a summary up to a point of target cast
func (r ApiLookupCastConversationSummaryRequest) Limit(limit int32) ApiLookupCastConversationSummaryRequest {
	r.limit = &limit
	return r
}

// Additional prompt used to generate a summary
func (r ApiLookupCastConversationSummaryRequest) Prompt(prompt string) ApiLookupCastConversationSummaryRequest {
	r.prompt = &prompt
	return r
}

func (r ApiLookupCastConversationSummaryRequest) Execute() (*ConversationSummary, *http.Response, error) {
	return r.ApiService.LookupCastConversationSummaryExecute(r)
}

/*
LookupCastConversationSummary Cast conversation summary

Generates a summary of all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL.  Summary is generated by an LLM and is intended to be passed as a context to AI agents.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiLookupCastConversationSummaryRequest
*/
func (a *AgentsAPIService) LookupCastConversationSummary(ctx context.Context) ApiLookupCastConversationSummaryRequest {
	return ApiLookupCastConversationSummaryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConversationSummary
func (a *AgentsAPIService) LookupCastConversationSummaryExecute(r ApiLookupCastConversationSummaryRequest) (*ConversationSummary, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConversationSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.LookupCastConversationSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/cast/conversation/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.identifier == nil {
		return localVarReturnValue, nil, reportError("identifier is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "form", "")
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.limit = &defaultValue
	}
	if r.prompt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prompt", r.prompt, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

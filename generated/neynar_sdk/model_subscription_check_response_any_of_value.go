/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionCheckResponseAnyOfValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionCheckResponseAnyOfValue{}

// SubscriptionCheckResponseAnyOfValue struct for SubscriptionCheckResponseAnyOfValue
type SubscriptionCheckResponseAnyOfValue struct {
	Object       string                   `json:"object"`
	Status       bool                     `json:"status"`
	ExpiresAt    NullableInt64            `json:"expires_at"`
	SubscribedAt NullableInt64            `json:"subscribed_at"`
	Tier         NullableSubscriptionTier `json:"tier"`
}

type _SubscriptionCheckResponseAnyOfValue SubscriptionCheckResponseAnyOfValue

// NewSubscriptionCheckResponseAnyOfValue instantiates a new SubscriptionCheckResponseAnyOfValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionCheckResponseAnyOfValue(object string, status bool, expiresAt NullableInt64, subscribedAt NullableInt64, tier NullableSubscriptionTier) *SubscriptionCheckResponseAnyOfValue {
	this := SubscriptionCheckResponseAnyOfValue{}
	this.Object = object
	this.Status = status
	this.ExpiresAt = expiresAt
	this.SubscribedAt = subscribedAt
	this.Tier = tier
	return &this
}

// NewSubscriptionCheckResponseAnyOfValueWithDefaults instantiates a new SubscriptionCheckResponseAnyOfValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionCheckResponseAnyOfValueWithDefaults() *SubscriptionCheckResponseAnyOfValue {
	this := SubscriptionCheckResponseAnyOfValue{}
	return &this
}

// GetObject returns the Object field value
func (o *SubscriptionCheckResponseAnyOfValue) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCheckResponseAnyOfValue) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *SubscriptionCheckResponseAnyOfValue) SetObject(v string) {
	o.Object = v
}

// GetStatus returns the Status field value
func (o *SubscriptionCheckResponseAnyOfValue) GetStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCheckResponseAnyOfValue) GetStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SubscriptionCheckResponseAnyOfValue) SetStatus(v bool) {
	o.Status = v
}

// GetExpiresAt returns the ExpiresAt field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *SubscriptionCheckResponseAnyOfValue) GetExpiresAt() int64 {
	if o == nil || o.ExpiresAt.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionCheckResponseAnyOfValue) GetExpiresAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// SetExpiresAt sets field value
func (o *SubscriptionCheckResponseAnyOfValue) SetExpiresAt(v int64) {
	o.ExpiresAt.Set(&v)
}

// GetSubscribedAt returns the SubscribedAt field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *SubscriptionCheckResponseAnyOfValue) GetSubscribedAt() int64 {
	if o == nil || o.SubscribedAt.Get() == nil {
		var ret int64
		return ret
	}

	return *o.SubscribedAt.Get()
}

// GetSubscribedAtOk returns a tuple with the SubscribedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionCheckResponseAnyOfValue) GetSubscribedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscribedAt.Get(), o.SubscribedAt.IsSet()
}

// SetSubscribedAt sets field value
func (o *SubscriptionCheckResponseAnyOfValue) SetSubscribedAt(v int64) {
	o.SubscribedAt.Set(&v)
}

// GetTier returns the Tier field value
// If the value is explicit nil, the zero value for SubscriptionTier will be returned
func (o *SubscriptionCheckResponseAnyOfValue) GetTier() SubscriptionTier {
	if o == nil || o.Tier.Get() == nil {
		var ret SubscriptionTier
		return ret
	}

	return *o.Tier.Get()
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionCheckResponseAnyOfValue) GetTierOk() (*SubscriptionTier, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tier.Get(), o.Tier.IsSet()
}

// SetTier sets field value
func (o *SubscriptionCheckResponseAnyOfValue) SetTier(v SubscriptionTier) {
	o.Tier.Set(&v)
}

func (o SubscriptionCheckResponseAnyOfValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionCheckResponseAnyOfValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["status"] = o.Status
	toSerialize["expires_at"] = o.ExpiresAt.Get()
	toSerialize["subscribed_at"] = o.SubscribedAt.Get()
	toSerialize["tier"] = o.Tier.Get()
	return toSerialize, nil
}

func (o *SubscriptionCheckResponseAnyOfValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"status",
		"expires_at",
		"subscribed_at",
		"tier",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varSubscriptionCheckResponseAnyOfValue := _SubscriptionCheckResponseAnyOfValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionCheckResponseAnyOfValue)

	if err != nil {
		return err
	}

	*o = SubscriptionCheckResponseAnyOfValue(varSubscriptionCheckResponseAnyOfValue)

	return err
}

type NullableSubscriptionCheckResponseAnyOfValue struct {
	value *SubscriptionCheckResponseAnyOfValue
	isSet bool
}

func (v NullableSubscriptionCheckResponseAnyOfValue) Get() *SubscriptionCheckResponseAnyOfValue {
	return v.value
}

func (v *NullableSubscriptionCheckResponseAnyOfValue) Set(val *SubscriptionCheckResponseAnyOfValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCheckResponseAnyOfValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCheckResponseAnyOfValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCheckResponseAnyOfValue(val *SubscriptionCheckResponseAnyOfValue) *NullableSubscriptionCheckResponseAnyOfValue {
	return &NullableSubscriptionCheckResponseAnyOfValue{value: val, isSet: true}
}

func (v NullableSubscriptionCheckResponseAnyOfValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCheckResponseAnyOfValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

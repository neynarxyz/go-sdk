/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.41.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// BulkUsersByAddressResponse struct for BulkUsersByAddressResponse
type BulkUsersByAddressResponse struct {
	MapmapOfStringarrayOfUser *map[string][]User
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *BulkUsersByAddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into MapmapOfStringarrayOfUser
	err = json.Unmarshal(data, &dst.MapmapOfStringarrayOfUser)
	if err == nil {
		jsonMapmapOfStringarrayOfUser, _ := json.Marshal(dst.MapmapOfStringarrayOfUser)
		if string(jsonMapmapOfStringarrayOfUser) == "{}" { // empty struct
			dst.MapmapOfStringarrayOfUser = nil
		} else {
			return nil // data stored in dst.MapmapOfStringarrayOfUser, return on the first match
		}
	} else {
		dst.MapmapOfStringarrayOfUser = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(BulkUsersByAddressResponse)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BulkUsersByAddressResponse) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringarrayOfUser != nil {
		return json.Marshal(&src.MapmapOfStringarrayOfUser)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableBulkUsersByAddressResponse struct {
	value *BulkUsersByAddressResponse
	isSet bool
}

func (v NullableBulkUsersByAddressResponse) Get() *BulkUsersByAddressResponse {
	return v.value
}

func (v *NullableBulkUsersByAddressResponse) Set(val *BulkUsersByAddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkUsersByAddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkUsersByAddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkUsersByAddressResponse(val *BulkUsersByAddressResponse) *NullableBulkUsersByAddressResponse {
	return &NullableBulkUsersByAddressResponse{value: val, isSet: true}
}

func (v NullableBulkUsersByAddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkUsersByAddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

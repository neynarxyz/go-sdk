/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ChannelMemberChannel - struct for ChannelMemberChannel
type ChannelMemberChannel struct {
	Channel           *Channel
	ChannelDehydrated *ChannelDehydrated
}

// ChannelAsChannelMemberChannel is a convenience function that returns Channel wrapped in ChannelMemberChannel
func ChannelAsChannelMemberChannel(v *Channel) ChannelMemberChannel {
	return ChannelMemberChannel{
		Channel: v,
	}
}

// ChannelDehydratedAsChannelMemberChannel is a convenience function that returns ChannelDehydrated wrapped in ChannelMemberChannel
func ChannelDehydratedAsChannelMemberChannel(v *ChannelDehydrated) ChannelMemberChannel {
	return ChannelMemberChannel{
		ChannelDehydrated: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ChannelMemberChannel) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Channel
	err = newStrictDecoder(data).Decode(&dst.Channel)
	if err == nil {
		jsonChannel, _ := json.Marshal(dst.Channel)
		if string(jsonChannel) == "{}" { // empty struct
			dst.Channel = nil
		} else {
			if err = validator.Validate(dst.Channel); err != nil {
				dst.Channel = nil
			} else {
				match++
			}
		}
	} else {
		dst.Channel = nil
	}

	// try to unmarshal data into ChannelDehydrated
	err = newStrictDecoder(data).Decode(&dst.ChannelDehydrated)
	if err == nil {
		jsonChannelDehydrated, _ := json.Marshal(dst.ChannelDehydrated)
		if string(jsonChannelDehydrated) == "{}" { // empty struct
			dst.ChannelDehydrated = nil
		} else {
			if err = validator.Validate(dst.ChannelDehydrated); err != nil {
				dst.ChannelDehydrated = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChannelDehydrated = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Channel = nil
		dst.ChannelDehydrated = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ChannelMemberChannel)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ChannelMemberChannel)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChannelMemberChannel) MarshalJSON() ([]byte, error) {
	if src.Channel != nil {
		return json.Marshal(&src.Channel)
	}

	if src.ChannelDehydrated != nil {
		return json.Marshal(&src.ChannelDehydrated)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ChannelMemberChannel) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Channel != nil {
		return obj.Channel
	}

	if obj.ChannelDehydrated != nil {
		return obj.ChannelDehydrated
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ChannelMemberChannel) GetActualInstanceValue() interface{} {
	if obj.Channel != nil {
		return *obj.Channel
	}

	if obj.ChannelDehydrated != nil {
		return *obj.ChannelDehydrated
	}

	// all schemas are nil
	return nil
}

type NullableChannelMemberChannel struct {
	value *ChannelMemberChannel
	isSet bool
}

func (v NullableChannelMemberChannel) Get() *ChannelMemberChannel {
	return v.value
}

func (v *NullableChannelMemberChannel) Set(val *ChannelMemberChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelMemberChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelMemberChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelMemberChannel(val *ChannelMemberChannel) *NullableChannelMemberChannel {
	return &NullableChannelMemberChannel{value: val, isSet: true}
}

func (v NullableChannelMemberChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelMemberChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

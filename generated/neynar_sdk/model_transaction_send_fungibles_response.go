/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.43.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionSendFungiblesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSendFungiblesResponse{}

// TransactionSendFungiblesResponse struct for TransactionSendFungiblesResponse
type TransactionSendFungiblesResponse struct {
	SendReceipts []TransactionSendFungiblesReceipt `json:"send_receipts"`
	Transactions []TransactionSendTxInfo           `json:"transactions"`
}

type _TransactionSendFungiblesResponse TransactionSendFungiblesResponse

// NewTransactionSendFungiblesResponse instantiates a new TransactionSendFungiblesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSendFungiblesResponse(sendReceipts []TransactionSendFungiblesReceipt, transactions []TransactionSendTxInfo) *TransactionSendFungiblesResponse {
	this := TransactionSendFungiblesResponse{}
	this.SendReceipts = sendReceipts
	this.Transactions = transactions
	return &this
}

// NewTransactionSendFungiblesResponseWithDefaults instantiates a new TransactionSendFungiblesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSendFungiblesResponseWithDefaults() *TransactionSendFungiblesResponse {
	this := TransactionSendFungiblesResponse{}
	return &this
}

// GetSendReceipts returns the SendReceipts field value
func (o *TransactionSendFungiblesResponse) GetSendReceipts() []TransactionSendFungiblesReceipt {
	if o == nil {
		var ret []TransactionSendFungiblesReceipt
		return ret
	}

	return o.SendReceipts
}

// GetSendReceiptsOk returns a tuple with the SendReceipts field value
// and a boolean to check if the value has been set.
func (o *TransactionSendFungiblesResponse) GetSendReceiptsOk() ([]TransactionSendFungiblesReceipt, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendReceipts, true
}

// SetSendReceipts sets field value
func (o *TransactionSendFungiblesResponse) SetSendReceipts(v []TransactionSendFungiblesReceipt) {
	o.SendReceipts = v
}

// GetTransactions returns the Transactions field value
func (o *TransactionSendFungiblesResponse) GetTransactions() []TransactionSendTxInfo {
	if o == nil {
		var ret []TransactionSendTxInfo
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *TransactionSendFungiblesResponse) GetTransactionsOk() ([]TransactionSendTxInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transactions, true
}

// SetTransactions sets field value
func (o *TransactionSendFungiblesResponse) SetTransactions(v []TransactionSendTxInfo) {
	o.Transactions = v
}

func (o TransactionSendFungiblesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSendFungiblesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["send_receipts"] = o.SendReceipts
	toSerialize["transactions"] = o.Transactions
	return toSerialize, nil
}

func (o *TransactionSendFungiblesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"send_receipts",
		"transactions",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTransactionSendFungiblesResponse := _TransactionSendFungiblesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionSendFungiblesResponse)

	if err != nil {
		return err
	}

	*o = TransactionSendFungiblesResponse(varTransactionSendFungiblesResponse)

	return err
}

type NullableTransactionSendFungiblesResponse struct {
	value *TransactionSendFungiblesResponse
	isSet bool
}

func (v NullableTransactionSendFungiblesResponse) Get() *TransactionSendFungiblesResponse {
	return v.value
}

func (v *NullableTransactionSendFungiblesResponse) Set(val *TransactionSendFungiblesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSendFungiblesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSendFungiblesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSendFungiblesResponse(val *TransactionSendFungiblesResponse) *NullableTransactionSendFungiblesResponse {
	return &NullableTransactionSendFungiblesResponse{value: val, isSet: true}
}

func (v NullableTransactionSendFungiblesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSendFungiblesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

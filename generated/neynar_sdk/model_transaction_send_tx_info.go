/*
Neynar API

The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 3.0.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionSendTxInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSendTxInfo{}

// TransactionSendTxInfo struct for TransactionSendTxInfo
type TransactionSendTxInfo struct {
	Network         string `json:"network"`
	TransactionHash string `json:"transaction_hash"`
	// Gas used for the transaction.
	GasUsed string `json:"gas_used"`
	// Hash of the transaction that approved the transfer. This is only present if the fungible token is not native token of the network.
	ApprovalHash string `json:"approval_hash"`
}

type _TransactionSendTxInfo TransactionSendTxInfo

// NewTransactionSendTxInfo instantiates a new TransactionSendTxInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSendTxInfo(network string, transactionHash string, gasUsed string, approvalHash string) *TransactionSendTxInfo {
	this := TransactionSendTxInfo{}
	this.Network = network
	this.TransactionHash = transactionHash
	this.GasUsed = gasUsed
	this.ApprovalHash = approvalHash
	return &this
}

// NewTransactionSendTxInfoWithDefaults instantiates a new TransactionSendTxInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSendTxInfoWithDefaults() *TransactionSendTxInfo {
	this := TransactionSendTxInfo{}
	return &this
}

// GetNetwork returns the Network field value
func (o *TransactionSendTxInfo) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *TransactionSendTxInfo) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *TransactionSendTxInfo) SetNetwork(v string) {
	o.Network = v
}

// GetTransactionHash returns the TransactionHash field value
func (o *TransactionSendTxInfo) GetTransactionHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value
// and a boolean to check if the value has been set.
func (o *TransactionSendTxInfo) GetTransactionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionHash, true
}

// SetTransactionHash sets field value
func (o *TransactionSendTxInfo) SetTransactionHash(v string) {
	o.TransactionHash = v
}

// GetGasUsed returns the GasUsed field value
func (o *TransactionSendTxInfo) GetGasUsed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value
// and a boolean to check if the value has been set.
func (o *TransactionSendTxInfo) GetGasUsedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasUsed, true
}

// SetGasUsed sets field value
func (o *TransactionSendTxInfo) SetGasUsed(v string) {
	o.GasUsed = v
}

// GetApprovalHash returns the ApprovalHash field value
func (o *TransactionSendTxInfo) GetApprovalHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApprovalHash
}

// GetApprovalHashOk returns a tuple with the ApprovalHash field value
// and a boolean to check if the value has been set.
func (o *TransactionSendTxInfo) GetApprovalHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApprovalHash, true
}

// SetApprovalHash sets field value
func (o *TransactionSendTxInfo) SetApprovalHash(v string) {
	o.ApprovalHash = v
}

func (o TransactionSendTxInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSendTxInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network"] = o.Network
	toSerialize["transaction_hash"] = o.TransactionHash
	toSerialize["gas_used"] = o.GasUsed
	toSerialize["approval_hash"] = o.ApprovalHash
	return toSerialize, nil
}

func (o *TransactionSendTxInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network",
		"transaction_hash",
		"gas_used",
		"approval_hash",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTransactionSendTxInfo := _TransactionSendTxInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionSendTxInfo)

	if err != nil {
		return err
	}

	*o = TransactionSendTxInfo(varTransactionSendTxInfo)

	return err
}

type NullableTransactionSendTxInfo struct {
	value *TransactionSendTxInfo
	isSet bool
}

func (v NullableTransactionSendTxInfo) Get() *TransactionSendTxInfo {
	return v.value
}

func (v *NullableTransactionSendTxInfo) Set(val *TransactionSendTxInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSendTxInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSendTxInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSendTxInfo(val *TransactionSendTxInfo) *NullableTransactionSendTxInfo {
	return &NullableTransactionSendTxInfo{value: val, isSet: true}
}

func (v NullableTransactionSendTxInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSendTxInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.2
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FarcasterManifestAccountAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarcasterManifestAccountAssociation{}

// FarcasterManifestAccountAssociation struct for FarcasterManifestAccountAssociation
type FarcasterManifestAccountAssociation struct {
	Header    string `json:"header"`
	Payload   string `json:"payload"`
	Signature string `json:"signature"`
}

type _FarcasterManifestAccountAssociation FarcasterManifestAccountAssociation

// NewFarcasterManifestAccountAssociation instantiates a new FarcasterManifestAccountAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarcasterManifestAccountAssociation(header string, payload string, signature string) *FarcasterManifestAccountAssociation {
	this := FarcasterManifestAccountAssociation{}
	this.Header = header
	this.Payload = payload
	this.Signature = signature
	return &this
}

// NewFarcasterManifestAccountAssociationWithDefaults instantiates a new FarcasterManifestAccountAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarcasterManifestAccountAssociationWithDefaults() *FarcasterManifestAccountAssociation {
	this := FarcasterManifestAccountAssociation{}
	return &this
}

// GetHeader returns the Header field value
func (o *FarcasterManifestAccountAssociation) GetHeader() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Header
}

// GetHeaderOk returns a tuple with the Header field value
// and a boolean to check if the value has been set.
func (o *FarcasterManifestAccountAssociation) GetHeaderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Header, true
}

// SetHeader sets field value
func (o *FarcasterManifestAccountAssociation) SetHeader(v string) {
	o.Header = v
}

// GetPayload returns the Payload field value
func (o *FarcasterManifestAccountAssociation) GetPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *FarcasterManifestAccountAssociation) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *FarcasterManifestAccountAssociation) SetPayload(v string) {
	o.Payload = v
}

// GetSignature returns the Signature field value
func (o *FarcasterManifestAccountAssociation) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *FarcasterManifestAccountAssociation) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *FarcasterManifestAccountAssociation) SetSignature(v string) {
	o.Signature = v
}

func (o FarcasterManifestAccountAssociation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarcasterManifestAccountAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["header"] = o.Header
	toSerialize["payload"] = o.Payload
	toSerialize["signature"] = o.Signature
	return toSerialize, nil
}

func (o *FarcasterManifestAccountAssociation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"header",
		"payload",
		"signature",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFarcasterManifestAccountAssociation := _FarcasterManifestAccountAssociation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarcasterManifestAccountAssociation)

	if err != nil {
		return err
	}

	*o = FarcasterManifestAccountAssociation(varFarcasterManifestAccountAssociation)

	return err
}

type NullableFarcasterManifestAccountAssociation struct {
	value *FarcasterManifestAccountAssociation
	isSet bool
}

func (v NullableFarcasterManifestAccountAssociation) Get() *FarcasterManifestAccountAssociation {
	return v.value
}

func (v *NullableFarcasterManifestAccountAssociation) Set(val *FarcasterManifestAccountAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableFarcasterManifestAccountAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableFarcasterManifestAccountAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarcasterManifestAccountAssociation(val *FarcasterManifestAccountAssociation) *NullableFarcasterManifestAccountAssociation {
	return &NullableFarcasterManifestAccountAssociation{value: val, isSet: true}
}

func (v NullableFarcasterManifestAccountAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarcasterManifestAccountAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

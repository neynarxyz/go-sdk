/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.43.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionSendFungiblesRecipient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSendFungiblesRecipient{}

// TransactionSendFungiblesRecipient struct for TransactionSendFungiblesRecipient
type TransactionSendFungiblesRecipient struct {
	// The unique identifier of a farcaster user (unsigned integer)
	Fid int32 `json:"fid"`
	// Amount to send (must be greater than 0)
	Amount float32 `json:"amount"`
}

type _TransactionSendFungiblesRecipient TransactionSendFungiblesRecipient

// NewTransactionSendFungiblesRecipient instantiates a new TransactionSendFungiblesRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSendFungiblesRecipient(fid int32, amount float32) *TransactionSendFungiblesRecipient {
	this := TransactionSendFungiblesRecipient{}
	this.Fid = fid
	this.Amount = amount
	return &this
}

// NewTransactionSendFungiblesRecipientWithDefaults instantiates a new TransactionSendFungiblesRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSendFungiblesRecipientWithDefaults() *TransactionSendFungiblesRecipient {
	this := TransactionSendFungiblesRecipient{}
	return &this
}

// GetFid returns the Fid field value
func (o *TransactionSendFungiblesRecipient) GetFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Fid
}

// GetFidOk returns a tuple with the Fid field value
// and a boolean to check if the value has been set.
func (o *TransactionSendFungiblesRecipient) GetFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fid, true
}

// SetFid sets field value
func (o *TransactionSendFungiblesRecipient) SetFid(v int32) {
	o.Fid = v
}

// GetAmount returns the Amount field value
func (o *TransactionSendFungiblesRecipient) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionSendFungiblesRecipient) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionSendFungiblesRecipient) SetAmount(v float32) {
	o.Amount = v
}

func (o TransactionSendFungiblesRecipient) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSendFungiblesRecipient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fid"] = o.Fid
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *TransactionSendFungiblesRecipient) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fid",
		"amount",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTransactionSendFungiblesRecipient := _TransactionSendFungiblesRecipient{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionSendFungiblesRecipient)

	if err != nil {
		return err
	}

	*o = TransactionSendFungiblesRecipient(varTransactionSendFungiblesRecipient)

	return err
}

type NullableTransactionSendFungiblesRecipient struct {
	value *TransactionSendFungiblesRecipient
	isSet bool
}

func (v NullableTransactionSendFungiblesRecipient) Get() *TransactionSendFungiblesRecipient {
	return v.value
}

func (v *NullableTransactionSendFungiblesRecipient) Set(val *TransactionSendFungiblesRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSendFungiblesRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSendFungiblesRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSendFungiblesRecipient(val *TransactionSendFungiblesRecipient) *NullableTransactionSendFungiblesRecipient {
	return &NullableTransactionSendFungiblesRecipient{value: val, isSet: true}
}

func (v NullableTransactionSendFungiblesRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSendFungiblesRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.42.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FarcasterManifest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarcasterManifest{}

// FarcasterManifest struct for FarcasterManifest
type FarcasterManifest struct {
	AccountAssociation FarcasterManifestAccountAssociation `json:"account_association"`
	Frame              *FarcasterManifestFrame             `json:"frame,omitempty"`
}

type _FarcasterManifest FarcasterManifest

// NewFarcasterManifest instantiates a new FarcasterManifest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarcasterManifest(accountAssociation FarcasterManifestAccountAssociation) *FarcasterManifest {
	this := FarcasterManifest{}
	this.AccountAssociation = accountAssociation
	return &this
}

// NewFarcasterManifestWithDefaults instantiates a new FarcasterManifest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarcasterManifestWithDefaults() *FarcasterManifest {
	this := FarcasterManifest{}
	return &this
}

// GetAccountAssociation returns the AccountAssociation field value
func (o *FarcasterManifest) GetAccountAssociation() FarcasterManifestAccountAssociation {
	if o == nil {
		var ret FarcasterManifestAccountAssociation
		return ret
	}

	return o.AccountAssociation
}

// GetAccountAssociationOk returns a tuple with the AccountAssociation field value
// and a boolean to check if the value has been set.
func (o *FarcasterManifest) GetAccountAssociationOk() (*FarcasterManifestAccountAssociation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountAssociation, true
}

// SetAccountAssociation sets field value
func (o *FarcasterManifest) SetAccountAssociation(v FarcasterManifestAccountAssociation) {
	o.AccountAssociation = v
}

// GetFrame returns the Frame field value if set, zero value otherwise.
func (o *FarcasterManifest) GetFrame() FarcasterManifestFrame {
	if o == nil || IsNil(o.Frame) {
		var ret FarcasterManifestFrame
		return ret
	}
	return *o.Frame
}

// GetFrameOk returns a tuple with the Frame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarcasterManifest) GetFrameOk() (*FarcasterManifestFrame, bool) {
	if o == nil || IsNil(o.Frame) {
		return nil, false
	}
	return o.Frame, true
}

// HasFrame returns a boolean if a field has been set.
func (o *FarcasterManifest) HasFrame() bool {
	if o != nil && !IsNil(o.Frame) {
		return true
	}

	return false
}

// SetFrame gets a reference to the given FarcasterManifestFrame and assigns it to the Frame field.
func (o *FarcasterManifest) SetFrame(v FarcasterManifestFrame) {
	o.Frame = &v
}

func (o FarcasterManifest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarcasterManifest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_association"] = o.AccountAssociation
	if !IsNil(o.Frame) {
		toSerialize["frame"] = o.Frame
	}
	return toSerialize, nil
}

func (o *FarcasterManifest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_association",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFarcasterManifest := _FarcasterManifest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarcasterManifest)

	if err != nil {
		return err
	}

	*o = FarcasterManifest(varFarcasterManifest)

	return err
}

type NullableFarcasterManifest struct {
	value *FarcasterManifest
	isSet bool
}

func (v NullableFarcasterManifest) Get() *FarcasterManifest {
	return v.value
}

func (v *NullableFarcasterManifest) Set(val *FarcasterManifest) {
	v.value = val
	v.isSet = true
}

func (v NullableFarcasterManifest) IsSet() bool {
	return v.isSet
}

func (v *NullableFarcasterManifest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarcasterManifest(val *FarcasterManifest) *NullableFarcasterManifest {
	return &NullableFarcasterManifest{value: val, isSet: true}
}

func (v NullableFarcasterManifest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarcasterManifest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.35.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hub

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MergeOnChainEventBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeOnChainEventBody{}

// MergeOnChainEventBody struct for MergeOnChainEventBody
type MergeOnChainEventBody struct {
	OnChainEvent OnChainEvent `json:"onChainEvent"`
}

type _MergeOnChainEventBody MergeOnChainEventBody

// NewMergeOnChainEventBody instantiates a new MergeOnChainEventBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeOnChainEventBody(onChainEvent OnChainEvent) *MergeOnChainEventBody {
	this := MergeOnChainEventBody{}
	this.OnChainEvent = onChainEvent
	return &this
}

// NewMergeOnChainEventBodyWithDefaults instantiates a new MergeOnChainEventBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeOnChainEventBodyWithDefaults() *MergeOnChainEventBody {
	this := MergeOnChainEventBody{}
	return &this
}

// GetOnChainEvent returns the OnChainEvent field value
func (o *MergeOnChainEventBody) GetOnChainEvent() OnChainEvent {
	if o == nil {
		var ret OnChainEvent
		return ret
	}

	return o.OnChainEvent
}

// GetOnChainEventOk returns a tuple with the OnChainEvent field value
// and a boolean to check if the value has been set.
func (o *MergeOnChainEventBody) GetOnChainEventOk() (*OnChainEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnChainEvent, true
}

// SetOnChainEvent sets field value
func (o *MergeOnChainEventBody) SetOnChainEvent(v OnChainEvent) {
	o.OnChainEvent = v
}

func (o MergeOnChainEventBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeOnChainEventBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["onChainEvent"] = o.OnChainEvent
	return toSerialize, nil
}

func (o *MergeOnChainEventBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"onChainEvent",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varMergeOnChainEventBody := _MergeOnChainEventBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMergeOnChainEventBody)

	if err != nil {
		return err
	}

	*o = MergeOnChainEventBody(varMergeOnChainEventBody)

	return err
}

type NullableMergeOnChainEventBody struct {
	value *MergeOnChainEventBody
	isSet bool
}

func (v NullableMergeOnChainEventBody) Get() *MergeOnChainEventBody {
	return v.value
}

func (v *NullableMergeOnChainEventBody) Set(val *MergeOnChainEventBody) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeOnChainEventBody) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeOnChainEventBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeOnChainEventBody(val *MergeOnChainEventBody) *NullableMergeOnChainEventBody {
	return &NullableMergeOnChainEventBody{value: val, isSet: true}
}

func (v NullableMergeOnChainEventBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeOnChainEventBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

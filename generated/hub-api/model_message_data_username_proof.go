/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.35.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hub

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MessageDataUsernameProof type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageDataUsernameProof{}

// MessageDataUsernameProof struct for MessageDataUsernameProof
type MessageDataUsernameProof struct {
	Type *MessageType `json:"type,omitempty"`
	// The unique identifier (FID) of the user who created this message. FIDs are assigned sequentially when users register on the network and cannot be changed.
	Fid int32 `json:"fid"`
	// Seconds since Farcaster Epoch (2021-01-01T00:00:00Z). Used to order messages chronologically and determine the most recent state. Must be within 10 minutes of the current time when the message is created.
	Timestamp         int64            `json:"timestamp"`
	Network           FarcasterNetwork `json:"network"`
	UsernameProofBody UserNameProof    `json:"usernameProofBody"`
}

type _MessageDataUsernameProof MessageDataUsernameProof

// NewMessageDataUsernameProof instantiates a new MessageDataUsernameProof object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageDataUsernameProof(fid int32, timestamp int64, network FarcasterNetwork, usernameProofBody UserNameProof) *MessageDataUsernameProof {
	this := MessageDataUsernameProof{}
	var type_ MessageType = MESSAGETYPE_MESSAGE_TYPE_CAST_ADD
	this.Type = &type_
	this.Fid = fid
	this.Timestamp = timestamp
	this.Network = network
	this.UsernameProofBody = usernameProofBody
	return &this
}

// NewMessageDataUsernameProofWithDefaults instantiates a new MessageDataUsernameProof object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageDataUsernameProofWithDefaults() *MessageDataUsernameProof {
	this := MessageDataUsernameProof{}
	var type_ MessageType = MESSAGETYPE_MESSAGE_TYPE_CAST_ADD
	this.Type = &type_
	var network FarcasterNetwork = FARCASTERNETWORK_FARCASTER_NETWORK_MAINNET
	this.Network = network
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MessageDataUsernameProof) GetType() MessageType {
	if o == nil || IsNil(o.Type) {
		var ret MessageType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDataUsernameProof) GetTypeOk() (*MessageType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MessageDataUsernameProof) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given MessageType and assigns it to the Type field.
func (o *MessageDataUsernameProof) SetType(v MessageType) {
	o.Type = &v
}

// GetFid returns the Fid field value
func (o *MessageDataUsernameProof) GetFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Fid
}

// GetFidOk returns a tuple with the Fid field value
// and a boolean to check if the value has been set.
func (o *MessageDataUsernameProof) GetFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fid, true
}

// SetFid sets field value
func (o *MessageDataUsernameProof) SetFid(v int32) {
	o.Fid = v
}

// GetTimestamp returns the Timestamp field value
func (o *MessageDataUsernameProof) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *MessageDataUsernameProof) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *MessageDataUsernameProof) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetNetwork returns the Network field value
func (o *MessageDataUsernameProof) GetNetwork() FarcasterNetwork {
	if o == nil {
		var ret FarcasterNetwork
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *MessageDataUsernameProof) GetNetworkOk() (*FarcasterNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *MessageDataUsernameProof) SetNetwork(v FarcasterNetwork) {
	o.Network = v
}

// GetDefaultNetwork returns the default value FARCASTERNETWORK_FARCASTER_NETWORK_MAINNET of the Network field.
func (o *MessageDataUsernameProof) GetDefaultNetwork() interface{} {
	return FARCASTERNETWORK_FARCASTER_NETWORK_MAINNET
}

// GetUsernameProofBody returns the UsernameProofBody field value
func (o *MessageDataUsernameProof) GetUsernameProofBody() UserNameProof {
	if o == nil {
		var ret UserNameProof
		return ret
	}

	return o.UsernameProofBody
}

// GetUsernameProofBodyOk returns a tuple with the UsernameProofBody field value
// and a boolean to check if the value has been set.
func (o *MessageDataUsernameProof) GetUsernameProofBodyOk() (*UserNameProof, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsernameProofBody, true
}

// SetUsernameProofBody sets field value
func (o *MessageDataUsernameProof) SetUsernameProofBody(v UserNameProof) {
	o.UsernameProofBody = v
}

func (o MessageDataUsernameProof) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageDataUsernameProof) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["fid"] = o.Fid
	toSerialize["timestamp"] = o.Timestamp
	if _, exists := toSerialize["network"]; !exists {
		toSerialize["network"] = o.GetDefaultNetwork()
	}
	toSerialize["network"] = o.Network
	toSerialize["usernameProofBody"] = o.UsernameProofBody
	return toSerialize, nil
}

func (o *MessageDataUsernameProof) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fid",
		"timestamp",
		"network",
		"usernameProofBody",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"network": o.GetDefaultNetwork,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varMessageDataUsernameProof := _MessageDataUsernameProof{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageDataUsernameProof)

	if err != nil {
		return err
	}

	*o = MessageDataUsernameProof(varMessageDataUsernameProof)

	return err
}

type NullableMessageDataUsernameProof struct {
	value *MessageDataUsernameProof
	isSet bool
}

func (v NullableMessageDataUsernameProof) Get() *MessageDataUsernameProof {
	return v.value
}

func (v *NullableMessageDataUsernameProof) Set(val *MessageDataUsernameProof) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageDataUsernameProof) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageDataUsernameProof) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageDataUsernameProof(val *MessageDataUsernameProof) *NullableMessageDataUsernameProof {
	return &NullableMessageDataUsernameProof{value: val, isSet: true}
}

func (v NullableMessageDataUsernameProof) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageDataUsernameProof) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.35.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_hub_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type OnChainEventsAPI interface {

	/*
		FetchUserOnChainEvents Fetch a list of on-chain events provided by an FID

		Fetch on-chain events provided by a user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchUserOnChainEventsRequest
	*/
	FetchUserOnChainEvents(ctx context.Context) ApiFetchUserOnChainEventsRequest

	// FetchUserOnChainEventsExecute executes the request
	//  @return FetchUserOnChainEvents200Response
	FetchUserOnChainEventsExecute(r ApiFetchUserOnChainEventsRequest) (*FetchUserOnChainEvents200Response, *http.Response, error)

	/*
		FetchUserOnChainSignersEvents Fetch a list of signers provided by an FID

		**Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchUserOnChainSignersEventsRequest
	*/
	FetchUserOnChainSignersEvents(ctx context.Context) ApiFetchUserOnChainSignersEventsRequest

	// FetchUserOnChainSignersEventsExecute executes the request
	//  @return FetchUserOnChainSignersEvents200Response
	FetchUserOnChainSignersEventsExecute(r ApiFetchUserOnChainSignersEventsRequest) (*FetchUserOnChainSignersEvents200Response, *http.Response, error)

	/*
		LookupOnChainIdRegistryEventByAddress Fetch an on-chain ID Registry Event for a given Address

		Fetch an on-chain ID Registry Event for a given Address.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiLookupOnChainIdRegistryEventByAddressRequest
	*/
	LookupOnChainIdRegistryEventByAddress(ctx context.Context) ApiLookupOnChainIdRegistryEventByAddressRequest

	// LookupOnChainIdRegistryEventByAddressExecute executes the request
	//  @return OnChainEventIdRegister
	LookupOnChainIdRegistryEventByAddressExecute(r ApiLookupOnChainIdRegistryEventByAddressRequest) (*OnChainEventIdRegister, *http.Response, error)
}

// OnChainEventsAPIService OnChainEventsAPI service
type OnChainEventsAPIService service

type ApiFetchUserOnChainEventsRequest struct {
	ctx        context.Context
	ApiService OnChainEventsAPI
	fid        *int32
	eventType  *OnChainEventType
}

// The FID being requested
func (r ApiFetchUserOnChainEventsRequest) Fid(fid int32) ApiFetchUserOnChainEventsRequest {
	r.fid = &fid
	return r
}

// The numeric or string value of the event type being requested
func (r ApiFetchUserOnChainEventsRequest) EventType(eventType OnChainEventType) ApiFetchUserOnChainEventsRequest {
	r.eventType = &eventType
	return r
}

func (r ApiFetchUserOnChainEventsRequest) Execute() (*FetchUserOnChainEvents200Response, *http.Response, error) {
	return r.ApiService.FetchUserOnChainEventsExecute(r)
}

/*
FetchUserOnChainEvents Fetch a list of on-chain events provided by an FID

Fetch on-chain events provided by a user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchUserOnChainEventsRequest
*/
func (a *OnChainEventsAPIService) FetchUserOnChainEvents(ctx context.Context) ApiFetchUserOnChainEventsRequest {
	return ApiFetchUserOnChainEventsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FetchUserOnChainEvents200Response
func (a *OnChainEventsAPIService) FetchUserOnChainEventsExecute(r ApiFetchUserOnChainEventsRequest) (*FetchUserOnChainEvents200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FetchUserOnChainEvents200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnChainEventsAPIService.FetchUserOnChainEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/onChainEventsByFid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if r.eventType == nil {
		return localVarReturnValue, nil, reportError("eventType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "event_type", r.eventType, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchUserOnChainSignersEventsRequest struct {
	ctx        context.Context
	ApiService OnChainEventsAPI
	fid        *int32
	signer     *string
}

// The FID being requested
func (r ApiFetchUserOnChainSignersEventsRequest) Fid(fid int32) ApiFetchUserOnChainSignersEventsRequest {
	r.fid = &fid
	return r
}

// The optional key of signer
func (r ApiFetchUserOnChainSignersEventsRequest) Signer(signer string) ApiFetchUserOnChainSignersEventsRequest {
	r.signer = &signer
	return r
}

func (r ApiFetchUserOnChainSignersEventsRequest) Execute() (*FetchUserOnChainSignersEvents200Response, *http.Response, error) {
	return r.ApiService.FetchUserOnChainSignersEventsExecute(r)
}

/*
FetchUserOnChainSignersEvents Fetch a list of signers provided by an FID

**Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchUserOnChainSignersEventsRequest
*/
func (a *OnChainEventsAPIService) FetchUserOnChainSignersEvents(ctx context.Context) ApiFetchUserOnChainSignersEventsRequest {
	return ApiFetchUserOnChainSignersEventsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FetchUserOnChainSignersEvents200Response
func (a *OnChainEventsAPIService) FetchUserOnChainSignersEventsExecute(r ApiFetchUserOnChainSignersEventsRequest) (*FetchUserOnChainSignersEvents200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FetchUserOnChainSignersEvents200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnChainEventsAPIService.FetchUserOnChainSignersEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/onChainSignersByFid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	if r.signer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "signer", r.signer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLookupOnChainIdRegistryEventByAddressRequest struct {
	ctx        context.Context
	ApiService OnChainEventsAPI
	address    *string
}

// The ETH address being requested
func (r ApiLookupOnChainIdRegistryEventByAddressRequest) Address(address string) ApiLookupOnChainIdRegistryEventByAddressRequest {
	r.address = &address
	return r
}

func (r ApiLookupOnChainIdRegistryEventByAddressRequest) Execute() (*OnChainEventIdRegister, *http.Response, error) {
	return r.ApiService.LookupOnChainIdRegistryEventByAddressExecute(r)
}

/*
LookupOnChainIdRegistryEventByAddress Fetch an on-chain ID Registry Event for a given Address

Fetch an on-chain ID Registry Event for a given Address.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiLookupOnChainIdRegistryEventByAddressRequest
*/
func (a *OnChainEventsAPIService) LookupOnChainIdRegistryEventByAddress(ctx context.Context) ApiLookupOnChainIdRegistryEventByAddressRequest {
	return ApiLookupOnChainIdRegistryEventByAddressRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OnChainEventIdRegister
func (a *OnChainEventsAPIService) LookupOnChainIdRegistryEventByAddressExecute(r ApiLookupOnChainIdRegistryEventByAddressRequest) (*OnChainEventIdRegister, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnChainEventIdRegister
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnChainEventsAPIService.LookupOnChainIdRegistryEventByAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/onChainIdRegistryEventByAddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.address == nil {
		return localVarReturnValue, nil, reportError("address is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

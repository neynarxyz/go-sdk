/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.35.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_hub_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FetchUserData200ResponseOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchUserData200ResponseOneOf{}

// FetchUserData200ResponseOneOf struct for FetchUserData200ResponseOneOf
type FetchUserData200ResponseOneOf struct {
	// Base64-encoded pagination token for fetching the next page of results. An empty value indicates there are no more pages to return. Used in conjunction with the pageSize parameter to implement pagination across large result sets.
	NextPageToken string        `json:"nextPageToken" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	Messages      []UserDataAdd `json:"messages"`
}

type _FetchUserData200ResponseOneOf FetchUserData200ResponseOneOf

// NewFetchUserData200ResponseOneOf instantiates a new FetchUserData200ResponseOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchUserData200ResponseOneOf(nextPageToken string, messages []UserDataAdd) *FetchUserData200ResponseOneOf {
	this := FetchUserData200ResponseOneOf{}
	this.NextPageToken = nextPageToken
	this.Messages = messages
	return &this
}

// NewFetchUserData200ResponseOneOfWithDefaults instantiates a new FetchUserData200ResponseOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchUserData200ResponseOneOfWithDefaults() *FetchUserData200ResponseOneOf {
	this := FetchUserData200ResponseOneOf{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value
func (o *FetchUserData200ResponseOneOf) GetNextPageToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value
// and a boolean to check if the value has been set.
func (o *FetchUserData200ResponseOneOf) GetNextPageTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextPageToken, true
}

// SetNextPageToken sets field value
func (o *FetchUserData200ResponseOneOf) SetNextPageToken(v string) {
	o.NextPageToken = v
}

// GetMessages returns the Messages field value
func (o *FetchUserData200ResponseOneOf) GetMessages() []UserDataAdd {
	if o == nil {
		var ret []UserDataAdd
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *FetchUserData200ResponseOneOf) GetMessagesOk() ([]UserDataAdd, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *FetchUserData200ResponseOneOf) SetMessages(v []UserDataAdd) {
	o.Messages = v
}

func (o FetchUserData200ResponseOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchUserData200ResponseOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nextPageToken"] = o.NextPageToken
	toSerialize["messages"] = o.Messages
	return toSerialize, nil
}

func (o *FetchUserData200ResponseOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nextPageToken",
		"messages",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFetchUserData200ResponseOneOf := _FetchUserData200ResponseOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFetchUserData200ResponseOneOf)

	if err != nil {
		return err
	}

	*o = FetchUserData200ResponseOneOf(varFetchUserData200ResponseOneOf)

	return err
}

type NullableFetchUserData200ResponseOneOf struct {
	value *FetchUserData200ResponseOneOf
	isSet bool
}

func (v NullableFetchUserData200ResponseOneOf) Get() *FetchUserData200ResponseOneOf {
	return v.value
}

func (v *NullableFetchUserData200ResponseOneOf) Set(val *FetchUserData200ResponseOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchUserData200ResponseOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchUserData200ResponseOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchUserData200ResponseOneOf(val *FetchUserData200ResponseOneOf) *NullableFetchUserData200ResponseOneOf {
	return &NullableFetchUserData200ResponseOneOf{value: val, isSet: true}
}

func (v NullableFetchUserData200ResponseOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchUserData200ResponseOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

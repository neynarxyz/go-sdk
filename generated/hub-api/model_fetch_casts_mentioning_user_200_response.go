/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.35.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_hub_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FetchCastsMentioningUser200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchCastsMentioningUser200Response{}

// FetchCastsMentioningUser200Response struct for FetchCastsMentioningUser200Response
type FetchCastsMentioningUser200Response struct {
	// Base64-encoded pagination token for fetching the next page of results. An empty value indicates there are no more pages to return. Used in conjunction with the pageSize parameter to implement pagination across large result sets.
	NextPageToken string    `json:"nextPageToken" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	Messages      []CastAdd `json:"messages"`
}

type _FetchCastsMentioningUser200Response FetchCastsMentioningUser200Response

// NewFetchCastsMentioningUser200Response instantiates a new FetchCastsMentioningUser200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchCastsMentioningUser200Response(nextPageToken string, messages []CastAdd) *FetchCastsMentioningUser200Response {
	this := FetchCastsMentioningUser200Response{}
	this.NextPageToken = nextPageToken
	this.Messages = messages
	return &this
}

// NewFetchCastsMentioningUser200ResponseWithDefaults instantiates a new FetchCastsMentioningUser200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchCastsMentioningUser200ResponseWithDefaults() *FetchCastsMentioningUser200Response {
	this := FetchCastsMentioningUser200Response{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value
func (o *FetchCastsMentioningUser200Response) GetNextPageToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value
// and a boolean to check if the value has been set.
func (o *FetchCastsMentioningUser200Response) GetNextPageTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextPageToken, true
}

// SetNextPageToken sets field value
func (o *FetchCastsMentioningUser200Response) SetNextPageToken(v string) {
	o.NextPageToken = v
}

// GetMessages returns the Messages field value
func (o *FetchCastsMentioningUser200Response) GetMessages() []CastAdd {
	if o == nil {
		var ret []CastAdd
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *FetchCastsMentioningUser200Response) GetMessagesOk() ([]CastAdd, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *FetchCastsMentioningUser200Response) SetMessages(v []CastAdd) {
	o.Messages = v
}

func (o FetchCastsMentioningUser200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchCastsMentioningUser200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nextPageToken"] = o.NextPageToken
	toSerialize["messages"] = o.Messages
	return toSerialize, nil
}

func (o *FetchCastsMentioningUser200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nextPageToken",
		"messages",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFetchCastsMentioningUser200Response := _FetchCastsMentioningUser200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFetchCastsMentioningUser200Response)

	if err != nil {
		return err
	}

	*o = FetchCastsMentioningUser200Response(varFetchCastsMentioningUser200Response)

	return err
}

type NullableFetchCastsMentioningUser200Response struct {
	value *FetchCastsMentioningUser200Response
	isSet bool
}

func (v NullableFetchCastsMentioningUser200Response) Get() *FetchCastsMentioningUser200Response {
	return v.value
}

func (v *NullableFetchCastsMentioningUser200Response) Set(val *FetchCastsMentioningUser200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchCastsMentioningUser200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchCastsMentioningUser200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchCastsMentioningUser200Response(val *FetchCastsMentioningUser200Response) *NullableFetchCastsMentioningUser200Response {
	return &NullableFetchCastsMentioningUser200Response{value: val, isSet: true}
}

func (v NullableFetchCastsMentioningUser200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchCastsMentioningUser200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

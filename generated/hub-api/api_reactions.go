/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.35.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_hub_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type ReactionsAPI interface {

	/*
		FetchCastReactions On cast

		Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator's FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchCastReactionsRequest
	*/
	FetchCastReactions(ctx context.Context) ApiFetchCastReactionsRequest

	// FetchCastReactionsExecute executes the request
	//  @return FetchCastReactions200Response
	FetchCastReactionsExecute(r ApiFetchCastReactionsRequest) (*FetchCastReactions200Response, *http.Response, error)

	/*
		FetchReactionsByTarget To a target URL

		Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchReactionsByTargetRequest
	*/
	FetchReactionsByTarget(ctx context.Context) ApiFetchReactionsByTargetRequest

	// FetchReactionsByTargetExecute executes the request
	//  @return FetchReactionsByTarget200Response
	FetchReactionsByTargetExecute(r ApiFetchReactionsByTargetRequest) (*FetchReactionsByTarget200Response, *http.Response, error)

	/*
		FetchUserReactions By FID

		Fetch reactions by a user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchUserReactionsRequest
	*/
	FetchUserReactions(ctx context.Context) ApiFetchUserReactionsRequest

	// FetchUserReactionsExecute executes the request
	//  @return FetchUserReactions200Response
	FetchUserReactionsExecute(r ApiFetchUserReactionsRequest) (*FetchUserReactions200Response, *http.Response, error)

	/*
		LookupReactionById By FID or cast

		Lookup a reaction by its FID or cast.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiLookupReactionByIdRequest
	*/
	LookupReactionById(ctx context.Context) ApiLookupReactionByIdRequest

	// LookupReactionByIdExecute executes the request
	//  @return Reaction
	LookupReactionByIdExecute(r ApiLookupReactionByIdRequest) (*Reaction, *http.Response, error)
}

// ReactionsAPIService ReactionsAPI service
type ReactionsAPIService service

type ApiFetchCastReactionsRequest struct {
	ctx          context.Context
	ApiService   ReactionsAPI
	targetFid    *int32
	targetHash   *string
	reactionType *ReactionType
	pageSize     *int32
	reverse      *bool
	pageToken    *string
}

// The FID of the cast&#39;s creator. Required to uniquely identify the cast that received the reactions. Must be used in conjunction with target_hash.
func (r ApiFetchCastReactionsRequest) TargetFid(targetFid int32) ApiFetchCastReactionsRequest {
	r.targetFid = &targetFid
	return r
}

// The unique hash identifier of the cast that received the reactions. This is a 40-character hexadecimal string prefixed with &#39;0x&#39; that uniquely identifies the cast within the creator&#39;s posts. Must be used with target_fid.
func (r ApiFetchCastReactionsRequest) TargetHash(targetHash string) ApiFetchCastReactionsRequest {
	r.targetHash = &targetHash
	return r
}

func (r ApiFetchCastReactionsRequest) ReactionType(reactionType ReactionType) ApiFetchCastReactionsRequest {
	r.reactionType = &reactionType
	return r
}

// Maximum number of messages to return in a single response
func (r ApiFetchCastReactionsRequest) PageSize(pageSize int32) ApiFetchCastReactionsRequest {
	r.pageSize = &pageSize
	return r
}

// Reverse the sort order, returning latest messages first
func (r ApiFetchCastReactionsRequest) Reverse(reverse bool) ApiFetchCastReactionsRequest {
	r.reverse = &reverse
	return r
}

// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
func (r ApiFetchCastReactionsRequest) PageToken(pageToken string) ApiFetchCastReactionsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiFetchCastReactionsRequest) Execute() (*FetchCastReactions200Response, *http.Response, error) {
	return r.ApiService.FetchCastReactionsExecute(r)
}

/*
FetchCastReactions On cast

Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator's FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchCastReactionsRequest
*/
func (a *ReactionsAPIService) FetchCastReactions(ctx context.Context) ApiFetchCastReactionsRequest {
	return ApiFetchCastReactionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FetchCastReactions200Response
func (a *ReactionsAPIService) FetchCastReactionsExecute(r ApiFetchCastReactionsRequest) (*FetchCastReactions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FetchCastReactions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReactionsAPIService.FetchCastReactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reactionsByCast"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.targetFid == nil {
		return localVarReturnValue, nil, reportError("targetFid is required and must be specified")
	}
	if *r.targetFid < 1 {
		return localVarReturnValue, nil, reportError("targetFid must be greater than 1")
	}
	if r.targetHash == nil {
		return localVarReturnValue, nil, reportError("targetHash is required and must be specified")
	}
	if r.reactionType == nil {
		return localVarReturnValue, nil, reportError("reactionType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "target_fid", r.targetFid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "target_hash", r.targetHash, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "reaction_type", r.reactionType, "form", "")
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.reverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse", r.reverse, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchReactionsByTargetRequest struct {
	ctx          context.Context
	ApiService   ReactionsAPI
	url          *string
	reactionType *ReactionType
	pageSize     *int32
	reverse      *bool
	pageToken    *string
}

// Target URL starting with &#39;chain://&#39;.
func (r ApiFetchReactionsByTargetRequest) Url(url string) ApiFetchReactionsByTargetRequest {
	r.url = &url
	return r
}

func (r ApiFetchReactionsByTargetRequest) ReactionType(reactionType ReactionType) ApiFetchReactionsByTargetRequest {
	r.reactionType = &reactionType
	return r
}

// Maximum number of messages to return in a single response
func (r ApiFetchReactionsByTargetRequest) PageSize(pageSize int32) ApiFetchReactionsByTargetRequest {
	r.pageSize = &pageSize
	return r
}

// Reverse the sort order, returning latest messages first
func (r ApiFetchReactionsByTargetRequest) Reverse(reverse bool) ApiFetchReactionsByTargetRequest {
	r.reverse = &reverse
	return r
}

// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
func (r ApiFetchReactionsByTargetRequest) PageToken(pageToken string) ApiFetchReactionsByTargetRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiFetchReactionsByTargetRequest) Execute() (*FetchReactionsByTarget200Response, *http.Response, error) {
	return r.ApiService.FetchReactionsByTargetExecute(r)
}

/*
FetchReactionsByTarget To a target URL

Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchReactionsByTargetRequest
*/
func (a *ReactionsAPIService) FetchReactionsByTarget(ctx context.Context) ApiFetchReactionsByTargetRequest {
	return ApiFetchReactionsByTargetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FetchReactionsByTarget200Response
func (a *ReactionsAPIService) FetchReactionsByTargetExecute(r ApiFetchReactionsByTargetRequest) (*FetchReactionsByTarget200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FetchReactionsByTarget200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReactionsAPIService.FetchReactionsByTarget")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reactionsByTarget"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.url == nil {
		return localVarReturnValue, nil, reportError("url is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "url", r.url, "form", "")
	if r.reactionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reaction_type", r.reactionType, "form", "")
	} else {
		var defaultValue ReactionType = "REACTION_TYPE_LIKE"
		r.reactionType = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.reverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse", r.reverse, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchUserReactionsRequest struct {
	ctx          context.Context
	ApiService   ReactionsAPI
	fid          *int32
	reactionType *ReactionType
	pageSize     *int32
	reverse      *bool
	pageToken    *string
}

// The FID of the reaction&#39;s creator
func (r ApiFetchUserReactionsRequest) Fid(fid int32) ApiFetchUserReactionsRequest {
	r.fid = &fid
	return r
}

func (r ApiFetchUserReactionsRequest) ReactionType(reactionType ReactionType) ApiFetchUserReactionsRequest {
	r.reactionType = &reactionType
	return r
}

// Maximum number of messages to return in a single response
func (r ApiFetchUserReactionsRequest) PageSize(pageSize int32) ApiFetchUserReactionsRequest {
	r.pageSize = &pageSize
	return r
}

// Reverse the sort order, returning latest messages first
func (r ApiFetchUserReactionsRequest) Reverse(reverse bool) ApiFetchUserReactionsRequest {
	r.reverse = &reverse
	return r
}

// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
func (r ApiFetchUserReactionsRequest) PageToken(pageToken string) ApiFetchUserReactionsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiFetchUserReactionsRequest) Execute() (*FetchUserReactions200Response, *http.Response, error) {
	return r.ApiService.FetchUserReactionsExecute(r)
}

/*
FetchUserReactions By FID

Fetch reactions by a user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchUserReactionsRequest
*/
func (a *ReactionsAPIService) FetchUserReactions(ctx context.Context) ApiFetchUserReactionsRequest {
	return ApiFetchUserReactionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FetchUserReactions200Response
func (a *ReactionsAPIService) FetchUserReactionsExecute(r ApiFetchUserReactionsRequest) (*FetchUserReactions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FetchUserReactions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReactionsAPIService.FetchUserReactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reactionsByFid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if *r.fid < 1 {
		return localVarReturnValue, nil, reportError("fid must be greater than 1")
	}
	if r.reactionType == nil {
		return localVarReturnValue, nil, reportError("reactionType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "reaction_type", r.reactionType, "form", "")
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.reverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse", r.reverse, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLookupReactionByIdRequest struct {
	ctx          context.Context
	ApiService   ReactionsAPI
	fid          *int32
	targetFid    *int32
	targetHash   *string
	reactionType *ReactionType
}

// The FID of the reaction&#39;s creator
func (r ApiLookupReactionByIdRequest) Fid(fid int32) ApiLookupReactionByIdRequest {
	r.fid = &fid
	return r
}

// The FID of the cast&#39;s creator
func (r ApiLookupReactionByIdRequest) TargetFid(targetFid int32) ApiLookupReactionByIdRequest {
	r.targetFid = &targetFid
	return r
}

// The cast&#39;s hash
func (r ApiLookupReactionByIdRequest) TargetHash(targetHash string) ApiLookupReactionByIdRequest {
	r.targetHash = &targetHash
	return r
}

func (r ApiLookupReactionByIdRequest) ReactionType(reactionType ReactionType) ApiLookupReactionByIdRequest {
	r.reactionType = &reactionType
	return r
}

func (r ApiLookupReactionByIdRequest) Execute() (*Reaction, *http.Response, error) {
	return r.ApiService.LookupReactionByIdExecute(r)
}

/*
LookupReactionById By FID or cast

Lookup a reaction by its FID or cast.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiLookupReactionByIdRequest
*/
func (a *ReactionsAPIService) LookupReactionById(ctx context.Context) ApiLookupReactionByIdRequest {
	return ApiLookupReactionByIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Reaction
func (a *ReactionsAPIService) LookupReactionByIdExecute(r ApiLookupReactionByIdRequest) (*Reaction, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Reaction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReactionsAPIService.LookupReactionById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reactionById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if r.targetFid == nil {
		return localVarReturnValue, nil, reportError("targetFid is required and must be specified")
	}
	if r.targetHash == nil {
		return localVarReturnValue, nil, reportError("targetHash is required and must be specified")
	}
	if r.reactionType == nil {
		return localVarReturnValue, nil, reportError("reactionType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "target_fid", r.targetFid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "target_hash", r.targetHash, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "reaction_type", r.reactionType, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

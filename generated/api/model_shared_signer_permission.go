/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.36.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SharedSignerPermission the model 'SharedSignerPermission'
type SharedSignerPermission string

// List of SharedSignerPermission
const (
	SHAREDSIGNERPERMISSION_WRITE_ALL           SharedSignerPermission = "WRITE_ALL"
	SHAREDSIGNERPERMISSION_READ_ONLY           SharedSignerPermission = "READ_ONLY"
	SHAREDSIGNERPERMISSION_NONE                SharedSignerPermission = "NONE"
	SHAREDSIGNERPERMISSION_PUBLISH_CAST        SharedSignerPermission = "PUBLISH_CAST"
	SHAREDSIGNERPERMISSION_DELETE_CAST         SharedSignerPermission = "DELETE_CAST"
	SHAREDSIGNERPERMISSION_PUBLISH_REACTION    SharedSignerPermission = "PUBLISH_REACTION"
	SHAREDSIGNERPERMISSION_DELETE_REACTION     SharedSignerPermission = "DELETE_REACTION"
	SHAREDSIGNERPERMISSION_UPDATE_PROFILE      SharedSignerPermission = "UPDATE_PROFILE"
	SHAREDSIGNERPERMISSION_FOLLOW_USER         SharedSignerPermission = "FOLLOW_USER"
	SHAREDSIGNERPERMISSION_UNFOLLOW_USER       SharedSignerPermission = "UNFOLLOW_USER"
	SHAREDSIGNERPERMISSION_FOLLOW_CHANNEL      SharedSignerPermission = "FOLLOW_CHANNEL"
	SHAREDSIGNERPERMISSION_UNFOLLOW_CHANNEL    SharedSignerPermission = "UNFOLLOW_CHANNEL"
	SHAREDSIGNERPERMISSION_ADD_VERIFICATION    SharedSignerPermission = "ADD_VERIFICATION"
	SHAREDSIGNERPERMISSION_REMOVE_VERIFICATION SharedSignerPermission = "REMOVE_VERIFICATION"
	SHAREDSIGNERPERMISSION_WRITE_FRAME_ACTION  SharedSignerPermission = "WRITE_FRAME_ACTION"
)

// All allowed values of SharedSignerPermission enum
var AllowedSharedSignerPermissionEnumValues = []SharedSignerPermission{
	"WRITE_ALL",
	"READ_ONLY",
	"NONE",
	"PUBLISH_CAST",
	"DELETE_CAST",
	"PUBLISH_REACTION",
	"DELETE_REACTION",
	"UPDATE_PROFILE",
	"FOLLOW_USER",
	"UNFOLLOW_USER",
	"FOLLOW_CHANNEL",
	"UNFOLLOW_CHANNEL",
	"ADD_VERIFICATION",
	"REMOVE_VERIFICATION",
	"WRITE_FRAME_ACTION",
}

func (v *SharedSignerPermission) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SharedSignerPermission(value)
	for _, existing := range AllowedSharedSignerPermissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SharedSignerPermission", value)
}

// NewSharedSignerPermissionFromValue returns a pointer to a valid SharedSignerPermission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSharedSignerPermissionFromValue(v string) (*SharedSignerPermission, error) {
	ev := SharedSignerPermission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SharedSignerPermission: valid values are %v", v, AllowedSharedSignerPermissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SharedSignerPermission) IsValid() bool {
	for _, existing := range AllowedSharedSignerPermissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SharedSignerPermission value
func (v SharedSignerPermission) Ptr() *SharedSignerPermission {
	return &v
}

type NullableSharedSignerPermission struct {
	value *SharedSignerPermission
	isSet bool
}

func (v NullableSharedSignerPermission) Get() *SharedSignerPermission {
	return v.value
}

func (v *NullableSharedSignerPermission) Set(val *SharedSignerPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedSignerPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedSignerPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedSignerPermission(val *SharedSignerPermission) *NullableSharedSignerPermission {
	return &NullableSharedSignerPermission{value: val, isSet: true}
}

func (v NullableSharedSignerPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedSignerPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

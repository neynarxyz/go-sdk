/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserVerifiedAddressesPrimary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserVerifiedAddressesPrimary{}

// UserVerifiedAddressesPrimary struct for UserVerifiedAddressesPrimary
type UserVerifiedAddressesPrimary struct {
	// Ethereum address
	EthAddress NullableString `json:"eth_address" validate:"regexp=^0x[a-fA-F0-9]{40}$"`
	// Solana address
	SolAddress NullableString `json:"sol_address" validate:"regexp=^[1-9A-HJ-NP-Za-km-z]{32,44}$"`
}

type _UserVerifiedAddressesPrimary UserVerifiedAddressesPrimary

// NewUserVerifiedAddressesPrimary instantiates a new UserVerifiedAddressesPrimary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserVerifiedAddressesPrimary(ethAddress NullableString, solAddress NullableString) *UserVerifiedAddressesPrimary {
	this := UserVerifiedAddressesPrimary{}
	this.EthAddress = ethAddress
	this.SolAddress = solAddress
	return &this
}

// NewUserVerifiedAddressesPrimaryWithDefaults instantiates a new UserVerifiedAddressesPrimary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserVerifiedAddressesPrimaryWithDefaults() *UserVerifiedAddressesPrimary {
	this := UserVerifiedAddressesPrimary{}
	return &this
}

// GetEthAddress returns the EthAddress field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserVerifiedAddressesPrimary) GetEthAddress() string {
	if o == nil || o.EthAddress.Get() == nil {
		var ret string
		return ret
	}

	return *o.EthAddress.Get()
}

// GetEthAddressOk returns a tuple with the EthAddress field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserVerifiedAddressesPrimary) GetEthAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EthAddress.Get(), o.EthAddress.IsSet()
}

// SetEthAddress sets field value
func (o *UserVerifiedAddressesPrimary) SetEthAddress(v string) {
	o.EthAddress.Set(&v)
}

// GetSolAddress returns the SolAddress field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserVerifiedAddressesPrimary) GetSolAddress() string {
	if o == nil || o.SolAddress.Get() == nil {
		var ret string
		return ret
	}

	return *o.SolAddress.Get()
}

// GetSolAddressOk returns a tuple with the SolAddress field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserVerifiedAddressesPrimary) GetSolAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SolAddress.Get(), o.SolAddress.IsSet()
}

// SetSolAddress sets field value
func (o *UserVerifiedAddressesPrimary) SetSolAddress(v string) {
	o.SolAddress.Set(&v)
}

func (o UserVerifiedAddressesPrimary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserVerifiedAddressesPrimary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eth_address"] = o.EthAddress.Get()
	toSerialize["sol_address"] = o.SolAddress.Get()
	return toSerialize, nil
}

func (o *UserVerifiedAddressesPrimary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eth_address",
		"sol_address",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varUserVerifiedAddressesPrimary := _UserVerifiedAddressesPrimary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserVerifiedAddressesPrimary)

	if err != nil {
		return err
	}

	*o = UserVerifiedAddressesPrimary(varUserVerifiedAddressesPrimary)

	return err
}

type NullableUserVerifiedAddressesPrimary struct {
	value *UserVerifiedAddressesPrimary
	isSet bool
}

func (v NullableUserVerifiedAddressesPrimary) Get() *UserVerifiedAddressesPrimary {
	return v.value
}

func (v *NullableUserVerifiedAddressesPrimary) Set(val *UserVerifiedAddressesPrimary) {
	v.value = val
	v.isSet = true
}

func (v NullableUserVerifiedAddressesPrimary) IsSet() bool {
	return v.isSet
}

func (v *NullableUserVerifiedAddressesPrimary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserVerifiedAddressesPrimary(val *UserVerifiedAddressesPrimary) *NullableUserVerifiedAddressesPrimary {
	return &NullableUserVerifiedAddressesPrimary{value: val, isSet: true}
}

func (v NullableUserVerifiedAddressesPrimary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserVerifiedAddressesPrimary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

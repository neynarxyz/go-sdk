/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.37.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChannelMemberInviteListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelMemberInviteListResponse{}

// ChannelMemberInviteListResponse struct for ChannelMemberInviteListResponse
type ChannelMemberInviteListResponse struct {
	Invites []ChannelMemberInvite `json:"invites"`
	Next    *NextCursor           `json:"next,omitempty"`
}

type _ChannelMemberInviteListResponse ChannelMemberInviteListResponse

// NewChannelMemberInviteListResponse instantiates a new ChannelMemberInviteListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelMemberInviteListResponse(invites []ChannelMemberInvite) *ChannelMemberInviteListResponse {
	this := ChannelMemberInviteListResponse{}
	this.Invites = invites
	return &this
}

// NewChannelMemberInviteListResponseWithDefaults instantiates a new ChannelMemberInviteListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelMemberInviteListResponseWithDefaults() *ChannelMemberInviteListResponse {
	this := ChannelMemberInviteListResponse{}
	return &this
}

// GetInvites returns the Invites field value
func (o *ChannelMemberInviteListResponse) GetInvites() []ChannelMemberInvite {
	if o == nil {
		var ret []ChannelMemberInvite
		return ret
	}

	return o.Invites
}

// GetInvitesOk returns a tuple with the Invites field value
// and a boolean to check if the value has been set.
func (o *ChannelMemberInviteListResponse) GetInvitesOk() ([]ChannelMemberInvite, bool) {
	if o == nil {
		return nil, false
	}
	return o.Invites, true
}

// SetInvites sets field value
func (o *ChannelMemberInviteListResponse) SetInvites(v []ChannelMemberInvite) {
	o.Invites = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *ChannelMemberInviteListResponse) GetNext() NextCursor {
	if o == nil || IsNil(o.Next) {
		var ret NextCursor
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelMemberInviteListResponse) GetNextOk() (*NextCursor, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *ChannelMemberInviteListResponse) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given NextCursor and assigns it to the Next field.
func (o *ChannelMemberInviteListResponse) SetNext(v NextCursor) {
	o.Next = &v
}

func (o ChannelMemberInviteListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelMemberInviteListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["invites"] = o.Invites
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

func (o *ChannelMemberInviteListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"invites",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varChannelMemberInviteListResponse := _ChannelMemberInviteListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChannelMemberInviteListResponse)

	if err != nil {
		return err
	}

	*o = ChannelMemberInviteListResponse(varChannelMemberInviteListResponse)

	return err
}

type NullableChannelMemberInviteListResponse struct {
	value *ChannelMemberInviteListResponse
	isSet bool
}

func (v NullableChannelMemberInviteListResponse) Get() *ChannelMemberInviteListResponse {
	return v.value
}

func (v *NullableChannelMemberInviteListResponse) Set(val *ChannelMemberInviteListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelMemberInviteListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelMemberInviteListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelMemberInviteListResponse(val *ChannelMemberInviteListResponse) *NullableChannelMemberInviteListResponse {
	return &NullableChannelMemberInviteListResponse{value: val, isSet: true}
}

func (v NullableChannelMemberInviteListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelMemberInviteListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

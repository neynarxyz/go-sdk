/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.37.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SendFrameNotificationsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendFrameNotificationsResponse{}

// SendFrameNotificationsResponse struct for SendFrameNotificationsResponse
type SendFrameNotificationsResponse struct {
	NotificationDeliveries []NotificationDelivery `json:"notification_deliveries"`
}

type _SendFrameNotificationsResponse SendFrameNotificationsResponse

// NewSendFrameNotificationsResponse instantiates a new SendFrameNotificationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendFrameNotificationsResponse(notificationDeliveries []NotificationDelivery) *SendFrameNotificationsResponse {
	this := SendFrameNotificationsResponse{}
	this.NotificationDeliveries = notificationDeliveries
	return &this
}

// NewSendFrameNotificationsResponseWithDefaults instantiates a new SendFrameNotificationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendFrameNotificationsResponseWithDefaults() *SendFrameNotificationsResponse {
	this := SendFrameNotificationsResponse{}
	return &this
}

// GetNotificationDeliveries returns the NotificationDeliveries field value
func (o *SendFrameNotificationsResponse) GetNotificationDeliveries() []NotificationDelivery {
	if o == nil {
		var ret []NotificationDelivery
		return ret
	}

	return o.NotificationDeliveries
}

// GetNotificationDeliveriesOk returns a tuple with the NotificationDeliveries field value
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsResponse) GetNotificationDeliveriesOk() ([]NotificationDelivery, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationDeliveries, true
}

// SetNotificationDeliveries sets field value
func (o *SendFrameNotificationsResponse) SetNotificationDeliveries(v []NotificationDelivery) {
	o.NotificationDeliveries = v
}

func (o SendFrameNotificationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendFrameNotificationsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notification_deliveries"] = o.NotificationDeliveries
	return toSerialize, nil
}

func (o *SendFrameNotificationsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notification_deliveries",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varSendFrameNotificationsResponse := _SendFrameNotificationsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendFrameNotificationsResponse)

	if err != nil {
		return err
	}

	*o = SendFrameNotificationsResponse(varSendFrameNotificationsResponse)

	return err
}

type NullableSendFrameNotificationsResponse struct {
	value *SendFrameNotificationsResponse
	isSet bool
}

func (v NullableSendFrameNotificationsResponse) Get() *SendFrameNotificationsResponse {
	return v.value
}

func (v *NullableSendFrameNotificationsResponse) Set(val *SendFrameNotificationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSendFrameNotificationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSendFrameNotificationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendFrameNotificationsResponse(val *SendFrameNotificationsResponse) *NullableSendFrameNotificationsResponse {
	return &NullableSendFrameNotificationsResponse{value: val, isSet: true}
}

func (v NullableSendFrameNotificationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendFrameNotificationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

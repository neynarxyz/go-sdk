/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.36.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NeynarFrameCreationReqBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NeynarFrameCreationReqBody{}

// NeynarFrameCreationReqBody struct for NeynarFrameCreationReqBody
type NeynarFrameCreationReqBody struct {
	// The name of the mini app.
	Name  string            `json:"name"`
	Pages []NeynarFramePage `json:"pages"`
}

type _NeynarFrameCreationReqBody NeynarFrameCreationReqBody

// NewNeynarFrameCreationReqBody instantiates a new NeynarFrameCreationReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeynarFrameCreationReqBody(name string, pages []NeynarFramePage) *NeynarFrameCreationReqBody {
	this := NeynarFrameCreationReqBody{}
	this.Name = name
	this.Pages = pages
	return &this
}

// NewNeynarFrameCreationReqBodyWithDefaults instantiates a new NeynarFrameCreationReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeynarFrameCreationReqBodyWithDefaults() *NeynarFrameCreationReqBody {
	this := NeynarFrameCreationReqBody{}
	return &this
}

// GetName returns the Name field value
func (o *NeynarFrameCreationReqBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NeynarFrameCreationReqBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NeynarFrameCreationReqBody) SetName(v string) {
	o.Name = v
}

// GetPages returns the Pages field value
func (o *NeynarFrameCreationReqBody) GetPages() []NeynarFramePage {
	if o == nil {
		var ret []NeynarFramePage
		return ret
	}

	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value
// and a boolean to check if the value has been set.
func (o *NeynarFrameCreationReqBody) GetPagesOk() ([]NeynarFramePage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pages, true
}

// SetPages sets field value
func (o *NeynarFrameCreationReqBody) SetPages(v []NeynarFramePage) {
	o.Pages = v
}

func (o NeynarFrameCreationReqBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NeynarFrameCreationReqBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["pages"] = o.Pages
	return toSerialize, nil
}

func (o *NeynarFrameCreationReqBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"pages",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varNeynarFrameCreationReqBody := _NeynarFrameCreationReqBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNeynarFrameCreationReqBody)

	if err != nil {
		return err
	}

	*o = NeynarFrameCreationReqBody(varNeynarFrameCreationReqBody)

	return err
}

type NullableNeynarFrameCreationReqBody struct {
	value *NeynarFrameCreationReqBody
	isSet bool
}

func (v NullableNeynarFrameCreationReqBody) Get() *NeynarFrameCreationReqBody {
	return v.value
}

func (v *NullableNeynarFrameCreationReqBody) Set(val *NeynarFrameCreationReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableNeynarFrameCreationReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableNeynarFrameCreationReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeynarFrameCreationReqBody(val *NeynarFrameCreationReqBody) *NullableNeynarFrameCreationReqBody {
	return &NullableNeynarFrameCreationReqBody{value: val, isSet: true}
}

func (v NullableNeynarFrameCreationReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeynarFrameCreationReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

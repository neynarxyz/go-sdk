/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.35.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the BanRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BanRecord{}

// BanRecord struct for BanRecord
type BanRecord struct {
	Object   string    `json:"object"`
	Banned   *User     `json:"banned,omitempty"`
	BannedAt time.Time `json:"banned_at"`
}

type _BanRecord BanRecord

// NewBanRecord instantiates a new BanRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBanRecord(object string, bannedAt time.Time) *BanRecord {
	this := BanRecord{}
	this.Object = object
	this.BannedAt = bannedAt
	return &this
}

// NewBanRecordWithDefaults instantiates a new BanRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBanRecordWithDefaults() *BanRecord {
	this := BanRecord{}
	return &this
}

// GetObject returns the Object field value
func (o *BanRecord) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *BanRecord) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *BanRecord) SetObject(v string) {
	o.Object = v
}

// GetBanned returns the Banned field value if set, zero value otherwise.
func (o *BanRecord) GetBanned() User {
	if o == nil || IsNil(o.Banned) {
		var ret User
		return ret
	}
	return *o.Banned
}

// GetBannedOk returns a tuple with the Banned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRecord) GetBannedOk() (*User, bool) {
	if o == nil || IsNil(o.Banned) {
		return nil, false
	}
	return o.Banned, true
}

// HasBanned returns a boolean if a field has been set.
func (o *BanRecord) HasBanned() bool {
	if o != nil && !IsNil(o.Banned) {
		return true
	}

	return false
}

// SetBanned gets a reference to the given User and assigns it to the Banned field.
func (o *BanRecord) SetBanned(v User) {
	o.Banned = &v
}

// GetBannedAt returns the BannedAt field value
func (o *BanRecord) GetBannedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.BannedAt
}

// GetBannedAtOk returns a tuple with the BannedAt field value
// and a boolean to check if the value has been set.
func (o *BanRecord) GetBannedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BannedAt, true
}

// SetBannedAt sets field value
func (o *BanRecord) SetBannedAt(v time.Time) {
	o.BannedAt = v
}

func (o BanRecord) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BanRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	if !IsNil(o.Banned) {
		toSerialize["banned"] = o.Banned
	}
	toSerialize["banned_at"] = o.BannedAt
	return toSerialize, nil
}

func (o *BanRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"banned_at",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varBanRecord := _BanRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBanRecord)

	if err != nil {
		return err
	}

	*o = BanRecord(varBanRecord)

	return err
}

type NullableBanRecord struct {
	value *BanRecord
	isSet bool
}

func (v NullableBanRecord) Get() *BanRecord {
	return v.value
}

func (v *NullableBanRecord) Set(val *BanRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableBanRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableBanRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBanRecord(val *BanRecord) *NullableBanRecord {
	return &NullableBanRecord{value: val, isSet: true}
}

func (v NullableBanRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBanRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

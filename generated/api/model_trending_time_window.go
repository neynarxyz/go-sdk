/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.36.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// TrendingTimeWindow Time window for trending content
type TrendingTimeWindow string

// List of TrendingTimeWindow
const (
	TRENDINGTIMEWINDOW__1H  TrendingTimeWindow = "1h"
	TRENDINGTIMEWINDOW__6H  TrendingTimeWindow = "6h"
	TRENDINGTIMEWINDOW__12H TrendingTimeWindow = "12h"
	TRENDINGTIMEWINDOW__24H TrendingTimeWindow = "24h"
	TRENDINGTIMEWINDOW__7D  TrendingTimeWindow = "7d"
)

// All allowed values of TrendingTimeWindow enum
var AllowedTrendingTimeWindowEnumValues = []TrendingTimeWindow{
	"1h",
	"6h",
	"12h",
	"24h",
	"7d",
}

func (v *TrendingTimeWindow) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrendingTimeWindow(value)
	for _, existing := range AllowedTrendingTimeWindowEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrendingTimeWindow", value)
}

// NewTrendingTimeWindowFromValue returns a pointer to a valid TrendingTimeWindow
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrendingTimeWindowFromValue(v string) (*TrendingTimeWindow, error) {
	ev := TrendingTimeWindow(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrendingTimeWindow: valid values are %v", v, AllowedTrendingTimeWindowEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrendingTimeWindow) IsValid() bool {
	for _, existing := range AllowedTrendingTimeWindowEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrendingTimeWindow value
func (v TrendingTimeWindow) Ptr() *TrendingTimeWindow {
	return &v
}

type NullableTrendingTimeWindow struct {
	value *TrendingTimeWindow
	isSet bool
}

func (v NullableTrendingTimeWindow) Get() *TrendingTimeWindow {
	return v.value
}

func (v *NullableTrendingTimeWindow) Set(val *TrendingTimeWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableTrendingTimeWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableTrendingTimeWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrendingTimeWindow(val *TrendingTimeWindow) *NullableTrendingTimeWindow {
	return &NullableTrendingTimeWindow{value: val, isSet: true}
}

func (v NullableTrendingTimeWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrendingTimeWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

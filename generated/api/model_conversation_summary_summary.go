/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.36.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConversationSummarySummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversationSummarySummary{}

// ConversationSummarySummary struct for ConversationSummarySummary
type ConversationSummarySummary struct {
	// Summary generated by an LLM
	Text string `json:"text"`
	// Users who casted in a conversation thread
	Participants []User `json:"participants"`
	// Users who were mentioned in a conversation thread
	MentionedProfiles []User `json:"mentioned_profiles"`
}

type _ConversationSummarySummary ConversationSummarySummary

// NewConversationSummarySummary instantiates a new ConversationSummarySummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationSummarySummary(text string, participants []User, mentionedProfiles []User) *ConversationSummarySummary {
	this := ConversationSummarySummary{}
	this.Text = text
	this.Participants = participants
	this.MentionedProfiles = mentionedProfiles
	return &this
}

// NewConversationSummarySummaryWithDefaults instantiates a new ConversationSummarySummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationSummarySummaryWithDefaults() *ConversationSummarySummary {
	this := ConversationSummarySummary{}
	return &this
}

// GetText returns the Text field value
func (o *ConversationSummarySummary) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *ConversationSummarySummary) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *ConversationSummarySummary) SetText(v string) {
	o.Text = v
}

// GetParticipants returns the Participants field value
func (o *ConversationSummarySummary) GetParticipants() []User {
	if o == nil {
		var ret []User
		return ret
	}

	return o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value
// and a boolean to check if the value has been set.
func (o *ConversationSummarySummary) GetParticipantsOk() ([]User, bool) {
	if o == nil {
		return nil, false
	}
	return o.Participants, true
}

// SetParticipants sets field value
func (o *ConversationSummarySummary) SetParticipants(v []User) {
	o.Participants = v
}

// GetMentionedProfiles returns the MentionedProfiles field value
func (o *ConversationSummarySummary) GetMentionedProfiles() []User {
	if o == nil {
		var ret []User
		return ret
	}

	return o.MentionedProfiles
}

// GetMentionedProfilesOk returns a tuple with the MentionedProfiles field value
// and a boolean to check if the value has been set.
func (o *ConversationSummarySummary) GetMentionedProfilesOk() ([]User, bool) {
	if o == nil {
		return nil, false
	}
	return o.MentionedProfiles, true
}

// SetMentionedProfiles sets field value
func (o *ConversationSummarySummary) SetMentionedProfiles(v []User) {
	o.MentionedProfiles = v
}

func (o ConversationSummarySummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversationSummarySummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	toSerialize["participants"] = o.Participants
	toSerialize["mentioned_profiles"] = o.MentionedProfiles
	return toSerialize, nil
}

func (o *ConversationSummarySummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
		"participants",
		"mentioned_profiles",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varConversationSummarySummary := _ConversationSummarySummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversationSummarySummary)

	if err != nil {
		return err
	}

	*o = ConversationSummarySummary(varConversationSummarySummary)

	return err
}

type NullableConversationSummarySummary struct {
	value *ConversationSummarySummary
	isSet bool
}

func (v NullableConversationSummarySummary) Get() *ConversationSummarySummary {
	return v.value
}

func (v *NullableConversationSummarySummary) Set(val *ConversationSummarySummary) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationSummarySummary) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationSummarySummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationSummarySummary(val *ConversationSummarySummary) *NullableConversationSummarySummary {
	return &NullableConversationSummarySummary{value: val, isSet: true}
}

func (v NullableConversationSummarySummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationSummarySummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

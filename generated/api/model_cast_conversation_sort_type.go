/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.35.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// CastConversationSortType the model 'CastConversationSortType'
type CastConversationSortType string

// List of CastConversationSortType
const (
	CASTCONVERSATIONSORTTYPE_CHRON       CastConversationSortType = "chron"
	CASTCONVERSATIONSORTTYPE_DESC_CHRON  CastConversationSortType = "desc_chron"
	CASTCONVERSATIONSORTTYPE_ALGORITHMIC CastConversationSortType = "algorithmic"
)

// All allowed values of CastConversationSortType enum
var AllowedCastConversationSortTypeEnumValues = []CastConversationSortType{
	"chron",
	"desc_chron",
	"algorithmic",
}

func (v *CastConversationSortType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CastConversationSortType(value)
	for _, existing := range AllowedCastConversationSortTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CastConversationSortType", value)
}

// NewCastConversationSortTypeFromValue returns a pointer to a valid CastConversationSortType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCastConversationSortTypeFromValue(v string) (*CastConversationSortType, error) {
	ev := CastConversationSortType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CastConversationSortType: valid values are %v", v, AllowedCastConversationSortTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CastConversationSortType) IsValid() bool {
	for _, existing := range AllowedCastConversationSortTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CastConversationSortType value
func (v CastConversationSortType) Ptr() *CastConversationSortType {
	return &v
}

type NullableCastConversationSortType struct {
	value *CastConversationSortType
	isSet bool
}

func (v NullableCastConversationSortType) Get() *CastConversationSortType {
	return v.value
}

func (v *NullableCastConversationSortType) Set(val *CastConversationSortType) {
	v.value = val
	v.isSet = true
}

func (v NullableCastConversationSortType) IsSet() bool {
	return v.isSet
}

func (v *NullableCastConversationSortType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastConversationSortType(val *CastConversationSortType) *NullableCastConversationSortType {
	return &NullableCastConversationSortType{value: val, isSet: true}
}

func (v NullableCastConversationSortType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastConversationSortType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

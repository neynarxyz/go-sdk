/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.36.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConversationSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversationSummary{}

// ConversationSummary struct for ConversationSummary
type ConversationSummary struct {
	Summary ConversationSummarySummary `json:"summary"`
}

type _ConversationSummary ConversationSummary

// NewConversationSummary instantiates a new ConversationSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationSummary(summary ConversationSummarySummary) *ConversationSummary {
	this := ConversationSummary{}
	this.Summary = summary
	return &this
}

// NewConversationSummaryWithDefaults instantiates a new ConversationSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationSummaryWithDefaults() *ConversationSummary {
	this := ConversationSummary{}
	return &this
}

// GetSummary returns the Summary field value
func (o *ConversationSummary) GetSummary() ConversationSummarySummary {
	if o == nil {
		var ret ConversationSummarySummary
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *ConversationSummary) GetSummaryOk() (*ConversationSummarySummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *ConversationSummary) SetSummary(v ConversationSummarySummary) {
	o.Summary = v
}

func (o ConversationSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversationSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["summary"] = o.Summary
	return toSerialize, nil
}

func (o *ConversationSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"summary",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varConversationSummary := _ConversationSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversationSummary)

	if err != nil {
		return err
	}

	*o = ConversationSummary(varConversationSummary)

	return err
}

type NullableConversationSummary struct {
	value *ConversationSummary
	isSet bool
}

func (v NullableConversationSummary) Get() *ConversationSummary {
	return v.value
}

func (v *NullableConversationSummary) Set(val *ConversationSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationSummary(val *ConversationSummary) *NullableConversationSummary {
	return &NullableConversationSummary{value: val, isSet: true}
}

func (v NullableConversationSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

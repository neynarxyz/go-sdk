/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.37.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FramePayTransactionRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FramePayTransactionRequestBody{}

// FramePayTransactionRequestBody struct for FramePayTransactionRequestBody
type FramePayTransactionRequestBody struct {
	Transaction FramePayTransactionRequestBodyTransaction `json:"transaction"`
	Config      TransactionFrameConfig                    `json:"config"`
	// An Idempotency key is a unique identifier for the request. **Note:**  1) This is used to prevent duplicate requests. Use the same idem key on retry attempts. 2) This should be a unique identifier for each request. 3) Recommended format is a 16-character string generated by the developer at the time of making this request.
	Idem *string `json:"idem,omitempty"`
}

type _FramePayTransactionRequestBody FramePayTransactionRequestBody

// NewFramePayTransactionRequestBody instantiates a new FramePayTransactionRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFramePayTransactionRequestBody(transaction FramePayTransactionRequestBodyTransaction, config TransactionFrameConfig) *FramePayTransactionRequestBody {
	this := FramePayTransactionRequestBody{}
	this.Transaction = transaction
	this.Config = config
	return &this
}

// NewFramePayTransactionRequestBodyWithDefaults instantiates a new FramePayTransactionRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFramePayTransactionRequestBodyWithDefaults() *FramePayTransactionRequestBody {
	this := FramePayTransactionRequestBody{}
	return &this
}

// GetTransaction returns the Transaction field value
func (o *FramePayTransactionRequestBody) GetTransaction() FramePayTransactionRequestBodyTransaction {
	if o == nil {
		var ret FramePayTransactionRequestBodyTransaction
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *FramePayTransactionRequestBody) GetTransactionOk() (*FramePayTransactionRequestBodyTransaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *FramePayTransactionRequestBody) SetTransaction(v FramePayTransactionRequestBodyTransaction) {
	o.Transaction = v
}

// GetConfig returns the Config field value
func (o *FramePayTransactionRequestBody) GetConfig() TransactionFrameConfig {
	if o == nil {
		var ret TransactionFrameConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *FramePayTransactionRequestBody) GetConfigOk() (*TransactionFrameConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *FramePayTransactionRequestBody) SetConfig(v TransactionFrameConfig) {
	o.Config = v
}

// GetIdem returns the Idem field value if set, zero value otherwise.
func (o *FramePayTransactionRequestBody) GetIdem() string {
	if o == nil || IsNil(o.Idem) {
		var ret string
		return ret
	}
	return *o.Idem
}

// GetIdemOk returns a tuple with the Idem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FramePayTransactionRequestBody) GetIdemOk() (*string, bool) {
	if o == nil || IsNil(o.Idem) {
		return nil, false
	}
	return o.Idem, true
}

// HasIdem returns a boolean if a field has been set.
func (o *FramePayTransactionRequestBody) HasIdem() bool {
	if o != nil && !IsNil(o.Idem) {
		return true
	}

	return false
}

// SetIdem gets a reference to the given string and assigns it to the Idem field.
func (o *FramePayTransactionRequestBody) SetIdem(v string) {
	o.Idem = &v
}

func (o FramePayTransactionRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FramePayTransactionRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction"] = o.Transaction
	toSerialize["config"] = o.Config
	if !IsNil(o.Idem) {
		toSerialize["idem"] = o.Idem
	}
	return toSerialize, nil
}

func (o *FramePayTransactionRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction",
		"config",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFramePayTransactionRequestBody := _FramePayTransactionRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFramePayTransactionRequestBody)

	if err != nil {
		return err
	}

	*o = FramePayTransactionRequestBody(varFramePayTransactionRequestBody)

	return err
}

type NullableFramePayTransactionRequestBody struct {
	value *FramePayTransactionRequestBody
	isSet bool
}

func (v NullableFramePayTransactionRequestBody) Get() *FramePayTransactionRequestBody {
	return v.value
}

func (v *NullableFramePayTransactionRequestBody) Set(val *FramePayTransactionRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableFramePayTransactionRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableFramePayTransactionRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFramePayTransactionRequestBody(val *FramePayTransactionRequestBody) *NullableFramePayTransactionRequestBody {
	return &NullableFramePayTransactionRequestBody{value: val, isSet: true}
}

func (v NullableFramePayTransactionRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFramePayTransactionRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.37.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neynar_sdk

import (
	"encoding/json"
	"fmt"
)

// SearchSortType the model 'SearchSortType'
type SearchSortType string

// List of SearchSortType
const (
	SEARCHSORTTYPE_DESC_CHRON  SearchSortType = "desc_chron"
	SEARCHSORTTYPE_ALGORITHMIC SearchSortType = "algorithmic"
)

// All allowed values of SearchSortType enum
var AllowedSearchSortTypeEnumValues = []SearchSortType{
	"desc_chron",
	"algorithmic",
}

func (v *SearchSortType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchSortType(value)
	for _, existing := range AllowedSearchSortTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchSortType", value)
}

// NewSearchSortTypeFromValue returns a pointer to a valid SearchSortType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchSortTypeFromValue(v string) (*SearchSortType, error) {
	ev := SearchSortType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchSortType: valid values are %v", v, AllowedSearchSortTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchSortType) IsValid() bool {
	for _, existing := range AllowedSearchSortTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchSortType value
func (v SearchSortType) Ptr() *SearchSortType {
	return &v
}

type NullableSearchSortType struct {
	value *SearchSortType
	isSet bool
}

func (v NullableSearchSortType) Get() *SearchSortType {
	return v.value
}

func (v *NullableSearchSortType) Set(val *SearchSortType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSortType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSortType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSortType(val *SearchSortType) *NullableSearchSortType {
	return &NullableSearchSortType{value: val, isSet: true}
}

func (v NullableSearchSortType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchSortType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

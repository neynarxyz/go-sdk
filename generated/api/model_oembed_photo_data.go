/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.35.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OembedPhotoData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OembedPhotoData{}

// OembedPhotoData struct for OembedPhotoData
type OembedPhotoData struct {
	Type    string         `json:"type"`
	Version NullableString `json:"version"`
	// A text title, describing the resource.
	Title NullableString `json:"title,omitempty"`
	// The name of the author/owner of the resource.
	AuthorName NullableString `json:"author_name,omitempty"`
	// A URL for the author/owner of the resource.
	AuthorUrl NullableString `json:"author_url,omitempty"`
	// The name of the resource provider.
	ProviderName NullableString `json:"provider_name,omitempty"`
	// The url of the resource provider.
	ProviderUrl NullableString `json:"provider_url,omitempty"`
	// The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not.
	CacheAge NullableString `json:"cache_age,omitempty"`
	// A URL to a thumbnail image representing the resource. The thumbnail must respect any maxwidth and maxheight parameters. If this parameter is present, thumbnail_width and thumbnail_height must also be present.
	ThumbnailUrl NullableString `json:"thumbnail_url,omitempty"`
	// The width of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_height must also be present.
	ThumbnailWidth NullableFloat32 `json:"thumbnail_width,omitempty"`
	// The height of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_width must also be present.
	ThumbnailHeight NullableFloat32 `json:"thumbnail_height,omitempty"`
	// The source URL of the image. Consumers should be able to insert this URL into an <img> element. Only HTTP and HTTPS URLs are valid.
	Url NullableString `json:"url"`
	// The width in pixels of the image specified in the url parameter.
	Width NullableFloat32 `json:"width"`
	// The height in pixels of the image specified in the url parameter.
	Height NullableFloat32 `json:"height"`
}

type _OembedPhotoData OembedPhotoData

// NewOembedPhotoData instantiates a new OembedPhotoData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOembedPhotoData(type_ string, version NullableString, url NullableString, width NullableFloat32, height NullableFloat32) *OembedPhotoData {
	this := OembedPhotoData{}
	this.Type = type_
	this.Version = version
	this.Url = url
	this.Width = width
	this.Height = height
	return &this
}

// NewOembedPhotoDataWithDefaults instantiates a new OembedPhotoData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOembedPhotoDataWithDefaults() *OembedPhotoData {
	this := OembedPhotoData{}
	return &this
}

// GetType returns the Type field value
func (o *OembedPhotoData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OembedPhotoData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OembedPhotoData) SetType(v string) {
	o.Type = v
}

// GetVersion returns the Version field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OembedPhotoData) GetVersion() string {
	if o == nil || o.Version.Get() == nil {
		var ret string
		return ret
	}

	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// SetVersion sets field value
func (o *OembedPhotoData) SetVersion(v string) {
	o.Version.Set(&v)
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OembedPhotoData) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *OembedPhotoData) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *OembedPhotoData) SetTitle(v string) {
	o.Title.Set(&v)
}

// SetTitleNil sets the value for Title to be an explicit nil
func (o *OembedPhotoData) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *OembedPhotoData) UnsetTitle() {
	o.Title.Unset()
}

// GetAuthorName returns the AuthorName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OembedPhotoData) GetAuthorName() string {
	if o == nil || IsNil(o.AuthorName.Get()) {
		var ret string
		return ret
	}
	return *o.AuthorName.Get()
}

// GetAuthorNameOk returns a tuple with the AuthorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetAuthorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorName.Get(), o.AuthorName.IsSet()
}

// HasAuthorName returns a boolean if a field has been set.
func (o *OembedPhotoData) HasAuthorName() bool {
	if o != nil && o.AuthorName.IsSet() {
		return true
	}

	return false
}

// SetAuthorName gets a reference to the given NullableString and assigns it to the AuthorName field.
func (o *OembedPhotoData) SetAuthorName(v string) {
	o.AuthorName.Set(&v)
}

// SetAuthorNameNil sets the value for AuthorName to be an explicit nil
func (o *OembedPhotoData) SetAuthorNameNil() {
	o.AuthorName.Set(nil)
}

// UnsetAuthorName ensures that no value is present for AuthorName, not even an explicit nil
func (o *OembedPhotoData) UnsetAuthorName() {
	o.AuthorName.Unset()
}

// GetAuthorUrl returns the AuthorUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OembedPhotoData) GetAuthorUrl() string {
	if o == nil || IsNil(o.AuthorUrl.Get()) {
		var ret string
		return ret
	}
	return *o.AuthorUrl.Get()
}

// GetAuthorUrlOk returns a tuple with the AuthorUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetAuthorUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorUrl.Get(), o.AuthorUrl.IsSet()
}

// HasAuthorUrl returns a boolean if a field has been set.
func (o *OembedPhotoData) HasAuthorUrl() bool {
	if o != nil && o.AuthorUrl.IsSet() {
		return true
	}

	return false
}

// SetAuthorUrl gets a reference to the given NullableString and assigns it to the AuthorUrl field.
func (o *OembedPhotoData) SetAuthorUrl(v string) {
	o.AuthorUrl.Set(&v)
}

// SetAuthorUrlNil sets the value for AuthorUrl to be an explicit nil
func (o *OembedPhotoData) SetAuthorUrlNil() {
	o.AuthorUrl.Set(nil)
}

// UnsetAuthorUrl ensures that no value is present for AuthorUrl, not even an explicit nil
func (o *OembedPhotoData) UnsetAuthorUrl() {
	o.AuthorUrl.Unset()
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OembedPhotoData) GetProviderName() string {
	if o == nil || IsNil(o.ProviderName.Get()) {
		var ret string
		return ret
	}
	return *o.ProviderName.Get()
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProviderName.Get(), o.ProviderName.IsSet()
}

// HasProviderName returns a boolean if a field has been set.
func (o *OembedPhotoData) HasProviderName() bool {
	if o != nil && o.ProviderName.IsSet() {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given NullableString and assigns it to the ProviderName field.
func (o *OembedPhotoData) SetProviderName(v string) {
	o.ProviderName.Set(&v)
}

// SetProviderNameNil sets the value for ProviderName to be an explicit nil
func (o *OembedPhotoData) SetProviderNameNil() {
	o.ProviderName.Set(nil)
}

// UnsetProviderName ensures that no value is present for ProviderName, not even an explicit nil
func (o *OembedPhotoData) UnsetProviderName() {
	o.ProviderName.Unset()
}

// GetProviderUrl returns the ProviderUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OembedPhotoData) GetProviderUrl() string {
	if o == nil || IsNil(o.ProviderUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ProviderUrl.Get()
}

// GetProviderUrlOk returns a tuple with the ProviderUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetProviderUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProviderUrl.Get(), o.ProviderUrl.IsSet()
}

// HasProviderUrl returns a boolean if a field has been set.
func (o *OembedPhotoData) HasProviderUrl() bool {
	if o != nil && o.ProviderUrl.IsSet() {
		return true
	}

	return false
}

// SetProviderUrl gets a reference to the given NullableString and assigns it to the ProviderUrl field.
func (o *OembedPhotoData) SetProviderUrl(v string) {
	o.ProviderUrl.Set(&v)
}

// SetProviderUrlNil sets the value for ProviderUrl to be an explicit nil
func (o *OembedPhotoData) SetProviderUrlNil() {
	o.ProviderUrl.Set(nil)
}

// UnsetProviderUrl ensures that no value is present for ProviderUrl, not even an explicit nil
func (o *OembedPhotoData) UnsetProviderUrl() {
	o.ProviderUrl.Unset()
}

// GetCacheAge returns the CacheAge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OembedPhotoData) GetCacheAge() string {
	if o == nil || IsNil(o.CacheAge.Get()) {
		var ret string
		return ret
	}
	return *o.CacheAge.Get()
}

// GetCacheAgeOk returns a tuple with the CacheAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetCacheAgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CacheAge.Get(), o.CacheAge.IsSet()
}

// HasCacheAge returns a boolean if a field has been set.
func (o *OembedPhotoData) HasCacheAge() bool {
	if o != nil && o.CacheAge.IsSet() {
		return true
	}

	return false
}

// SetCacheAge gets a reference to the given NullableString and assigns it to the CacheAge field.
func (o *OembedPhotoData) SetCacheAge(v string) {
	o.CacheAge.Set(&v)
}

// SetCacheAgeNil sets the value for CacheAge to be an explicit nil
func (o *OembedPhotoData) SetCacheAgeNil() {
	o.CacheAge.Set(nil)
}

// UnsetCacheAge ensures that no value is present for CacheAge, not even an explicit nil
func (o *OembedPhotoData) UnsetCacheAge() {
	o.CacheAge.Unset()
}

// GetThumbnailUrl returns the ThumbnailUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OembedPhotoData) GetThumbnailUrl() string {
	if o == nil || IsNil(o.ThumbnailUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ThumbnailUrl.Get()
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetThumbnailUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThumbnailUrl.Get(), o.ThumbnailUrl.IsSet()
}

// HasThumbnailUrl returns a boolean if a field has been set.
func (o *OembedPhotoData) HasThumbnailUrl() bool {
	if o != nil && o.ThumbnailUrl.IsSet() {
		return true
	}

	return false
}

// SetThumbnailUrl gets a reference to the given NullableString and assigns it to the ThumbnailUrl field.
func (o *OembedPhotoData) SetThumbnailUrl(v string) {
	o.ThumbnailUrl.Set(&v)
}

// SetThumbnailUrlNil sets the value for ThumbnailUrl to be an explicit nil
func (o *OembedPhotoData) SetThumbnailUrlNil() {
	o.ThumbnailUrl.Set(nil)
}

// UnsetThumbnailUrl ensures that no value is present for ThumbnailUrl, not even an explicit nil
func (o *OembedPhotoData) UnsetThumbnailUrl() {
	o.ThumbnailUrl.Unset()
}

// GetThumbnailWidth returns the ThumbnailWidth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OembedPhotoData) GetThumbnailWidth() float32 {
	if o == nil || IsNil(o.ThumbnailWidth.Get()) {
		var ret float32
		return ret
	}
	return *o.ThumbnailWidth.Get()
}

// GetThumbnailWidthOk returns a tuple with the ThumbnailWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetThumbnailWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThumbnailWidth.Get(), o.ThumbnailWidth.IsSet()
}

// HasThumbnailWidth returns a boolean if a field has been set.
func (o *OembedPhotoData) HasThumbnailWidth() bool {
	if o != nil && o.ThumbnailWidth.IsSet() {
		return true
	}

	return false
}

// SetThumbnailWidth gets a reference to the given NullableFloat32 and assigns it to the ThumbnailWidth field.
func (o *OembedPhotoData) SetThumbnailWidth(v float32) {
	o.ThumbnailWidth.Set(&v)
}

// SetThumbnailWidthNil sets the value for ThumbnailWidth to be an explicit nil
func (o *OembedPhotoData) SetThumbnailWidthNil() {
	o.ThumbnailWidth.Set(nil)
}

// UnsetThumbnailWidth ensures that no value is present for ThumbnailWidth, not even an explicit nil
func (o *OembedPhotoData) UnsetThumbnailWidth() {
	o.ThumbnailWidth.Unset()
}

// GetThumbnailHeight returns the ThumbnailHeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OembedPhotoData) GetThumbnailHeight() float32 {
	if o == nil || IsNil(o.ThumbnailHeight.Get()) {
		var ret float32
		return ret
	}
	return *o.ThumbnailHeight.Get()
}

// GetThumbnailHeightOk returns a tuple with the ThumbnailHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetThumbnailHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThumbnailHeight.Get(), o.ThumbnailHeight.IsSet()
}

// HasThumbnailHeight returns a boolean if a field has been set.
func (o *OembedPhotoData) HasThumbnailHeight() bool {
	if o != nil && o.ThumbnailHeight.IsSet() {
		return true
	}

	return false
}

// SetThumbnailHeight gets a reference to the given NullableFloat32 and assigns it to the ThumbnailHeight field.
func (o *OembedPhotoData) SetThumbnailHeight(v float32) {
	o.ThumbnailHeight.Set(&v)
}

// SetThumbnailHeightNil sets the value for ThumbnailHeight to be an explicit nil
func (o *OembedPhotoData) SetThumbnailHeightNil() {
	o.ThumbnailHeight.Set(nil)
}

// UnsetThumbnailHeight ensures that no value is present for ThumbnailHeight, not even an explicit nil
func (o *OembedPhotoData) UnsetThumbnailHeight() {
	o.ThumbnailHeight.Unset()
}

// GetUrl returns the Url field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OembedPhotoData) GetUrl() string {
	if o == nil || o.Url.Get() == nil {
		var ret string
		return ret
	}

	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// SetUrl sets field value
func (o *OembedPhotoData) SetUrl(v string) {
	o.Url.Set(&v)
}

// GetWidth returns the Width field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *OembedPhotoData) GetWidth() float32 {
	if o == nil || o.Width.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Width.Get()
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Width.Get(), o.Width.IsSet()
}

// SetWidth sets field value
func (o *OembedPhotoData) SetWidth(v float32) {
	o.Width.Set(&v)
}

// GetHeight returns the Height field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *OembedPhotoData) GetHeight() float32 {
	if o == nil || o.Height.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Height.Get()
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedPhotoData) GetHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Height.Get(), o.Height.IsSet()
}

// SetHeight sets field value
func (o *OembedPhotoData) SetHeight(v float32) {
	o.Height.Set(&v)
}

func (o OembedPhotoData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OembedPhotoData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["version"] = o.Version.Get()
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.AuthorName.IsSet() {
		toSerialize["author_name"] = o.AuthorName.Get()
	}
	if o.AuthorUrl.IsSet() {
		toSerialize["author_url"] = o.AuthorUrl.Get()
	}
	if o.ProviderName.IsSet() {
		toSerialize["provider_name"] = o.ProviderName.Get()
	}
	if o.ProviderUrl.IsSet() {
		toSerialize["provider_url"] = o.ProviderUrl.Get()
	}
	if o.CacheAge.IsSet() {
		toSerialize["cache_age"] = o.CacheAge.Get()
	}
	if o.ThumbnailUrl.IsSet() {
		toSerialize["thumbnail_url"] = o.ThumbnailUrl.Get()
	}
	if o.ThumbnailWidth.IsSet() {
		toSerialize["thumbnail_width"] = o.ThumbnailWidth.Get()
	}
	if o.ThumbnailHeight.IsSet() {
		toSerialize["thumbnail_height"] = o.ThumbnailHeight.Get()
	}
	toSerialize["url"] = o.Url.Get()
	toSerialize["width"] = o.Width.Get()
	toSerialize["height"] = o.Height.Get()
	return toSerialize, nil
}

func (o *OembedPhotoData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"version",
		"url",
		"width",
		"height",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varOembedPhotoData := _OembedPhotoData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOembedPhotoData)

	if err != nil {
		return err
	}

	*o = OembedPhotoData(varOembedPhotoData)

	return err
}

type NullableOembedPhotoData struct {
	value *OembedPhotoData
	isSet bool
}

func (v NullableOembedPhotoData) Get() *OembedPhotoData {
	return v.value
}

func (v *NullableOembedPhotoData) Set(val *OembedPhotoData) {
	v.value = val
	v.isSet = true
}

func (v NullableOembedPhotoData) IsSet() bool {
	return v.isSet
}

func (v *NullableOembedPhotoData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOembedPhotoData(val *OembedPhotoData) *NullableOembedPhotoData {
	return &NullableOembedPhotoData{value: val, isSet: true}
}

func (v NullableOembedPhotoData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOembedPhotoData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

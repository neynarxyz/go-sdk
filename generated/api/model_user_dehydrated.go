/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.36.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserDehydrated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDehydrated{}

// UserDehydrated struct for UserDehydrated
type UserDehydrated struct {
	Object string `json:"object"`
	// The unique identifier of a farcaster user (unsigned integer)
	Fid         int32   `json:"fid"`
	Username    *string `json:"username,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	PfpUrl      *string `json:"pfp_url,omitempty"`
	// Ethereum address
	CustodyAddress *string `json:"custody_address,omitempty" validate:"regexp=^0x[a-fA-F0-9]{40}$"`
}

type _UserDehydrated UserDehydrated

// NewUserDehydrated instantiates a new UserDehydrated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDehydrated(object string, fid int32) *UserDehydrated {
	this := UserDehydrated{}
	this.Object = object
	this.Fid = fid
	return &this
}

// NewUserDehydratedWithDefaults instantiates a new UserDehydrated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDehydratedWithDefaults() *UserDehydrated {
	this := UserDehydrated{}
	return &this
}

// GetObject returns the Object field value
func (o *UserDehydrated) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *UserDehydrated) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *UserDehydrated) SetObject(v string) {
	o.Object = v
}

// GetFid returns the Fid field value
func (o *UserDehydrated) GetFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Fid
}

// GetFidOk returns a tuple with the Fid field value
// and a boolean to check if the value has been set.
func (o *UserDehydrated) GetFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fid, true
}

// SetFid sets field value
func (o *UserDehydrated) SetFid(v int32) {
	o.Fid = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserDehydrated) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDehydrated) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserDehydrated) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserDehydrated) SetUsername(v string) {
	o.Username = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UserDehydrated) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDehydrated) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UserDehydrated) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UserDehydrated) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetPfpUrl returns the PfpUrl field value if set, zero value otherwise.
func (o *UserDehydrated) GetPfpUrl() string {
	if o == nil || IsNil(o.PfpUrl) {
		var ret string
		return ret
	}
	return *o.PfpUrl
}

// GetPfpUrlOk returns a tuple with the PfpUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDehydrated) GetPfpUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PfpUrl) {
		return nil, false
	}
	return o.PfpUrl, true
}

// HasPfpUrl returns a boolean if a field has been set.
func (o *UserDehydrated) HasPfpUrl() bool {
	if o != nil && !IsNil(o.PfpUrl) {
		return true
	}

	return false
}

// SetPfpUrl gets a reference to the given string and assigns it to the PfpUrl field.
func (o *UserDehydrated) SetPfpUrl(v string) {
	o.PfpUrl = &v
}

// GetCustodyAddress returns the CustodyAddress field value if set, zero value otherwise.
func (o *UserDehydrated) GetCustodyAddress() string {
	if o == nil || IsNil(o.CustodyAddress) {
		var ret string
		return ret
	}
	return *o.CustodyAddress
}

// GetCustodyAddressOk returns a tuple with the CustodyAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDehydrated) GetCustodyAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CustodyAddress) {
		return nil, false
	}
	return o.CustodyAddress, true
}

// HasCustodyAddress returns a boolean if a field has been set.
func (o *UserDehydrated) HasCustodyAddress() bool {
	if o != nil && !IsNil(o.CustodyAddress) {
		return true
	}

	return false
}

// SetCustodyAddress gets a reference to the given string and assigns it to the CustodyAddress field.
func (o *UserDehydrated) SetCustodyAddress(v string) {
	o.CustodyAddress = &v
}

func (o UserDehydrated) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDehydrated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["fid"] = o.Fid
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.PfpUrl) {
		toSerialize["pfp_url"] = o.PfpUrl
	}
	if !IsNil(o.CustodyAddress) {
		toSerialize["custody_address"] = o.CustodyAddress
	}
	return toSerialize, nil
}

func (o *UserDehydrated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"fid",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varUserDehydrated := _UserDehydrated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserDehydrated)

	if err != nil {
		return err
	}

	*o = UserDehydrated(varUserDehydrated)

	return err
}

type NullableUserDehydrated struct {
	value *UserDehydrated
	isSet bool
}

func (v NullableUserDehydrated) Get() *UserDehydrated {
	return v.value
}

func (v *NullableUserDehydrated) Set(val *UserDehydrated) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDehydrated) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDehydrated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDehydrated(val *UserDehydrated) *NullableUserDehydrated {
	return &NullableUserDehydrated{value: val, isSet: true}
}

func (v NullableUserDehydrated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDehydrated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.37.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserProfileBio type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserProfileBio{}

// UserProfileBio struct for UserProfileBio
type UserProfileBio struct {
	Text              string           `json:"text"`
	MentionedProfiles []UserDehydrated `json:"mentioned_profiles,omitempty"`
	// Positions within the text (inclusive start, exclusive end) where each mention occurs. Each index within this list corresponds to the same-numbered index in the mentioned_profiles list.
	MentionedProfilesRanges []TextRange         `json:"mentioned_profiles_ranges,omitempty"`
	MentionedChannels       []ChannelDehydrated `json:"mentioned_channels,omitempty"`
	// Positions within the text (inclusive start, exclusive end) where each mention occurs. Each index within this list corresponds to the same-numbered index in the mentioned_channels list.
	MentionedChannelsRanges []TextRange `json:"mentioned_channels_ranges,omitempty"`
}

type _UserProfileBio UserProfileBio

// NewUserProfileBio instantiates a new UserProfileBio object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserProfileBio(text string) *UserProfileBio {
	this := UserProfileBio{}
	this.Text = text
	return &this
}

// NewUserProfileBioWithDefaults instantiates a new UserProfileBio object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserProfileBioWithDefaults() *UserProfileBio {
	this := UserProfileBio{}
	return &this
}

// GetText returns the Text field value
func (o *UserProfileBio) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *UserProfileBio) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *UserProfileBio) SetText(v string) {
	o.Text = v
}

// GetMentionedProfiles returns the MentionedProfiles field value if set, zero value otherwise.
func (o *UserProfileBio) GetMentionedProfiles() []UserDehydrated {
	if o == nil || IsNil(o.MentionedProfiles) {
		var ret []UserDehydrated
		return ret
	}
	return o.MentionedProfiles
}

// GetMentionedProfilesOk returns a tuple with the MentionedProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileBio) GetMentionedProfilesOk() ([]UserDehydrated, bool) {
	if o == nil || IsNil(o.MentionedProfiles) {
		return nil, false
	}
	return o.MentionedProfiles, true
}

// HasMentionedProfiles returns a boolean if a field has been set.
func (o *UserProfileBio) HasMentionedProfiles() bool {
	if o != nil && !IsNil(o.MentionedProfiles) {
		return true
	}

	return false
}

// SetMentionedProfiles gets a reference to the given []UserDehydrated and assigns it to the MentionedProfiles field.
func (o *UserProfileBio) SetMentionedProfiles(v []UserDehydrated) {
	o.MentionedProfiles = v
}

// GetMentionedProfilesRanges returns the MentionedProfilesRanges field value if set, zero value otherwise.
func (o *UserProfileBio) GetMentionedProfilesRanges() []TextRange {
	if o == nil || IsNil(o.MentionedProfilesRanges) {
		var ret []TextRange
		return ret
	}
	return o.MentionedProfilesRanges
}

// GetMentionedProfilesRangesOk returns a tuple with the MentionedProfilesRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileBio) GetMentionedProfilesRangesOk() ([]TextRange, bool) {
	if o == nil || IsNil(o.MentionedProfilesRanges) {
		return nil, false
	}
	return o.MentionedProfilesRanges, true
}

// HasMentionedProfilesRanges returns a boolean if a field has been set.
func (o *UserProfileBio) HasMentionedProfilesRanges() bool {
	if o != nil && !IsNil(o.MentionedProfilesRanges) {
		return true
	}

	return false
}

// SetMentionedProfilesRanges gets a reference to the given []TextRange and assigns it to the MentionedProfilesRanges field.
func (o *UserProfileBio) SetMentionedProfilesRanges(v []TextRange) {
	o.MentionedProfilesRanges = v
}

// GetMentionedChannels returns the MentionedChannels field value if set, zero value otherwise.
func (o *UserProfileBio) GetMentionedChannels() []ChannelDehydrated {
	if o == nil || IsNil(o.MentionedChannels) {
		var ret []ChannelDehydrated
		return ret
	}
	return o.MentionedChannels
}

// GetMentionedChannelsOk returns a tuple with the MentionedChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileBio) GetMentionedChannelsOk() ([]ChannelDehydrated, bool) {
	if o == nil || IsNil(o.MentionedChannels) {
		return nil, false
	}
	return o.MentionedChannels, true
}

// HasMentionedChannels returns a boolean if a field has been set.
func (o *UserProfileBio) HasMentionedChannels() bool {
	if o != nil && !IsNil(o.MentionedChannels) {
		return true
	}

	return false
}

// SetMentionedChannels gets a reference to the given []ChannelDehydrated and assigns it to the MentionedChannels field.
func (o *UserProfileBio) SetMentionedChannels(v []ChannelDehydrated) {
	o.MentionedChannels = v
}

// GetMentionedChannelsRanges returns the MentionedChannelsRanges field value if set, zero value otherwise.
func (o *UserProfileBio) GetMentionedChannelsRanges() []TextRange {
	if o == nil || IsNil(o.MentionedChannelsRanges) {
		var ret []TextRange
		return ret
	}
	return o.MentionedChannelsRanges
}

// GetMentionedChannelsRangesOk returns a tuple with the MentionedChannelsRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileBio) GetMentionedChannelsRangesOk() ([]TextRange, bool) {
	if o == nil || IsNil(o.MentionedChannelsRanges) {
		return nil, false
	}
	return o.MentionedChannelsRanges, true
}

// HasMentionedChannelsRanges returns a boolean if a field has been set.
func (o *UserProfileBio) HasMentionedChannelsRanges() bool {
	if o != nil && !IsNil(o.MentionedChannelsRanges) {
		return true
	}

	return false
}

// SetMentionedChannelsRanges gets a reference to the given []TextRange and assigns it to the MentionedChannelsRanges field.
func (o *UserProfileBio) SetMentionedChannelsRanges(v []TextRange) {
	o.MentionedChannelsRanges = v
}

func (o UserProfileBio) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserProfileBio) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	if !IsNil(o.MentionedProfiles) {
		toSerialize["mentioned_profiles"] = o.MentionedProfiles
	}
	if !IsNil(o.MentionedProfilesRanges) {
		toSerialize["mentioned_profiles_ranges"] = o.MentionedProfilesRanges
	}
	if !IsNil(o.MentionedChannels) {
		toSerialize["mentioned_channels"] = o.MentionedChannels
	}
	if !IsNil(o.MentionedChannelsRanges) {
		toSerialize["mentioned_channels_ranges"] = o.MentionedChannelsRanges
	}
	return toSerialize, nil
}

func (o *UserProfileBio) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varUserProfileBio := _UserProfileBio{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserProfileBio)

	if err != nil {
		return err
	}

	*o = UserProfileBio(varUserProfileBio)

	return err
}

type NullableUserProfileBio struct {
	value *UserProfileBio
	isSet bool
}

func (v NullableUserProfileBio) Get() *UserProfileBio {
	return v.value
}

func (v *NullableUserProfileBio) Set(val *UserProfileBio) {
	v.value = val
	v.isSet = true
}

func (v NullableUserProfileBio) IsSet() bool {
	return v.isSet
}

func (v *NullableUserProfileBio) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserProfileBio(val *UserProfileBio) *NullableUserProfileBio {
	return &NullableUserProfileBio{value: val, isSet: true}
}

func (v NullableUserProfileBio) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserProfileBio) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

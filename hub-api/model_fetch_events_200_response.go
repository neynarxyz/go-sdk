/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.21.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hub

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FetchEvents200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchEvents200Response{}

// FetchEvents200Response struct for FetchEvents200Response
type FetchEvents200Response struct {
	NextPageEventId int32 `json:"nextPageEventId"`
	Events []HubEvent `json:"events"`
}

type _FetchEvents200Response FetchEvents200Response

// NewFetchEvents200Response instantiates a new FetchEvents200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchEvents200Response(nextPageEventId int32, events []HubEvent) *FetchEvents200Response {
	this := FetchEvents200Response{}
	this.NextPageEventId = nextPageEventId
	this.Events = events
	return &this
}

// NewFetchEvents200ResponseWithDefaults instantiates a new FetchEvents200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchEvents200ResponseWithDefaults() *FetchEvents200Response {
	this := FetchEvents200Response{}
	return &this
}

// GetNextPageEventId returns the NextPageEventId field value
func (o *FetchEvents200Response) GetNextPageEventId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NextPageEventId
}

// GetNextPageEventIdOk returns a tuple with the NextPageEventId field value
// and a boolean to check if the value has been set.
func (o *FetchEvents200Response) GetNextPageEventIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextPageEventId, true
}

// SetNextPageEventId sets field value
func (o *FetchEvents200Response) SetNextPageEventId(v int32) {
	o.NextPageEventId = v
}

// GetEvents returns the Events field value
func (o *FetchEvents200Response) GetEvents() []HubEvent {
	if o == nil {
		var ret []HubEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *FetchEvents200Response) GetEventsOk() ([]HubEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *FetchEvents200Response) SetEvents(v []HubEvent) {
	o.Events = v
}

func (o FetchEvents200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchEvents200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nextPageEventId"] = o.NextPageEventId
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

func (o *FetchEvents200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nextPageEventId",
		"events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFetchEvents200Response := _FetchEvents200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFetchEvents200Response)

	if err != nil {
		return err
	}

	*o = FetchEvents200Response(varFetchEvents200Response)

	return err
}

type NullableFetchEvents200Response struct {
	value *FetchEvents200Response
	isSet bool
}

func (v NullableFetchEvents200Response) Get() *FetchEvents200Response {
	return v.value
}

func (v *NullableFetchEvents200Response) Set(val *FetchEvents200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchEvents200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchEvents200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchEvents200Response(val *FetchEvents200Response) *NullableFetchEvents200Response {
	return &NullableFetchEvents200Response{value: val, isSet: true}
}

func (v NullableFetchEvents200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchEvents200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



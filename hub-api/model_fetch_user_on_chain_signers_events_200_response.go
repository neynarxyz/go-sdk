/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.21.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hub

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FetchUserOnChainSignersEvents200Response - struct for FetchUserOnChainSignersEvents200Response
type FetchUserOnChainSignersEvents200Response struct {
	FetchUserOnChainSignersEvents200ResponseOneOf *FetchUserOnChainSignersEvents200ResponseOneOf
	OnChainEventSigner *OnChainEventSigner
}

// FetchUserOnChainSignersEvents200ResponseOneOfAsFetchUserOnChainSignersEvents200Response is a convenience function that returns FetchUserOnChainSignersEvents200ResponseOneOf wrapped in FetchUserOnChainSignersEvents200Response
func FetchUserOnChainSignersEvents200ResponseOneOfAsFetchUserOnChainSignersEvents200Response(v *FetchUserOnChainSignersEvents200ResponseOneOf) FetchUserOnChainSignersEvents200Response {
	return FetchUserOnChainSignersEvents200Response{
		FetchUserOnChainSignersEvents200ResponseOneOf: v,
	}
}

// OnChainEventSignerAsFetchUserOnChainSignersEvents200Response is a convenience function that returns OnChainEventSigner wrapped in FetchUserOnChainSignersEvents200Response
func OnChainEventSignerAsFetchUserOnChainSignersEvents200Response(v *OnChainEventSigner) FetchUserOnChainSignersEvents200Response {
	return FetchUserOnChainSignersEvents200Response{
		OnChainEventSigner: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FetchUserOnChainSignersEvents200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FetchUserOnChainSignersEvents200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.FetchUserOnChainSignersEvents200ResponseOneOf)
	if err == nil {
		jsonFetchUserOnChainSignersEvents200ResponseOneOf, _ := json.Marshal(dst.FetchUserOnChainSignersEvents200ResponseOneOf)
		if string(jsonFetchUserOnChainSignersEvents200ResponseOneOf) == "{}" { // empty struct
			dst.FetchUserOnChainSignersEvents200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.FetchUserOnChainSignersEvents200ResponseOneOf); err != nil {
				dst.FetchUserOnChainSignersEvents200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.FetchUserOnChainSignersEvents200ResponseOneOf = nil
	}

	// try to unmarshal data into OnChainEventSigner
	err = newStrictDecoder(data).Decode(&dst.OnChainEventSigner)
	if err == nil {
		jsonOnChainEventSigner, _ := json.Marshal(dst.OnChainEventSigner)
		if string(jsonOnChainEventSigner) == "{}" { // empty struct
			dst.OnChainEventSigner = nil
		} else {
			if err = validator.Validate(dst.OnChainEventSigner); err != nil {
				dst.OnChainEventSigner = nil
			} else {
				match++
			}
		}
	} else {
		dst.OnChainEventSigner = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FetchUserOnChainSignersEvents200ResponseOneOf = nil
		dst.OnChainEventSigner = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FetchUserOnChainSignersEvents200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FetchUserOnChainSignersEvents200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FetchUserOnChainSignersEvents200Response) MarshalJSON() ([]byte, error) {
	if src.FetchUserOnChainSignersEvents200ResponseOneOf != nil {
		return json.Marshal(&src.FetchUserOnChainSignersEvents200ResponseOneOf)
	}

	if src.OnChainEventSigner != nil {
		return json.Marshal(&src.OnChainEventSigner)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FetchUserOnChainSignersEvents200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FetchUserOnChainSignersEvents200ResponseOneOf != nil {
		return obj.FetchUserOnChainSignersEvents200ResponseOneOf
	}

	if obj.OnChainEventSigner != nil {
		return obj.OnChainEventSigner
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FetchUserOnChainSignersEvents200Response) GetActualInstanceValue() (interface{}) {
	if obj.FetchUserOnChainSignersEvents200ResponseOneOf != nil {
		return *obj.FetchUserOnChainSignersEvents200ResponseOneOf
	}

	if obj.OnChainEventSigner != nil {
		return *obj.OnChainEventSigner
	}

	// all schemas are nil
	return nil
}

type NullableFetchUserOnChainSignersEvents200Response struct {
	value *FetchUserOnChainSignersEvents200Response
	isSet bool
}

func (v NullableFetchUserOnChainSignersEvents200Response) Get() *FetchUserOnChainSignersEvents200Response {
	return v.value
}

func (v *NullableFetchUserOnChainSignersEvents200Response) Set(val *FetchUserOnChainSignersEvents200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchUserOnChainSignersEvents200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchUserOnChainSignersEvents200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchUserOnChainSignersEvents200Response(val *FetchUserOnChainSignersEvents200Response) *NullableFetchUserOnChainSignersEvents200Response {
	return &NullableFetchUserOnChainSignersEvents200Response{value: val, isSet: true}
}

func (v NullableFetchUserOnChainSignersEvents200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchUserOnChainSignersEvents200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



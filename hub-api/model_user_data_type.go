/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.21.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hub

import (
	"encoding/json"
	"fmt"
)

// UserDataType Specifies which field of a user's profile is being updated. - USER_DATA_TYPE_PFP: Profile Picture URL for the user's avatar - USER_DATA_TYPE_DISPLAY: Display Name shown on the user's profile - USER_DATA_TYPE_BIO: Biography or description of the user - USER_DATA_TYPE_URL: Website or social media link for the user - USER_DATA_TYPE_USERNAME: Preferred username for the user
type UserDataType string

// List of UserDataType
const (
	USERDATATYPE_USER_DATA_TYPE_PFP UserDataType = "USER_DATA_TYPE_PFP"
	USERDATATYPE_USER_DATA_TYPE_DISPLAY UserDataType = "USER_DATA_TYPE_DISPLAY"
	USERDATATYPE_USER_DATA_TYPE_BIO UserDataType = "USER_DATA_TYPE_BIO"
	USERDATATYPE_USER_DATA_TYPE_URL UserDataType = "USER_DATA_TYPE_URL"
	USERDATATYPE_USER_DATA_TYPE_USERNAME UserDataType = "USER_DATA_TYPE_USERNAME"
)

// All allowed values of UserDataType enum
var AllowedUserDataTypeEnumValues = []UserDataType{
	"USER_DATA_TYPE_PFP",
	"USER_DATA_TYPE_DISPLAY",
	"USER_DATA_TYPE_BIO",
	"USER_DATA_TYPE_URL",
	"USER_DATA_TYPE_USERNAME",
}

func (v *UserDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserDataType(value)
	for _, existing := range AllowedUserDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserDataType", value)
}

// NewUserDataTypeFromValue returns a pointer to a valid UserDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserDataTypeFromValue(v string) (*UserDataType, error) {
	ev := UserDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserDataType: valid values are %v", v, AllowedUserDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserDataType) IsValid() bool {
	for _, existing := range AllowedUserDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserDataType value
func (v UserDataType) Ptr() *UserDataType {
	return &v
}

type NullableUserDataType struct {
	value *UserDataType
	isSet bool
}

func (v NullableUserDataType) Get() *UserDataType {
	return v.value
}

func (v *NullableUserDataType) Set(val *UserDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDataType(val *UserDataType) *NullableUserDataType {
	return &NullableUserDataType{value: val, isSet: true}
}

func (v NullableUserDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


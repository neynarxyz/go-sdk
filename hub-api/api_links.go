/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.21.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hub

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type LinksAPI interface {

	/*
		FetchUserFollowers To target FID

		Fetch a list of users that are following a user.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchUserFollowersRequest
	*/
	FetchUserFollowers(ctx context.Context) ApiFetchUserFollowersRequest

	// FetchUserFollowersExecute executes the request
	//  @return FetchUserFollowing200Response
	FetchUserFollowersExecute(r ApiFetchUserFollowersRequest) (*FetchUserFollowing200Response, *http.Response, error)

	/*
		FetchUserFollowing From source FID

		Fetch a list of users that a user is following.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiFetchUserFollowingRequest
	*/
	FetchUserFollowing(ctx context.Context) ApiFetchUserFollowingRequest

	// FetchUserFollowingExecute executes the request
	//  @return FetchUserFollowing200Response
	FetchUserFollowingExecute(r ApiFetchUserFollowingRequest) (*FetchUserFollowing200Response, *http.Response, error)

	/*
		LookupUserRelation By its FID and target FID

		Lookup a link by its FID and target FID.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiLookupUserRelationRequest
	*/
	LookupUserRelation(ctx context.Context) ApiLookupUserRelationRequest

	// LookupUserRelationExecute executes the request
	//  @return LinkAdd
	LookupUserRelationExecute(r ApiLookupUserRelationRequest) (*LinkAdd, *http.Response, error)
}

// LinksAPIService LinksAPI service
type LinksAPIService service

type ApiFetchUserFollowersRequest struct {
	ctx        context.Context
	ApiService LinksAPI
	targetFid  *int32
	linkType   *LinkType
	pageSize   *int32
	reverse    *bool
	pageToken  *string
}

// The FID of the target user for this link
func (r ApiFetchUserFollowersRequest) TargetFid(targetFid int32) ApiFetchUserFollowersRequest {
	r.targetFid = &targetFid
	return r
}

func (r ApiFetchUserFollowersRequest) LinkType(linkType LinkType) ApiFetchUserFollowersRequest {
	r.linkType = &linkType
	return r
}

// Maximum number of messages to return in a single response
func (r ApiFetchUserFollowersRequest) PageSize(pageSize int32) ApiFetchUserFollowersRequest {
	r.pageSize = &pageSize
	return r
}

// Reverse the sort order, returning latest messages first
func (r ApiFetchUserFollowersRequest) Reverse(reverse bool) ApiFetchUserFollowersRequest {
	r.reverse = &reverse
	return r
}

// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
func (r ApiFetchUserFollowersRequest) PageToken(pageToken string) ApiFetchUserFollowersRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiFetchUserFollowersRequest) Execute() (*FetchUserFollowing200Response, *http.Response, error) {
	return r.ApiService.FetchUserFollowersExecute(r)
}

/*
FetchUserFollowers To target FID

Fetch a list of users that are following a user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchUserFollowersRequest
*/
func (a *LinksAPIService) FetchUserFollowers(ctx context.Context) ApiFetchUserFollowersRequest {
	return ApiFetchUserFollowersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FetchUserFollowing200Response
func (a *LinksAPIService) FetchUserFollowersExecute(r ApiFetchUserFollowersRequest) (*FetchUserFollowing200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FetchUserFollowing200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinksAPIService.FetchUserFollowers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/linksByTargetFid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.targetFid == nil {
		return localVarReturnValue, nil, reportError("targetFid is required and must be specified")
	}
	if *r.targetFid < 1 {
		return localVarReturnValue, nil, reportError("targetFid must be greater than 1")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "target_fid", r.targetFid, "form", "")
	if r.linkType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_type", r.linkType, "form", "")
	} else {
		var defaultValue LinkType = "follow"
		r.linkType = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.reverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse", r.reverse, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchUserFollowingRequest struct {
	ctx        context.Context
	ApiService LinksAPI
	fid        *int32
	linkType   *LinkType
	pageSize   *int32
	reverse    *bool
	pageToken  *string
}

// The FID of the link&#39;s originator
func (r ApiFetchUserFollowingRequest) Fid(fid int32) ApiFetchUserFollowingRequest {
	r.fid = &fid
	return r
}

func (r ApiFetchUserFollowingRequest) LinkType(linkType LinkType) ApiFetchUserFollowingRequest {
	r.linkType = &linkType
	return r
}

// Maximum number of messages to return in a single response
func (r ApiFetchUserFollowingRequest) PageSize(pageSize int32) ApiFetchUserFollowingRequest {
	r.pageSize = &pageSize
	return r
}

// Reverse the sort order, returning latest messages first
func (r ApiFetchUserFollowingRequest) Reverse(reverse bool) ApiFetchUserFollowingRequest {
	r.reverse = &reverse
	return r
}

// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
func (r ApiFetchUserFollowingRequest) PageToken(pageToken string) ApiFetchUserFollowingRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiFetchUserFollowingRequest) Execute() (*FetchUserFollowing200Response, *http.Response, error) {
	return r.ApiService.FetchUserFollowingExecute(r)
}

/*
FetchUserFollowing From source FID

Fetch a list of users that a user is following.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchUserFollowingRequest
*/
func (a *LinksAPIService) FetchUserFollowing(ctx context.Context) ApiFetchUserFollowingRequest {
	return ApiFetchUserFollowingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FetchUserFollowing200Response
func (a *LinksAPIService) FetchUserFollowingExecute(r ApiFetchUserFollowingRequest) (*FetchUserFollowing200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FetchUserFollowing200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinksAPIService.FetchUserFollowing")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/linksByFid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if *r.fid < 1 {
		return localVarReturnValue, nil, reportError("fid must be greater than 1")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	if r.linkType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_type", r.linkType, "form", "")
	} else {
		var defaultValue LinkType = "follow"
		r.linkType = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.reverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse", r.reverse, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLookupUserRelationRequest struct {
	ctx        context.Context
	ApiService LinksAPI
	fid        *int32
	targetFid  *int32
	linkType   *LinkType
}

// The FID of the link&#39;s originator
func (r ApiLookupUserRelationRequest) Fid(fid int32) ApiLookupUserRelationRequest {
	r.fid = &fid
	return r
}

// The FID of the target user for this link
func (r ApiLookupUserRelationRequest) TargetFid(targetFid int32) ApiLookupUserRelationRequest {
	r.targetFid = &targetFid
	return r
}

func (r ApiLookupUserRelationRequest) LinkType(linkType LinkType) ApiLookupUserRelationRequest {
	r.linkType = &linkType
	return r
}

func (r ApiLookupUserRelationRequest) Execute() (*LinkAdd, *http.Response, error) {
	return r.ApiService.LookupUserRelationExecute(r)
}

/*
LookupUserRelation By its FID and target FID

Lookup a link by its FID and target FID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiLookupUserRelationRequest
*/
func (a *LinksAPIService) LookupUserRelation(ctx context.Context) ApiLookupUserRelationRequest {
	return ApiLookupUserRelationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LinkAdd
func (a *LinksAPIService) LookupUserRelationExecute(r ApiLookupUserRelationRequest) (*LinkAdd, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LinkAdd
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinksAPIService.LookupUserRelation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/linkById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fid == nil {
		return localVarReturnValue, nil, reportError("fid is required and must be specified")
	}
	if *r.fid < 1 {
		return localVarReturnValue, nil, reportError("fid must be greater than 1")
	}
	if r.targetFid == nil {
		return localVarReturnValue, nil, reportError("targetFid is required and must be specified")
	}
	if *r.targetFid < 1 {
		return localVarReturnValue, nil, reportError("targetFid must be greater than 1")
	}
	if r.linkType == nil {
		return localVarReturnValue, nil, reportError("linkType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "target_fid", r.targetFid, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "link_type", r.linkType, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.21.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hub

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageDataCastRemove type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageDataCastRemove{}

// MessageDataCastRemove Represents a request to remove (delete) a previously created cast. Only the original creator of a cast can remove it.
type MessageDataCastRemove struct {
	// The unique identifier (FID) of the user who created this message. FIDs are assigned sequentially when users register on the network and cannot be changed.
	Fid int32 `json:"fid"`
	// Seconds since Farcaster Epoch (2021-01-01T00:00:00Z). Used to order messages chronologically and determine the most recent state. Must be within 10 minutes of the current time when the message is created.
	Timestamp int64 `json:"timestamp"`
	Network FarcasterNetwork `json:"network"`
	// The unique hash identifier of the cast to be removed. Must be a cast that was previously created by the same FID specified in the message.
	TargetHash string `json:"targetHash" validate:"regexp=^0x[0-9a-fA-F]{40}$"`
}

type _MessageDataCastRemove MessageDataCastRemove

// NewMessageDataCastRemove instantiates a new MessageDataCastRemove object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageDataCastRemove(fid int32, timestamp int64, network FarcasterNetwork, targetHash string) *MessageDataCastRemove {
	this := MessageDataCastRemove{}
	this.Fid = fid
	this.Timestamp = timestamp
	this.Network = network
	this.TargetHash = targetHash
	return &this
}

// NewMessageDataCastRemoveWithDefaults instantiates a new MessageDataCastRemove object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageDataCastRemoveWithDefaults() *MessageDataCastRemove {
	this := MessageDataCastRemove{}
	var network FarcasterNetwork = FARCASTERNETWORK_FARCASTER_NETWORK_MAINNET
	this.Network = network
	return &this
}

// GetFid returns the Fid field value
func (o *MessageDataCastRemove) GetFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Fid
}

// GetFidOk returns a tuple with the Fid field value
// and a boolean to check if the value has been set.
func (o *MessageDataCastRemove) GetFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fid, true
}

// SetFid sets field value
func (o *MessageDataCastRemove) SetFid(v int32) {
	o.Fid = v
}

// GetTimestamp returns the Timestamp field value
func (o *MessageDataCastRemove) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *MessageDataCastRemove) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *MessageDataCastRemove) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetNetwork returns the Network field value
func (o *MessageDataCastRemove) GetNetwork() FarcasterNetwork {
	if o == nil {
		var ret FarcasterNetwork
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *MessageDataCastRemove) GetNetworkOk() (*FarcasterNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *MessageDataCastRemove) SetNetwork(v FarcasterNetwork) {
	o.Network = v
}

// GetTargetHash returns the TargetHash field value
func (o *MessageDataCastRemove) GetTargetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetHash
}

// GetTargetHashOk returns a tuple with the TargetHash field value
// and a boolean to check if the value has been set.
func (o *MessageDataCastRemove) GetTargetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetHash, true
}

// SetTargetHash sets field value
func (o *MessageDataCastRemove) SetTargetHash(v string) {
	o.TargetHash = v
}

func (o MessageDataCastRemove) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageDataCastRemove) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fid"] = o.Fid
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["network"] = o.Network
	toSerialize["targetHash"] = o.TargetHash
	return toSerialize, nil
}

func (o *MessageDataCastRemove) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fid",
		"timestamp",
		"network",
		"targetHash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageDataCastRemove := _MessageDataCastRemove{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageDataCastRemove)

	if err != nil {
		return err
	}

	*o = MessageDataCastRemove(varMessageDataCastRemove)

	return err
}

type NullableMessageDataCastRemove struct {
	value *MessageDataCastRemove
	isSet bool
}

func (v NullableMessageDataCastRemove) Get() *MessageDataCastRemove {
	return v.value
}

func (v *NullableMessageDataCastRemove) Set(val *MessageDataCastRemove) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageDataCastRemove) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageDataCastRemove) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageDataCastRemove(val *MessageDataCastRemove) *NullableMessageDataCastRemove {
	return &NullableMessageDataCastRemove{value: val, isSet: true}
}

func (v NullableMessageDataCastRemove) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageDataCastRemove) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



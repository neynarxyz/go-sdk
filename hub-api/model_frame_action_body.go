/*
Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.21.0
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hub

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FrameActionBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameActionBody{}

// FrameActionBody Contains the data for a user's interaction with a Farcaster Frame. Frames are interactive elements within casts that can have up to 4 clickable buttons, allowing users to engage with content in predefined ways.
type FrameActionBody struct {
	// The URL associated with the frame action. This typically points to the frame's content or the destination that handles the interaction.
	Url string `json:"url"`
	// Identifies which button the user clicked in the frame. Frames can have up to 4 buttons, numbered from 1 to 4.
	ButtonIndex int32 `json:"buttonIndex"`
	// The unique identifier of the cast containing the frame that was interacted with.
	CastId CastId `json:"castId"`
}

type _FrameActionBody FrameActionBody

// NewFrameActionBody instantiates a new FrameActionBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameActionBody(url string, buttonIndex int32, castId CastId) *FrameActionBody {
	this := FrameActionBody{}
	this.Url = url
	this.ButtonIndex = buttonIndex
	this.CastId = castId
	return &this
}

// NewFrameActionBodyWithDefaults instantiates a new FrameActionBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameActionBodyWithDefaults() *FrameActionBody {
	this := FrameActionBody{}
	return &this
}

// GetUrl returns the Url field value
func (o *FrameActionBody) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FrameActionBody) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FrameActionBody) SetUrl(v string) {
	o.Url = v
}

// GetButtonIndex returns the ButtonIndex field value
func (o *FrameActionBody) GetButtonIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ButtonIndex
}

// GetButtonIndexOk returns a tuple with the ButtonIndex field value
// and a boolean to check if the value has been set.
func (o *FrameActionBody) GetButtonIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ButtonIndex, true
}

// SetButtonIndex sets field value
func (o *FrameActionBody) SetButtonIndex(v int32) {
	o.ButtonIndex = v
}

// GetCastId returns the CastId field value
func (o *FrameActionBody) GetCastId() CastId {
	if o == nil {
		var ret CastId
		return ret
	}

	return o.CastId
}

// GetCastIdOk returns a tuple with the CastId field value
// and a boolean to check if the value has been set.
func (o *FrameActionBody) GetCastIdOk() (*CastId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CastId, true
}

// SetCastId sets field value
func (o *FrameActionBody) SetCastId(v CastId) {
	o.CastId = v
}

func (o FrameActionBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameActionBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["buttonIndex"] = o.ButtonIndex
	toSerialize["castId"] = o.CastId
	return toSerialize, nil
}

func (o *FrameActionBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"buttonIndex",
		"castId",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varFrameActionBody := _FrameActionBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFrameActionBody)

	if err != nil {
		return err
	}

	*o = FrameActionBody(varFrameActionBody)

	return err
}

type NullableFrameActionBody struct {
	value *FrameActionBody
	isSet bool
}

func (v NullableFrameActionBody) Get() *FrameActionBody {
	return v.value
}

func (v *NullableFrameActionBody) Set(val *FrameActionBody) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameActionBody) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameActionBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameActionBody(val *FrameActionBody) *NullableFrameActionBody {
	return &NullableFrameActionBody{value: val, isSet: true}
}

func (v NullableFrameActionBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameActionBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

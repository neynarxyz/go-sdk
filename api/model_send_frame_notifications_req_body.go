/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SendFrameNotificationsReqBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendFrameNotificationsReqBody{}

// SendFrameNotificationsReqBody struct for SendFrameNotificationsReqBody
type SendFrameNotificationsReqBody struct {
	// An array of target FIDs to whom the notifications should be sent. Each FID must be a positive integer, with a maximum of 100 FIDs allowed per call.
	TargetFids   []int32                                   `json:"target_fids"`
	Notification SendFrameNotificationsReqBodyNotification `json:"notification"`
}

type _SendFrameNotificationsReqBody SendFrameNotificationsReqBody

// NewSendFrameNotificationsReqBody instantiates a new SendFrameNotificationsReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendFrameNotificationsReqBody(targetFids []int32, notification SendFrameNotificationsReqBodyNotification) *SendFrameNotificationsReqBody {
	this := SendFrameNotificationsReqBody{}
	this.TargetFids = targetFids
	this.Notification = notification
	return &this
}

// NewSendFrameNotificationsReqBodyWithDefaults instantiates a new SendFrameNotificationsReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendFrameNotificationsReqBodyWithDefaults() *SendFrameNotificationsReqBody {
	this := SendFrameNotificationsReqBody{}
	return &this
}

// GetTargetFids returns the TargetFids field value
func (o *SendFrameNotificationsReqBody) GetTargetFids() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.TargetFids
}

// GetTargetFidsOk returns a tuple with the TargetFids field value
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsReqBody) GetTargetFidsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetFids, true
}

// SetTargetFids sets field value
func (o *SendFrameNotificationsReqBody) SetTargetFids(v []int32) {
	o.TargetFids = v
}

// GetNotification returns the Notification field value
func (o *SendFrameNotificationsReqBody) GetNotification() SendFrameNotificationsReqBodyNotification {
	if o == nil {
		var ret SendFrameNotificationsReqBodyNotification
		return ret
	}

	return o.Notification
}

// GetNotificationOk returns a tuple with the Notification field value
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsReqBody) GetNotificationOk() (*SendFrameNotificationsReqBodyNotification, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Notification, true
}

// SetNotification sets field value
func (o *SendFrameNotificationsReqBody) SetNotification(v SendFrameNotificationsReqBodyNotification) {
	o.Notification = v
}

func (o SendFrameNotificationsReqBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendFrameNotificationsReqBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["target_fids"] = o.TargetFids
	toSerialize["notification"] = o.Notification
	return toSerialize, nil
}

func (o *SendFrameNotificationsReqBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"target_fids",
		"notification",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varSendFrameNotificationsReqBody := _SendFrameNotificationsReqBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendFrameNotificationsReqBody)

	if err != nil {
		return err
	}

	*o = SendFrameNotificationsReqBody(varSendFrameNotificationsReqBody)

	return err
}

type NullableSendFrameNotificationsReqBody struct {
	value *SendFrameNotificationsReqBody
	isSet bool
}

func (v NullableSendFrameNotificationsReqBody) Get() *SendFrameNotificationsReqBody {
	return v.value
}

func (v *NullableSendFrameNotificationsReqBody) Set(val *SendFrameNotificationsReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSendFrameNotificationsReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSendFrameNotificationsReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendFrameNotificationsReqBody(val *SendFrameNotificationsReqBody) *NullableSendFrameNotificationsReqBody {
	return &NullableSendFrameNotificationsReqBody{value: val, isSet: true}
}

func (v NullableSendFrameNotificationsReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendFrameNotificationsReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

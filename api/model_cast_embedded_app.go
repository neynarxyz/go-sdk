/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CastEmbeddedApp - struct for CastEmbeddedApp
type CastEmbeddedApp struct {
	UserDehydrated *UserDehydrated
	Any            *interface{}
}

// UserDehydratedAsCastEmbeddedApp is a convenience function that returns UserDehydrated wrapped in CastEmbeddedApp
func UserDehydratedAsCastEmbeddedApp(v *UserDehydrated) CastEmbeddedApp {
	return CastEmbeddedApp{
		UserDehydrated: v,
	}
}

// interface{}AsCastEmbeddedApp is a convenience function that returns interface{} wrapped in CastEmbeddedApp
func AnyAsCastEmbeddedApp(v *interface{}) CastEmbeddedApp {
	return CastEmbeddedApp{
		Any: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CastEmbeddedApp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UserDehydrated
	err = newStrictDecoder(data).Decode(&dst.UserDehydrated)
	if err == nil {
		jsonUserDehydrated, _ := json.Marshal(dst.UserDehydrated)
		if string(jsonUserDehydrated) == "{}" { // empty struct
			dst.UserDehydrated = nil
		} else {
			if err = validator.Validate(dst.UserDehydrated); err != nil {
				dst.UserDehydrated = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserDehydrated = nil
	}

	// try to unmarshal data into Any
	err = newStrictDecoder(data).Decode(&dst.Any)
	if err == nil {
		jsonAny, _ := json.Marshal(dst.Any)
		if string(jsonAny) == "{}" { // empty struct
			dst.Any = nil
		} else {
			if err = validator.Validate(dst.Any); err != nil {
				dst.Any = nil
			} else {
				match++
			}
		}
	} else {
		dst.Any = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UserDehydrated = nil
		dst.Any = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CastEmbeddedApp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CastEmbeddedApp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CastEmbeddedApp) MarshalJSON() ([]byte, error) {
	if src.UserDehydrated != nil {
		return json.Marshal(&src.UserDehydrated)
	}

	if src.Any != nil {
		return json.Marshal(&src.Any)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CastEmbeddedApp) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UserDehydrated != nil {
		return obj.UserDehydrated
	}

	if obj.Any != nil {
		return obj.Any
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CastEmbeddedApp) GetActualInstanceValue() interface{} {
	if obj.UserDehydrated != nil {
		return *obj.UserDehydrated
	}

	if obj.Any != nil {
		return *obj.Any
	}

	// all schemas are nil
	return nil
}

type NullableCastEmbeddedApp struct {
	value *CastEmbeddedApp
	isSet bool
}

func (v NullableCastEmbeddedApp) Get() *CastEmbeddedApp {
	return v.value
}

func (v *NullableCastEmbeddedApp) Set(val *CastEmbeddedApp) {
	v.value = val
	v.isSet = true
}

func (v NullableCastEmbeddedApp) IsSet() bool {
	return v.isSet
}

func (v *NullableCastEmbeddedApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastEmbeddedApp(val *CastEmbeddedApp) *NullableCastEmbeddedApp {
	return &NullableCastEmbeddedApp{value: val, isSet: true}
}

func (v NullableCastEmbeddedApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastEmbeddedApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

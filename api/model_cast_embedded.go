/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CastEmbedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastEmbedded{}

// CastEmbedded struct for CastEmbedded
type CastEmbedded struct {
	Hash          string                   `json:"hash"`
	ParentHash    NullableString           `json:"parent_hash"`
	ParentUrl     NullableString           `json:"parent_url"`
	RootParentUrl NullableString           `json:"root_parent_url"`
	ParentAuthor  CastEmbeddedParentAuthor `json:"parent_author"`
	Author        UserDehydrated           `json:"author"`
	App           *UserDehydrated          `json:"app,omitempty"`
	Text          string                   `json:"text"`
	Timestamp     time.Time                `json:"timestamp"`
	Type          CastNotificationType     `json:"type"`
	Embeds        []EmbedDeep              `json:"embeds"`
	Channel       ChannelDehydrated        `json:"channel"`
}

type _CastEmbedded CastEmbedded

// NewCastEmbedded instantiates a new CastEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastEmbedded(hash string, parentHash NullableString, parentUrl NullableString, rootParentUrl NullableString, parentAuthor CastEmbeddedParentAuthor, author UserDehydrated, text string, timestamp time.Time, type_ CastNotificationType, embeds []EmbedDeep, channel ChannelDehydrated) *CastEmbedded {
	this := CastEmbedded{}
	this.Hash = hash
	this.ParentHash = parentHash
	this.ParentUrl = parentUrl
	this.RootParentUrl = rootParentUrl
	this.ParentAuthor = parentAuthor
	this.Author = author
	this.Text = text
	this.Timestamp = timestamp
	this.Type = type_
	this.Embeds = embeds
	this.Channel = channel
	return &this
}

// NewCastEmbeddedWithDefaults instantiates a new CastEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastEmbeddedWithDefaults() *CastEmbedded {
	this := CastEmbedded{}
	return &this
}

// GetHash returns the Hash field value
func (o *CastEmbedded) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *CastEmbedded) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *CastEmbedded) SetHash(v string) {
	o.Hash = v
}

// GetParentHash returns the ParentHash field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CastEmbedded) GetParentHash() string {
	if o == nil || o.ParentHash.Get() == nil {
		var ret string
		return ret
	}

	return *o.ParentHash.Get()
}

// GetParentHashOk returns a tuple with the ParentHash field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CastEmbedded) GetParentHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentHash.Get(), o.ParentHash.IsSet()
}

// SetParentHash sets field value
func (o *CastEmbedded) SetParentHash(v string) {
	o.ParentHash.Set(&v)
}

// GetParentUrl returns the ParentUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CastEmbedded) GetParentUrl() string {
	if o == nil || o.ParentUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.ParentUrl.Get()
}

// GetParentUrlOk returns a tuple with the ParentUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CastEmbedded) GetParentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentUrl.Get(), o.ParentUrl.IsSet()
}

// SetParentUrl sets field value
func (o *CastEmbedded) SetParentUrl(v string) {
	o.ParentUrl.Set(&v)
}

// GetRootParentUrl returns the RootParentUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CastEmbedded) GetRootParentUrl() string {
	if o == nil || o.RootParentUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.RootParentUrl.Get()
}

// GetRootParentUrlOk returns a tuple with the RootParentUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CastEmbedded) GetRootParentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootParentUrl.Get(), o.RootParentUrl.IsSet()
}

// SetRootParentUrl sets field value
func (o *CastEmbedded) SetRootParentUrl(v string) {
	o.RootParentUrl.Set(&v)
}

// GetParentAuthor returns the ParentAuthor field value
func (o *CastEmbedded) GetParentAuthor() CastEmbeddedParentAuthor {
	if o == nil {
		var ret CastEmbeddedParentAuthor
		return ret
	}

	return o.ParentAuthor
}

// GetParentAuthorOk returns a tuple with the ParentAuthor field value
// and a boolean to check if the value has been set.
func (o *CastEmbedded) GetParentAuthorOk() (*CastEmbeddedParentAuthor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentAuthor, true
}

// SetParentAuthor sets field value
func (o *CastEmbedded) SetParentAuthor(v CastEmbeddedParentAuthor) {
	o.ParentAuthor = v
}

// GetAuthor returns the Author field value
func (o *CastEmbedded) GetAuthor() UserDehydrated {
	if o == nil {
		var ret UserDehydrated
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *CastEmbedded) GetAuthorOk() (*UserDehydrated, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *CastEmbedded) SetAuthor(v UserDehydrated) {
	o.Author = v
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *CastEmbedded) GetApp() UserDehydrated {
	if o == nil || IsNil(o.App) {
		var ret UserDehydrated
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CastEmbedded) GetAppOk() (*UserDehydrated, bool) {
	if o == nil || IsNil(o.App) {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *CastEmbedded) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}

// SetApp gets a reference to the given UserDehydrated and assigns it to the App field.
func (o *CastEmbedded) SetApp(v UserDehydrated) {
	o.App = &v
}

// GetText returns the Text field value
func (o *CastEmbedded) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *CastEmbedded) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *CastEmbedded) SetText(v string) {
	o.Text = v
}

// GetTimestamp returns the Timestamp field value
func (o *CastEmbedded) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *CastEmbedded) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *CastEmbedded) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetType returns the Type field value
func (o *CastEmbedded) GetType() CastNotificationType {
	if o == nil {
		var ret CastNotificationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CastEmbedded) GetTypeOk() (*CastNotificationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CastEmbedded) SetType(v CastNotificationType) {
	o.Type = v
}

// GetEmbeds returns the Embeds field value
func (o *CastEmbedded) GetEmbeds() []EmbedDeep {
	if o == nil {
		var ret []EmbedDeep
		return ret
	}

	return o.Embeds
}

// GetEmbedsOk returns a tuple with the Embeds field value
// and a boolean to check if the value has been set.
func (o *CastEmbedded) GetEmbedsOk() ([]EmbedDeep, bool) {
	if o == nil {
		return nil, false
	}
	return o.Embeds, true
}

// SetEmbeds sets field value
func (o *CastEmbedded) SetEmbeds(v []EmbedDeep) {
	o.Embeds = v
}

// GetChannel returns the Channel field value
func (o *CastEmbedded) GetChannel() ChannelDehydrated {
	if o == nil {
		var ret ChannelDehydrated
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *CastEmbedded) GetChannelOk() (*ChannelDehydrated, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *CastEmbedded) SetChannel(v ChannelDehydrated) {
	o.Channel = v
}

func (o CastEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastEmbedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	toSerialize["parent_hash"] = o.ParentHash.Get()
	toSerialize["parent_url"] = o.ParentUrl.Get()
	toSerialize["root_parent_url"] = o.RootParentUrl.Get()
	toSerialize["parent_author"] = o.ParentAuthor
	toSerialize["author"] = o.Author
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	toSerialize["text"] = o.Text
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["type"] = o.Type
	toSerialize["embeds"] = o.Embeds
	toSerialize["channel"] = o.Channel
	return toSerialize, nil
}

func (o *CastEmbedded) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hash",
		"parent_hash",
		"parent_url",
		"root_parent_url",
		"parent_author",
		"author",
		"text",
		"timestamp",
		"type",
		"embeds",
		"channel",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varCastEmbedded := _CastEmbedded{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCastEmbedded)

	if err != nil {
		return err
	}

	*o = CastEmbedded(varCastEmbedded)

	return err
}

type NullableCastEmbedded struct {
	value *CastEmbedded
	isSet bool
}

func (v NullableCastEmbedded) Get() *CastEmbedded {
	return v.value
}

func (v *NullableCastEmbedded) Set(val *CastEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullableCastEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullableCastEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastEmbedded(val *CastEmbedded) *NullableCastEmbedded {
	return &NullableCastEmbedded{value: val, isSet: true}
}

func (v NullableCastEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UserVerifiedAddressesPrimarySolAddress - struct for UserVerifiedAddressesPrimarySolAddress
type UserVerifiedAddressesPrimarySolAddress struct {
	Any    *interface{}
	String *string
}

// interface{}AsUserVerifiedAddressesPrimarySolAddress is a convenience function that returns interface{} wrapped in UserVerifiedAddressesPrimarySolAddress
func AnyAsUserVerifiedAddressesPrimarySolAddress(v *interface{}) UserVerifiedAddressesPrimarySolAddress {
	return UserVerifiedAddressesPrimarySolAddress{
		Any: v,
	}
}

// stringAsUserVerifiedAddressesPrimarySolAddress is a convenience function that returns string wrapped in UserVerifiedAddressesPrimarySolAddress
func StringAsUserVerifiedAddressesPrimarySolAddress(v *string) UserVerifiedAddressesPrimarySolAddress {
	return UserVerifiedAddressesPrimarySolAddress{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UserVerifiedAddressesPrimarySolAddress) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Any
	err = newStrictDecoder(data).Decode(&dst.Any)
	if err == nil {
		jsonAny, _ := json.Marshal(dst.Any)
		if string(jsonAny) == "{}" { // empty struct
			dst.Any = nil
		} else {
			if err = validator.Validate(dst.Any); err != nil {
				dst.Any = nil
			} else {
				match++
			}
		}
	} else {
		dst.Any = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Any = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UserVerifiedAddressesPrimarySolAddress)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UserVerifiedAddressesPrimarySolAddress)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UserVerifiedAddressesPrimarySolAddress) MarshalJSON() ([]byte, error) {
	if src.Any != nil {
		return json.Marshal(&src.Any)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UserVerifiedAddressesPrimarySolAddress) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Any != nil {
		return obj.Any
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UserVerifiedAddressesPrimarySolAddress) GetActualInstanceValue() interface{} {
	if obj.Any != nil {
		return *obj.Any
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUserVerifiedAddressesPrimarySolAddress struct {
	value *UserVerifiedAddressesPrimarySolAddress
	isSet bool
}

func (v NullableUserVerifiedAddressesPrimarySolAddress) Get() *UserVerifiedAddressesPrimarySolAddress {
	return v.value
}

func (v *NullableUserVerifiedAddressesPrimarySolAddress) Set(val *UserVerifiedAddressesPrimarySolAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableUserVerifiedAddressesPrimarySolAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableUserVerifiedAddressesPrimarySolAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserVerifiedAddressesPrimarySolAddress(val *UserVerifiedAddressesPrimarySolAddress) *NullableUserVerifiedAddressesPrimarySolAddress {
	return &NullableUserVerifiedAddressesPrimarySolAddress{value: val, isSet: true}
}

func (v NullableUserVerifiedAddressesPrimarySolAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserVerifiedAddressesPrimarySolAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

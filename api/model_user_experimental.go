/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserExperimental type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserExperimental{}

// UserExperimental struct for UserExperimental
type UserExperimental struct {
	// Score that represents the probability that the account is not spam.
	NeynarUserScore float64 `json:"neynar_user_score"`
}

type _UserExperimental UserExperimental

// NewUserExperimental instantiates a new UserExperimental object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserExperimental(neynarUserScore float64) *UserExperimental {
	this := UserExperimental{}
	this.NeynarUserScore = neynarUserScore
	return &this
}

// NewUserExperimentalWithDefaults instantiates a new UserExperimental object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserExperimentalWithDefaults() *UserExperimental {
	this := UserExperimental{}
	return &this
}

// GetNeynarUserScore returns the NeynarUserScore field value
func (o *UserExperimental) GetNeynarUserScore() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NeynarUserScore
}

// GetNeynarUserScoreOk returns a tuple with the NeynarUserScore field value
// and a boolean to check if the value has been set.
func (o *UserExperimental) GetNeynarUserScoreOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NeynarUserScore, true
}

// SetNeynarUserScore sets field value
func (o *UserExperimental) SetNeynarUserScore(v float64) {
	o.NeynarUserScore = v
}


func (o UserExperimental) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserExperimental) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["neynar_user_score"] = o.NeynarUserScore
	return toSerialize, nil
}

func (o *UserExperimental) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"neynar_user_score",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varUserExperimental := _UserExperimental{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserExperimental)

	if err != nil {
		return err
	}

	*o = UserExperimental(varUserExperimental)

	return err
}

type NullableUserExperimental struct {
	value *UserExperimental
	isSet bool
}

func (v NullableUserExperimental) Get() *UserExperimental {
	return v.value
}

func (v *NullableUserExperimental) Set(val *UserExperimental) {
	v.value = val
	v.isSet = true
}

func (v NullableUserExperimental) IsSet() bool {
	return v.isSet
}

func (v *NullableUserExperimental) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserExperimental(val *UserExperimental) *NullableUserExperimental {
	return &NullableUserExperimental{value: val, isSet: true}
}

func (v NullableUserExperimental) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserExperimental) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



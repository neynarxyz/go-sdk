/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OembedVideoData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OembedVideoData{}

// OembedVideoData struct for OembedVideoData
type OembedVideoData struct {
	Type string `json:"type"`
	Version string `json:"version"`
	// A text title, describing the resource.
	Title *string `json:"title,omitempty"`
	// The name of the author/owner of the resource.
	AuthorName *string `json:"author_name,omitempty"`
	// A URL for the author/owner of the resource.
	AuthorUrl *string `json:"author_url,omitempty"`
	// The name of the resource provider.
	ProviderName *string `json:"provider_name,omitempty"`
	// The url of the resource provider.
	ProviderUrl *string `json:"provider_url,omitempty"`
	// The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not.
	CacheAge *string `json:"cache_age,omitempty"`
	// A URL to a thumbnail image representing the resource. The thumbnail must respect any maxwidth and maxheight parameters. If this parameter is present, thumbnail_width and thumbnail_height must also be present.
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`
	// The width of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_height must also be present.
	ThumbnailWidth *float32 `json:"thumbnail_width,omitempty"`
	// The height of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_width must also be present.
	ThumbnailHeight *float32 `json:"thumbnail_height,omitempty"`
	// The HTML required to embed a video player. The HTML should have no padding or margins. Consumers may wish to load the HTML in an off-domain iframe to avoid XSS vulnerabilities.
	Html NullableString `json:"html"`
	// The width in pixels required to display the HTML.
	Width NullableFloat32 `json:"width"`
	// The height in pixels required to display the HTML.
	Height NullableFloat32 `json:"height"`
}

type _OembedVideoData OembedVideoData

// NewOembedVideoData instantiates a new OembedVideoData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOembedVideoData(type_ string, version string, html NullableString, width NullableFloat32, height NullableFloat32) *OembedVideoData {
	this := OembedVideoData{}
	this.Type = type_
	this.Version = version
	this.Html = html
	this.Width = width
	this.Height = height
	return &this
}

// NewOembedVideoDataWithDefaults instantiates a new OembedVideoData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOembedVideoDataWithDefaults() *OembedVideoData {
	this := OembedVideoData{}
	return &this
}

// GetType returns the Type field value
func (o *OembedVideoData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OembedVideoData) SetType(v string) {
	o.Type = v
}

// GetVersion returns the Version field value
func (o *OembedVideoData) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *OembedVideoData) SetVersion(v string) {
	o.Version = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *OembedVideoData) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *OembedVideoData) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *OembedVideoData) SetTitle(v string) {
	o.Title = &v
}

// GetAuthorName returns the AuthorName field value if set, zero value otherwise.
func (o *OembedVideoData) GetAuthorName() string {
	if o == nil || IsNil(o.AuthorName) {
		var ret string
		return ret
	}
	return *o.AuthorName
}

// GetAuthorNameOk returns a tuple with the AuthorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetAuthorNameOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorName) {
		return nil, false
	}
	return o.AuthorName, true
}

// HasAuthorName returns a boolean if a field has been set.
func (o *OembedVideoData) HasAuthorName() bool {
	if o != nil && !IsNil(o.AuthorName) {
		return true
	}

	return false
}

// SetAuthorName gets a reference to the given string and assigns it to the AuthorName field.
func (o *OembedVideoData) SetAuthorName(v string) {
	o.AuthorName = &v
}

// GetAuthorUrl returns the AuthorUrl field value if set, zero value otherwise.
func (o *OembedVideoData) GetAuthorUrl() string {
	if o == nil || IsNil(o.AuthorUrl) {
		var ret string
		return ret
	}
	return *o.AuthorUrl
}

// GetAuthorUrlOk returns a tuple with the AuthorUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetAuthorUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorUrl) {
		return nil, false
	}
	return o.AuthorUrl, true
}

// HasAuthorUrl returns a boolean if a field has been set.
func (o *OembedVideoData) HasAuthorUrl() bool {
	if o != nil && !IsNil(o.AuthorUrl) {
		return true
	}

	return false
}

// SetAuthorUrl gets a reference to the given string and assigns it to the AuthorUrl field.
func (o *OembedVideoData) SetAuthorUrl(v string) {
	o.AuthorUrl = &v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *OembedVideoData) GetProviderName() string {
	if o == nil || IsNil(o.ProviderName) {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetProviderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderName) {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *OembedVideoData) HasProviderName() bool {
	if o != nil && !IsNil(o.ProviderName) {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *OembedVideoData) SetProviderName(v string) {
	o.ProviderName = &v
}

// GetProviderUrl returns the ProviderUrl field value if set, zero value otherwise.
func (o *OembedVideoData) GetProviderUrl() string {
	if o == nil || IsNil(o.ProviderUrl) {
		var ret string
		return ret
	}
	return *o.ProviderUrl
}

// GetProviderUrlOk returns a tuple with the ProviderUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetProviderUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderUrl) {
		return nil, false
	}
	return o.ProviderUrl, true
}

// HasProviderUrl returns a boolean if a field has been set.
func (o *OembedVideoData) HasProviderUrl() bool {
	if o != nil && !IsNil(o.ProviderUrl) {
		return true
	}

	return false
}

// SetProviderUrl gets a reference to the given string and assigns it to the ProviderUrl field.
func (o *OembedVideoData) SetProviderUrl(v string) {
	o.ProviderUrl = &v
}

// GetCacheAge returns the CacheAge field value if set, zero value otherwise.
func (o *OembedVideoData) GetCacheAge() string {
	if o == nil || IsNil(o.CacheAge) {
		var ret string
		return ret
	}
	return *o.CacheAge
}

// GetCacheAgeOk returns a tuple with the CacheAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetCacheAgeOk() (*string, bool) {
	if o == nil || IsNil(o.CacheAge) {
		return nil, false
	}
	return o.CacheAge, true
}

// HasCacheAge returns a boolean if a field has been set.
func (o *OembedVideoData) HasCacheAge() bool {
	if o != nil && !IsNil(o.CacheAge) {
		return true
	}

	return false
}

// SetCacheAge gets a reference to the given string and assigns it to the CacheAge field.
func (o *OembedVideoData) SetCacheAge(v string) {
	o.CacheAge = &v
}

// GetThumbnailUrl returns the ThumbnailUrl field value if set, zero value otherwise.
func (o *OembedVideoData) GetThumbnailUrl() string {
	if o == nil || IsNil(o.ThumbnailUrl) {
		var ret string
		return ret
	}
	return *o.ThumbnailUrl
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetThumbnailUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ThumbnailUrl) {
		return nil, false
	}
	return o.ThumbnailUrl, true
}

// HasThumbnailUrl returns a boolean if a field has been set.
func (o *OembedVideoData) HasThumbnailUrl() bool {
	if o != nil && !IsNil(o.ThumbnailUrl) {
		return true
	}

	return false
}

// SetThumbnailUrl gets a reference to the given string and assigns it to the ThumbnailUrl field.
func (o *OembedVideoData) SetThumbnailUrl(v string) {
	o.ThumbnailUrl = &v
}

// GetThumbnailWidth returns the ThumbnailWidth field value if set, zero value otherwise.
func (o *OembedVideoData) GetThumbnailWidth() float32 {
	if o == nil || IsNil(o.ThumbnailWidth) {
		var ret float32
		return ret
	}
	return *o.ThumbnailWidth
}

// GetThumbnailWidthOk returns a tuple with the ThumbnailWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetThumbnailWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.ThumbnailWidth) {
		return nil, false
	}
	return o.ThumbnailWidth, true
}

// HasThumbnailWidth returns a boolean if a field has been set.
func (o *OembedVideoData) HasThumbnailWidth() bool {
	if o != nil && !IsNil(o.ThumbnailWidth) {
		return true
	}

	return false
}

// SetThumbnailWidth gets a reference to the given float32 and assigns it to the ThumbnailWidth field.
func (o *OembedVideoData) SetThumbnailWidth(v float32) {
	o.ThumbnailWidth = &v
}

// GetThumbnailHeight returns the ThumbnailHeight field value if set, zero value otherwise.
func (o *OembedVideoData) GetThumbnailHeight() float32 {
	if o == nil || IsNil(o.ThumbnailHeight) {
		var ret float32
		return ret
	}
	return *o.ThumbnailHeight
}

// GetThumbnailHeightOk returns a tuple with the ThumbnailHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OembedVideoData) GetThumbnailHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.ThumbnailHeight) {
		return nil, false
	}
	return o.ThumbnailHeight, true
}

// HasThumbnailHeight returns a boolean if a field has been set.
func (o *OembedVideoData) HasThumbnailHeight() bool {
	if o != nil && !IsNil(o.ThumbnailHeight) {
		return true
	}

	return false
}

// SetThumbnailHeight gets a reference to the given float32 and assigns it to the ThumbnailHeight field.
func (o *OembedVideoData) SetThumbnailHeight(v float32) {
	o.ThumbnailHeight = &v
}

// GetHtml returns the Html field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OembedVideoData) GetHtml() string {
	if o == nil || o.Html.Get() == nil {
		var ret string
		return ret
	}

	return *o.Html.Get()
}

// GetHtmlOk returns a tuple with the Html field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedVideoData) GetHtmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Html.Get(), o.Html.IsSet()
}

// SetHtml sets field value
func (o *OembedVideoData) SetHtml(v string) {
	o.Html.Set(&v)
}

// GetWidth returns the Width field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *OembedVideoData) GetWidth() float32 {
	if o == nil || o.Width.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Width.Get()
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedVideoData) GetWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Width.Get(), o.Width.IsSet()
}

// SetWidth sets field value
func (o *OembedVideoData) SetWidth(v float32) {
	o.Width.Set(&v)
}

// GetHeight returns the Height field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *OembedVideoData) GetHeight() float32 {
	if o == nil || o.Height.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Height.Get()
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OembedVideoData) GetHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Height.Get(), o.Height.IsSet()
}

// SetHeight sets field value
func (o *OembedVideoData) SetHeight(v float32) {
	o.Height.Set(&v)
}

func (o OembedVideoData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OembedVideoData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["version"] = o.Version
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.AuthorName) {
		toSerialize["author_name"] = o.AuthorName
	}
	if !IsNil(o.AuthorUrl) {
		toSerialize["author_url"] = o.AuthorUrl
	}
	if !IsNil(o.ProviderName) {
		toSerialize["provider_name"] = o.ProviderName
	}
	if !IsNil(o.ProviderUrl) {
		toSerialize["provider_url"] = o.ProviderUrl
	}
	if !IsNil(o.CacheAge) {
		toSerialize["cache_age"] = o.CacheAge
	}
	if !IsNil(o.ThumbnailUrl) {
		toSerialize["thumbnail_url"] = o.ThumbnailUrl
	}
	if !IsNil(o.ThumbnailWidth) {
		toSerialize["thumbnail_width"] = o.ThumbnailWidth
	}
	if !IsNil(o.ThumbnailHeight) {
		toSerialize["thumbnail_height"] = o.ThumbnailHeight
	}
	toSerialize["html"] = o.Html.Get()
	toSerialize["width"] = o.Width.Get()
	toSerialize["height"] = o.Height.Get()
	return toSerialize, nil
}

func (o *OembedVideoData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"version",
		"html",
		"width",
		"height",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOembedVideoData := _OembedVideoData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOembedVideoData)

	if err != nil {
		return err
	}

	*o = OembedVideoData(varOembedVideoData)

	return err
}

type NullableOembedVideoData struct {
	value *OembedVideoData
	isSet bool
}

func (v NullableOembedVideoData) Get() *OembedVideoData {
	return v.value
}

func (v *NullableOembedVideoData) Set(val *OembedVideoData) {
	v.value = val
	v.isSet = true
}

func (v NullableOembedVideoData) IsSet() bool {
	return v.isSet
}

func (v *NullableOembedVideoData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOembedVideoData(val *OembedVideoData) *NullableOembedVideoData {
	return &NullableOembedVideoData{value: val, isSet: true}
}

func (v NullableOembedVideoData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOembedVideoData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



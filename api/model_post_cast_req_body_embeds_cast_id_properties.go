/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostCastReqBodyEmbedsCastIdProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostCastReqBodyEmbedsCastIdProperties{}

// PostCastReqBodyEmbedsCastIdProperties struct for PostCastReqBodyEmbedsCastIdProperties
type PostCastReqBodyEmbedsCastIdProperties struct {
	// The unique identifier of a farcaster user (unsigned integer)
	Fid int32 `json:"fid"`
	Hash string `json:"hash"`
}

type _PostCastReqBodyEmbedsCastIdProperties PostCastReqBodyEmbedsCastIdProperties

// NewPostCastReqBodyEmbedsCastIdProperties instantiates a new PostCastReqBodyEmbedsCastIdProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostCastReqBodyEmbedsCastIdProperties(fid int32, hash string) *PostCastReqBodyEmbedsCastIdProperties {
	this := PostCastReqBodyEmbedsCastIdProperties{}
	this.Fid = fid
	this.Hash = hash
	return &this
}

// NewPostCastReqBodyEmbedsCastIdPropertiesWithDefaults instantiates a new PostCastReqBodyEmbedsCastIdProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostCastReqBodyEmbedsCastIdPropertiesWithDefaults() *PostCastReqBodyEmbedsCastIdProperties {
	this := PostCastReqBodyEmbedsCastIdProperties{}
	return &this
}

// GetFid returns the Fid field value
func (o *PostCastReqBodyEmbedsCastIdProperties) GetFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Fid
}

// GetFidOk returns a tuple with the Fid field value
// and a boolean to check if the value has been set.
func (o *PostCastReqBodyEmbedsCastIdProperties) GetFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fid, true
}

// SetFid sets field value
func (o *PostCastReqBodyEmbedsCastIdProperties) SetFid(v int32) {
	o.Fid = v
}


// GetHash returns the Hash field value
func (o *PostCastReqBodyEmbedsCastIdProperties) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *PostCastReqBodyEmbedsCastIdProperties) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *PostCastReqBodyEmbedsCastIdProperties) SetHash(v string) {
	o.Hash = v
}


func (o PostCastReqBodyEmbedsCastIdProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostCastReqBodyEmbedsCastIdProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fid"] = o.Fid
	toSerialize["hash"] = o.Hash
	return toSerialize, nil
}

func (o *PostCastReqBodyEmbedsCastIdProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fid",
		"hash",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varPostCastReqBodyEmbedsCastIdProperties := _PostCastReqBodyEmbedsCastIdProperties{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostCastReqBodyEmbedsCastIdProperties)

	if err != nil {
		return err
	}

	*o = PostCastReqBodyEmbedsCastIdProperties(varPostCastReqBodyEmbedsCastIdProperties)

	return err
}

type NullablePostCastReqBodyEmbedsCastIdProperties struct {
	value *PostCastReqBodyEmbedsCastIdProperties
	isSet bool
}

func (v NullablePostCastReqBodyEmbedsCastIdProperties) Get() *PostCastReqBodyEmbedsCastIdProperties {
	return v.value
}

func (v *NullablePostCastReqBodyEmbedsCastIdProperties) Set(val *PostCastReqBodyEmbedsCastIdProperties) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCastReqBodyEmbedsCastIdProperties) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCastReqBodyEmbedsCastIdProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCastReqBodyEmbedsCastIdProperties(val *PostCastReqBodyEmbedsCastIdProperties) *NullablePostCastReqBodyEmbedsCastIdProperties {
	return &NullablePostCastReqBodyEmbedsCastIdProperties{value: val, isSet: true}
}

func (v NullablePostCastReqBodyEmbedsCastIdProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCastReqBodyEmbedsCastIdProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



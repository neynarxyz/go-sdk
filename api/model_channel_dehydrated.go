/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChannelDehydrated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelDehydrated{}

// ChannelDehydrated struct for ChannelDehydrated
type ChannelDehydrated struct {
	Id            string              `json:"id"`
	Name          string              `json:"name"`
	Object        string              `json:"object"`
	ImageUrl      *string             `json:"image_url,omitempty"`
	ViewerContext *ChannelUserContext `json:"viewer_context,omitempty"`
}

type _ChannelDehydrated ChannelDehydrated

// NewChannelDehydrated instantiates a new ChannelDehydrated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelDehydrated(id string, name string, object string) *ChannelDehydrated {
	this := ChannelDehydrated{}
	this.Id = id
	this.Name = name
	this.Object = object
	return &this
}

// NewChannelDehydratedWithDefaults instantiates a new ChannelDehydrated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelDehydratedWithDefaults() *ChannelDehydrated {
	this := ChannelDehydrated{}
	return &this
}

// GetId returns the Id field value
func (o *ChannelDehydrated) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChannelDehydrated) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChannelDehydrated) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ChannelDehydrated) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChannelDehydrated) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChannelDehydrated) SetName(v string) {
	o.Name = v
}

// GetObject returns the Object field value
func (o *ChannelDehydrated) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ChannelDehydrated) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ChannelDehydrated) SetObject(v string) {
	o.Object = v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *ChannelDehydrated) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelDehydrated) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *ChannelDehydrated) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *ChannelDehydrated) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetViewerContext returns the ViewerContext field value if set, zero value otherwise.
func (o *ChannelDehydrated) GetViewerContext() ChannelUserContext {
	if o == nil || IsNil(o.ViewerContext) {
		var ret ChannelUserContext
		return ret
	}
	return *o.ViewerContext
}

// GetViewerContextOk returns a tuple with the ViewerContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelDehydrated) GetViewerContextOk() (*ChannelUserContext, bool) {
	if o == nil || IsNil(o.ViewerContext) {
		return nil, false
	}
	return o.ViewerContext, true
}

// HasViewerContext returns a boolean if a field has been set.
func (o *ChannelDehydrated) HasViewerContext() bool {
	if o != nil && !IsNil(o.ViewerContext) {
		return true
	}

	return false
}

// SetViewerContext gets a reference to the given ChannelUserContext and assigns it to the ViewerContext field.
func (o *ChannelDehydrated) SetViewerContext(v ChannelUserContext) {
	o.ViewerContext = &v
}

func (o ChannelDehydrated) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelDehydrated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["object"] = o.Object
	if !IsNil(o.ImageUrl) {
		toSerialize["image_url"] = o.ImageUrl
	}
	if !IsNil(o.ViewerContext) {
		toSerialize["viewer_context"] = o.ViewerContext
	}
	return toSerialize, nil
}

func (o *ChannelDehydrated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"object",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varChannelDehydrated := _ChannelDehydrated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChannelDehydrated)

	if err != nil {
		return err
	}

	*o = ChannelDehydrated(varChannelDehydrated)

	return err
}

type NullableChannelDehydrated struct {
	value *ChannelDehydrated
	isSet bool
}

func (v NullableChannelDehydrated) Get() *ChannelDehydrated {
	return v.value
}

func (v *NullableChannelDehydrated) Set(val *ChannelDehydrated) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelDehydrated) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelDehydrated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelDehydrated(val *ChannelDehydrated) *NullableChannelDehydrated {
	return &NullableChannelDehydrated{value: val, isSet: true}
}

func (v NullableChannelDehydrated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelDehydrated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CastEmbeddedParentAuthorFid - struct for CastEmbeddedParentAuthorFid
type CastEmbeddedParentAuthorFid struct {
	Int32 *int32
	Any   *interface{}
}

// int32AsCastEmbeddedParentAuthorFid is a convenience function that returns int32 wrapped in CastEmbeddedParentAuthorFid
func Int32AsCastEmbeddedParentAuthorFid(v *int32) CastEmbeddedParentAuthorFid {
	return CastEmbeddedParentAuthorFid{
		Int32: v,
	}
}

// interface{}AsCastEmbeddedParentAuthorFid is a convenience function that returns interface{} wrapped in CastEmbeddedParentAuthorFid
func AnyAsCastEmbeddedParentAuthorFid(v *interface{}) CastEmbeddedParentAuthorFid {
	return CastEmbeddedParentAuthorFid{
		Any: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CastEmbeddedParentAuthorFid) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into Any
	err = newStrictDecoder(data).Decode(&dst.Any)
	if err == nil {
		jsonAny, _ := json.Marshal(dst.Any)
		if string(jsonAny) == "{}" { // empty struct
			dst.Any = nil
		} else {
			if err = validator.Validate(dst.Any); err != nil {
				dst.Any = nil
			} else {
				match++
			}
		}
	} else {
		dst.Any = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Int32 = nil
		dst.Any = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CastEmbeddedParentAuthorFid)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CastEmbeddedParentAuthorFid)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CastEmbeddedParentAuthorFid) MarshalJSON() ([]byte, error) {
	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.Any != nil {
		return json.Marshal(&src.Any)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CastEmbeddedParentAuthorFid) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.Any != nil {
		return obj.Any
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CastEmbeddedParentAuthorFid) GetActualInstanceValue() interface{} {
	if obj.Int32 != nil {
		return *obj.Int32
	}

	if obj.Any != nil {
		return *obj.Any
	}

	// all schemas are nil
	return nil
}

type NullableCastEmbeddedParentAuthorFid struct {
	value *CastEmbeddedParentAuthorFid
	isSet bool
}

func (v NullableCastEmbeddedParentAuthorFid) Get() *CastEmbeddedParentAuthorFid {
	return v.value
}

func (v *NullableCastEmbeddedParentAuthorFid) Set(val *CastEmbeddedParentAuthorFid) {
	v.value = val
	v.isSet = true
}

func (v NullableCastEmbeddedParentAuthorFid) IsSet() bool {
	return v.isSet
}

func (v *NullableCastEmbeddedParentAuthorFid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastEmbeddedParentAuthorFid(val *CastEmbeddedParentAuthorFid) *NullableCastEmbeddedParentAuthorFid {
	return &NullableCastEmbeddedParentAuthorFid{value: val, isSet: true}
}

func (v NullableCastEmbeddedParentAuthorFid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastEmbeddedParentAuthorFid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

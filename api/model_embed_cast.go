/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmbedCast type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedCast{}

// EmbedCast struct for EmbedCast
type EmbedCast struct {
	// [DEPRECATED: Use \"cast\" key instead]
	// Deprecated
	CastId *CastId `json:"cast_id,omitempty"`
	Cast CastEmbedded `json:"cast"`
}

type _EmbedCast EmbedCast

// NewEmbedCast instantiates a new EmbedCast object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedCast(cast CastEmbedded) *EmbedCast {
	this := EmbedCast{}
	this.Cast = cast
	return &this
}

// NewEmbedCastWithDefaults instantiates a new EmbedCast object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedCastWithDefaults() *EmbedCast {
	this := EmbedCast{}
	return &this
}

// GetCastId returns the CastId field value if set, zero value otherwise.
// Deprecated
func (o *EmbedCast) GetCastId() CastId {
	if o == nil || IsNil(o.CastId) {
		var ret CastId
		return ret
	}
	return *o.CastId
}

// GetCastIdOk returns a tuple with the CastId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EmbedCast) GetCastIdOk() (*CastId, bool) {
	if o == nil || IsNil(o.CastId) {
		return nil, false
	}
	return o.CastId, true
}

// HasCastId returns a boolean if a field has been set.
func (o *EmbedCast) HasCastId() bool {
	if o != nil && !IsNil(o.CastId) {
		return true
	}

	return false
}

// SetCastId gets a reference to the given CastId and assigns it to the CastId field.
// Deprecated
func (o *EmbedCast) SetCastId(v CastId) {
	o.CastId = &v
}

// GetCast returns the Cast field value
func (o *EmbedCast) GetCast() CastEmbedded {
	if o == nil {
		var ret CastEmbedded
		return ret
	}

	return o.Cast
}

// GetCastOk returns a tuple with the Cast field value
// and a boolean to check if the value has been set.
func (o *EmbedCast) GetCastOk() (*CastEmbedded, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cast, true
}

// SetCast sets field value
func (o *EmbedCast) SetCast(v CastEmbedded) {
	o.Cast = v
}


func (o EmbedCast) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedCast) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CastId) {
		toSerialize["cast_id"] = o.CastId
	}
	toSerialize["cast"] = o.Cast
	return toSerialize, nil
}

func (o *EmbedCast) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cast",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varEmbedCast := _EmbedCast{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbedCast)

	if err != nil {
		return err
	}

	*o = EmbedCast(varEmbedCast)

	return err
}

type NullableEmbedCast struct {
	value *EmbedCast
	isSet bool
}

func (v NullableEmbedCast) Get() *EmbedCast {
	return v.value
}

func (v *NullableEmbedCast) Set(val *EmbedCast) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedCast) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedCast) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedCast(val *EmbedCast) *NullableEmbedCast {
	return &NullableEmbedCast{value: val, isSet: true}
}

func (v NullableEmbedCast) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedCast) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



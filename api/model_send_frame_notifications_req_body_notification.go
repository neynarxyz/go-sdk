/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendFrameNotificationsReqBodyNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendFrameNotificationsReqBodyNotification{}

// SendFrameNotificationsReqBodyNotification struct for SendFrameNotificationsReqBodyNotification
type SendFrameNotificationsReqBodyNotification struct {
	// The title of the notification. Must be between 1 and 32 characters.
	Title string `json:"title"`
	// The body of the notification. Must be between 1 and 128 characters.
	Body string `json:"body"`
	// The target URL to open when the user clicks the notification. Must be a valid URL.
	TargetUrl string `json:"target_url"`
	// An optional UUID for the notification, used as an idempotency key.
	Uuid *string `json:"uuid,omitempty"`
}

type _SendFrameNotificationsReqBodyNotification SendFrameNotificationsReqBodyNotification

// NewSendFrameNotificationsReqBodyNotification instantiates a new SendFrameNotificationsReqBodyNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendFrameNotificationsReqBodyNotification(title string, body string, targetUrl string) *SendFrameNotificationsReqBodyNotification {
	this := SendFrameNotificationsReqBodyNotification{}
	this.Title = title
	this.Body = body
	this.TargetUrl = targetUrl
	return &this
}

// NewSendFrameNotificationsReqBodyNotificationWithDefaults instantiates a new SendFrameNotificationsReqBodyNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendFrameNotificationsReqBodyNotificationWithDefaults() *SendFrameNotificationsReqBodyNotification {
	this := SendFrameNotificationsReqBodyNotification{}
	return &this
}

// GetTitle returns the Title field value
func (o *SendFrameNotificationsReqBodyNotification) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsReqBodyNotification) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SendFrameNotificationsReqBodyNotification) SetTitle(v string) {
	o.Title = v
}


// GetBody returns the Body field value
func (o *SendFrameNotificationsReqBodyNotification) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsReqBodyNotification) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *SendFrameNotificationsReqBodyNotification) SetBody(v string) {
	o.Body = v
}


// GetTargetUrl returns the TargetUrl field value
func (o *SendFrameNotificationsReqBodyNotification) GetTargetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetUrl
}

// GetTargetUrlOk returns a tuple with the TargetUrl field value
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsReqBodyNotification) GetTargetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetUrl, true
}

// SetTargetUrl sets field value
func (o *SendFrameNotificationsReqBodyNotification) SetTargetUrl(v string) {
	o.TargetUrl = v
}


// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *SendFrameNotificationsReqBodyNotification) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendFrameNotificationsReqBodyNotification) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *SendFrameNotificationsReqBodyNotification) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *SendFrameNotificationsReqBodyNotification) SetUuid(v string) {
	o.Uuid = &v
}

func (o SendFrameNotificationsReqBodyNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendFrameNotificationsReqBodyNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["body"] = o.Body
	toSerialize["target_url"] = o.TargetUrl
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

func (o *SendFrameNotificationsReqBodyNotification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"body",
		"target_url",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varSendFrameNotificationsReqBodyNotification := _SendFrameNotificationsReqBodyNotification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendFrameNotificationsReqBodyNotification)

	if err != nil {
		return err
	}

	*o = SendFrameNotificationsReqBodyNotification(varSendFrameNotificationsReqBodyNotification)

	return err
}

type NullableSendFrameNotificationsReqBodyNotification struct {
	value *SendFrameNotificationsReqBodyNotification
	isSet bool
}

func (v NullableSendFrameNotificationsReqBodyNotification) Get() *SendFrameNotificationsReqBodyNotification {
	return v.value
}

func (v *NullableSendFrameNotificationsReqBodyNotification) Set(val *SendFrameNotificationsReqBodyNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableSendFrameNotificationsReqBodyNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableSendFrameNotificationsReqBodyNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendFrameNotificationsReqBodyNotification(val *SendFrameNotificationsReqBodyNotification) *NullableSendFrameNotificationsReqBodyNotification {
	return &NullableSendFrameNotificationsReqBodyNotification{value: val, isSet: true}
}

func (v NullableSendFrameNotificationsReqBodyNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendFrameNotificationsReqBodyNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



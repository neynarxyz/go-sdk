/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionFrameDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionFrameDestination{}

// TransactionFrameDestination struct for TransactionFrameDestination
type TransactionFrameDestination struct {
	// Ethereum address
	Address string `json:"address" validate:"regexp=^0x[a-fA-F0-9]{40}$"`
	Network Networks `json:"network"`
	// Token contract address for the payment (e.g. 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913 is USDC on Base)
	TokenContractAddress string `json:"token_contract_address" validate:"regexp=^0x[a-fA-F0-9]{40}$"`
	// Amount to send (must be greater than 0)
	Amount float32 `json:"amount"`
}

type _TransactionFrameDestination TransactionFrameDestination

// NewTransactionFrameDestination instantiates a new TransactionFrameDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionFrameDestination(address string, network Networks, tokenContractAddress string, amount float32) *TransactionFrameDestination {
	this := TransactionFrameDestination{}
	this.Address = address
	this.Network = network
	this.TokenContractAddress = tokenContractAddress
	this.Amount = amount
	return &this
}

// NewTransactionFrameDestinationWithDefaults instantiates a new TransactionFrameDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionFrameDestinationWithDefaults() *TransactionFrameDestination {
	this := TransactionFrameDestination{}
	return &this
}

// GetAddress returns the Address field value
func (o *TransactionFrameDestination) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TransactionFrameDestination) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TransactionFrameDestination) SetAddress(v string) {
	o.Address = v
}

// GetNetwork returns the Network field value
func (o *TransactionFrameDestination) GetNetwork() Networks {
	if o == nil {
		var ret Networks
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *TransactionFrameDestination) GetNetworkOk() (*Networks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *TransactionFrameDestination) SetNetwork(v Networks) {
	o.Network = v
}

// GetTokenContractAddress returns the TokenContractAddress field value
func (o *TransactionFrameDestination) GetTokenContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenContractAddress
}

// GetTokenContractAddressOk returns a tuple with the TokenContractAddress field value
// and a boolean to check if the value has been set.
func (o *TransactionFrameDestination) GetTokenContractAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenContractAddress, true
}

// SetTokenContractAddress sets field value
func (o *TransactionFrameDestination) SetTokenContractAddress(v string) {
	o.TokenContractAddress = v
}

// GetAmount returns the Amount field value
func (o *TransactionFrameDestination) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionFrameDestination) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionFrameDestination) SetAmount(v float32) {
	o.Amount = v
}

func (o TransactionFrameDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionFrameDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["network"] = o.Network
	toSerialize["token_contract_address"] = o.TokenContractAddress
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *TransactionFrameDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"network",
		"token_contract_address",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionFrameDestination := _TransactionFrameDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionFrameDestination)

	if err != nil {
		return err
	}

	*o = TransactionFrameDestination(varTransactionFrameDestination)

	return err
}

type NullableTransactionFrameDestination struct {
	value *TransactionFrameDestination
	isSet bool
}

func (v NullableTransactionFrameDestination) Get() *TransactionFrameDestination {
	return v.value
}

func (v *NullableTransactionFrameDestination) Set(val *TransactionFrameDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFrameDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFrameDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFrameDestination(val *TransactionFrameDestination) *NullableTransactionFrameDestination {
	return &NullableTransactionFrameDestination{value: val, isSet: true}
}

func (v NullableTransactionFrameDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFrameDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



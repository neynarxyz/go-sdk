/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CastsMetricsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastsMetricsResponse{}

// CastsMetricsResponse struct for CastsMetricsResponse
type CastsMetricsResponse struct {
	Metrics []CastsMetrics `json:"metrics"`
}

type _CastsMetricsResponse CastsMetricsResponse

// NewCastsMetricsResponse instantiates a new CastsMetricsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastsMetricsResponse(metrics []CastsMetrics) *CastsMetricsResponse {
	this := CastsMetricsResponse{}
	this.Metrics = metrics
	return &this
}

// NewCastsMetricsResponseWithDefaults instantiates a new CastsMetricsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastsMetricsResponseWithDefaults() *CastsMetricsResponse {
	this := CastsMetricsResponse{}
	return &this
}

// GetMetrics returns the Metrics field value
func (o *CastsMetricsResponse) GetMetrics() []CastsMetrics {
	if o == nil {
		var ret []CastsMetrics
		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value
// and a boolean to check if the value has been set.
func (o *CastsMetricsResponse) GetMetricsOk() ([]CastsMetrics, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metrics, true
}

// SetMetrics sets field value
func (o *CastsMetricsResponse) SetMetrics(v []CastsMetrics) {
	o.Metrics = v
}

func (o CastsMetricsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastsMetricsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metrics"] = o.Metrics
	return toSerialize, nil
}

func (o *CastsMetricsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metrics",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCastsMetricsResponse := _CastsMetricsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCastsMetricsResponse)

	if err != nil {
		return err
	}

	*o = CastsMetricsResponse(varCastsMetricsResponse)

	return err
}

type NullableCastsMetricsResponse struct {
	value *CastsMetricsResponse
	isSet bool
}

func (v NullableCastsMetricsResponse) Get() *CastsMetricsResponse {
	return v.value
}

func (v *NullableCastsMetricsResponse) Set(val *CastsMetricsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCastsMetricsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCastsMetricsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastsMetricsResponse(val *CastsMetricsResponse) *NullableCastsMetricsResponse {
	return &NullableCastsMetricsResponse{value: val, isSet: true}
}

func (v NullableCastsMetricsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastsMetricsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Farcaster API V2

The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 

API version: 2.33.1
Contact: team@neynar.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TextRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextRange{}

// TextRange struct for TextRange
type TextRange struct {
	Start float32 `json:"start"`
	End float32 `json:"end"`
}

type _TextRange TextRange

// NewTextRange instantiates a new TextRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextRange(start float32, end float32) *TextRange {
	this := TextRange{}
	this.Start = start
	this.End = end
	return &this
}

// NewTextRangeWithDefaults instantiates a new TextRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextRangeWithDefaults() *TextRange {
	this := TextRange{}
	return &this
}

// GetStart returns the Start field value
func (o *TextRange) GetStart() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *TextRange) GetStartOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *TextRange) SetStart(v float32) {
	o.Start = v
}


// GetEnd returns the End field value
func (o *TextRange) GetEnd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *TextRange) GetEndOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *TextRange) SetEnd(v float32) {
	o.End = v
}


func (o TextRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End
	return toSerialize, nil
}

func (o *TextRange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"start",
		"end",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varTextRange := _TextRange{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTextRange)

	if err != nil {
		return err
	}

	*o = TextRange(varTextRange)

	return err
}

type NullableTextRange struct {
	value *TextRange
	isSet bool
}

func (v NullableTextRange) Get() *TextRange {
	return v.value
}

func (v *NullableTextRange) Set(val *TextRange) {
	v.value = val
	v.isSet = true
}

func (v NullableTextRange) IsSet() bool {
	return v.isSet
}

func (v *NullableTextRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextRange(val *TextRange) *NullableTextRange {
	return &NullableTextRange{value: val, isSet: true}
}

func (v NullableTextRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


